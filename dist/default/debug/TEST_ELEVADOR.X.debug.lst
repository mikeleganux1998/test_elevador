

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sat Jun  8 15:31:26 2024

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	text11,global,reloc=2,class=CODE,delta=1
    20                           	psect	text12,global,reloc=2,class=CODE,delta=1
    21                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    22                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    23  0000                     
    24                           	psect	smallconst
    25  000800                     __psmallconst:
    26                           	opt stack 0
    27  000800  00                 	db	0
    28  000801                     readKeypad@F4542:
    29                           	opt stack 0
    30  000801  31                 	db	49
    31  000802  32                 	db	50
    32  000803  33                 	db	51
    33  000804  41                 	db	65
    34  000805  34                 	db	52
    35  000806  35                 	db	53
    36  000807  36                 	db	54
    37  000808  42                 	db	66
    38  000809  37                 	db	55
    39  00080A  38                 	db	56
    40  00080B  39                 	db	57
    41  00080C  43                 	db	67
    42  00080D  2A                 	db	42
    43  00080E  30                 	db	48
    44  00080F  23                 	db	35
    45  000810  44                 	db	68
    46  000811                     __end_ofreadKeypad@F4542:
    47                           	opt stack 0
    48  0000                     _LATC	set	3979
    49  0000                     _PORTC	set	3970
    50  0000                     _RCSTAbits	set	4011
    51  0000                     _SPBRG	set	4015
    52  0000                     _TRISBbits	set	3987
    53  0000                     _TRISC	set	3988
    54  0000                     _TRISCbits	set	3988
    55  0000                     _TRISD	set	3989
    56  0000                     _TXREG	set	4013
    57  0000                     _TXSTAbits	set	4012
    58  0000                     _LATB0	set	31824
    59  0000                     _LATB1	set	31825
    60  0000                     _LATD0	set	31840
    61  0000                     _LATD1	set	31841
    62  0000                     _LATD2	set	31842
    63  0000                     _LATD3	set	31843
    64  0000                     _LATD4	set	31844
    65  0000                     _LATD5	set	31845
    66  000811                     STR_1:
    67  000811  45                 	db	69	;'E'
    68  000812  6C                 	db	108	;'l'
    69  000813  65                 	db	101	;'e'
    70  000814  76                 	db	118	;'v'
    71  000815  61                 	db	97	;'a'
    72  000816  74                 	db	116	;'t'
    73  000817  6F                 	db	111	;'o'
    74  000818  72                 	db	114	;'r'
    75  000819  20                 	db	32
    76  00081A  52                 	db	82	;'R'
    77  00081B  65                 	db	101	;'e'
    78  00081C  61                 	db	97	;'a'
    79  00081D  64                 	db	100	;'d'
    80  00081E  79                 	db	121	;'y'
    81  00081F  00                 	db	0
    82  000820                     STR_3:
    83  000820  4E                 	db	78	;'N'
    84  000821  69                 	db	105	;'i'
    85  000822  76                 	db	118	;'v'
    86  000823  65                 	db	101	;'e'
    87  000824  6C                 	db	108	;'l'
    88  000825  3A                 	db	58	;':'
    89  000826  20                 	db	32
    90  000827  25                 	db	37
    91  000828  63                 	db	99	;'c'
    92  000829  0A                 	db	10
    93  00082A  00                 	db	0
    94  00082B                     STR_2:
    95  00082B  4E                 	db	78	;'N'
    96  00082C  69                 	db	105	;'i'
    97  00082D  76                 	db	118	;'v'
    98  00082E  65                 	db	101	;'e'
    99  00082F  6C                 	db	108	;'l'
   100  000830  3A                 	db	58	;':'
   101  000831  20                 	db	32
   102  000832  00                 	db	0
   103                           
   104                           ; #config settings
   105  000833  00                 	db	0	; dummy byte at the end
   106  0000                     
   107                           	psect	cinit
   108  000D32                     __pcinit:
   109                           	opt stack 0
   110  000D32                     start_initialization:
   111                           	opt stack 0
   112  000D32                     __initialization:
   113                           	opt stack 0
   114  000D32                     end_of_initialization:
   115                           	opt stack 0
   116  000D32                     __end_of__initialization:
   117                           	opt stack 0
   118  000D32  0E00               	movlw	low (__Lmediumconst shr (0+16))
   119  000D34  6EF8               	movwf	tblptru,c
   120  000D36  0100               	movlb	0
   121  000D38  EF71  F005         	goto	_main	;jump to C main() function
   122                           tblptru	equ	0xFF8
   123                           
   124                           	psect	cstackCOMRAM
   125  000001                     __pcstackCOMRAM:
   126                           	opt stack 0
   127  000001                     ??_readKeypad:
   128  000001                     ??_lcdCommand:
   129  000001                     ??_lcdData:
   130  000001                     ?_sprintf:
   131                           	opt stack 0
   132  000001                     ?___wmul:
   133                           	opt stack 0
   134  000001                     sendUART@data:
   135                           	opt stack 0
   136  000001                     sprintf@sp:
   137                           	opt stack 0
   138  000001                     ___wmul@multiplier:
   139                           	opt stack 0
   140                           
   141                           ; 2 bytes @ 0x0
   142  000001                     	ds	2
   143  000003                     lcdCommand@cmd:
   144                           	opt stack 0
   145  000003                     lcdData@data:
   146                           	opt stack 0
   147  000003                     sprintf@f:
   148                           	opt stack 0
   149  000003                     ___wmul@multiplicand:
   150                           	opt stack 0
   151                           
   152                           ; 2 bytes @ 0x2
   153  000003                     	ds	1
   154  000004                     ??_initLCD:
   155  000004                     lcdPrint@str:
   156                           	opt stack 0
   157                           
   158                           ; 2 bytes @ 0x3
   159  000004                     	ds	1
   160  000005                     ___wmul@product:
   161                           	opt stack 0
   162  000005                     readKeypad@keymap:
   163                           	opt stack 0
   164                           
   165                           ; 16 bytes @ 0x4
   166  000005                     	ds	1
   167  000006                     
   168                           ; 0 bytes @ 0x5
   169  000006                     	ds	1
   170  000007                     sprintf@flag:
   171                           	opt stack 0
   172  000007                     moveMotor@steps:
   173                           	opt stack 0
   174                           
   175                           ; 2 bytes @ 0x6
   176  000007                     	ds	1
   177  000008                     sprintf@ap:
   178                           	opt stack 0
   179                           
   180                           ; 2 bytes @ 0x7
   181  000008                     	ds	1
   182  000009                     moveMotor@direction:
   183                           	opt stack 0
   184                           
   185                           ; 2 bytes @ 0x8
   186  000009                     	ds	1
   187  00000A                     sprintf@c:
   188                           	opt stack 0
   189                           
   190                           ; 1 bytes @ 0x9
   191  00000A                     	ds	1
   192  00000B                     ??_moveMotor:
   193                           
   194                           ; 0 bytes @ 0xA
   195  00000B                     	ds	1
   196  00000C                     moveMotor@i:
   197                           	opt stack 0
   198                           
   199                           ; 2 bytes @ 0xB
   200  00000C                     	ds	9
   201  000015                     readKeypad@col:
   202                           	opt stack 0
   203                           
   204                           ; 2 bytes @ 0x14
   205  000015                     	ds	2
   206  000017                     readKeypad@row:
   207                           	opt stack 0
   208                           
   209                           ; 2 bytes @ 0x16
   210  000017                     	ds	2
   211  000019                     main@msg:
   212                           	opt stack 0
   213                           
   214                           ; 16 bytes @ 0x18
   215  000019                     	ds	16
   216  000029                     main@level:
   217                           	opt stack 0
   218                           
   219                           ; 2 bytes @ 0x28
   220  000029                     	ds	2
   221  00002B                     main@key:
   222                           	opt stack 0
   223                           
   224                           ; 1 bytes @ 0x2A
   225  00002B                     	ds	1
   226                           tblptru	equ	0xFF8
   227                           
   228 ;;
   229 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   230 ;;
   231 ;; *************** function _main *****************
   232 ;; Defined at:
   233 ;;		line 47 in file "main.c"
   234 ;; Parameters:    Size  Location     Type
   235 ;;		None
   236 ;; Auto vars:     Size  Location     Type
   237 ;;  msg            16   24[COMRAM] unsigned char [16]
   238 ;;  level           2   40[COMRAM] int 
   239 ;;  key             1   42[COMRAM] unsigned char 
   240 ;; Return value:  Size  Location     Type
   241 ;;		None               void
   242 ;; Registers used:
   243 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   244 ;; Tracked objects:
   245 ;;		On entry : 0/0
   246 ;;		On exit  : 0/0
   247 ;;		Unchanged: 0/0
   248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   249 ;;      Params:         0       0       0       0       0       0       0       0       0
   250 ;;      Locals:        19       0       0       0       0       0       0       0       0
   251 ;;      Temps:          0       0       0       0       0       0       0       0       0
   252 ;;      Totals:        19       0       0       0       0       0       0       0       0
   253 ;;Total ram usage:       19 bytes
   254 ;; Hardware stack levels required when called:    2
   255 ;; This function calls:
   256 ;;		___wmul
   257 ;;		_initKeypad
   258 ;;		_initLCD
   259 ;;		_initMotor
   260 ;;		_initUART
   261 ;;		_lcdCommand
   262 ;;		_lcdData
   263 ;;		_lcdPrint
   264 ;;		_moveMotor
   265 ;;		_readKeypad
   266 ;;		_sendUART
   267 ;;		_sprintf
   268 ;; This function is called by:
   269 ;;		Startup code after reset
   270 ;; This function uses a non-reentrant model
   271 ;;
   272                           
   273                           	psect	text0
   274  000AE2                     __ptext0:
   275                           	opt stack 0
   276  000AE2                     _main:
   277                           	opt stack 29
   278                           
   279                           ;main.c: 49: initLCD();
   280                           
   281                           ;incstack = 0
   282  000AE2  EC37  F006         	call	_initLCD	;wreg free
   283                           
   284                           ;main.c: 50: initKeypad();
   285  000AE6  EC9E  F006         	call	_initKeypad	;wreg free
   286                           
   287                           ;main.c: 51: initMotor();
   288  000AEA  ECA3  F006         	call	_initMotor	;wreg free
   289                           
   290                           ;main.c: 52: initUART();
   291  000AEE  EC8F  F006         	call	_initUART	;wreg free
   292                           
   293                           ;main.c: 54: lcdPrint("Elevator Ready");
   294  000AF2  0E11               	movlw	low STR_1
   295  000AF4  6E04               	movwf	lcdPrint@str,c
   296  000AF6  0E08               	movlw	high STR_1
   297  000AF8  6E05               	movwf	lcdPrint@str+1,c
   298  000AFA  EC50  F006         	call	_lcdPrint	;wreg free
   299  000AFE  D000               	goto	l1001
   300  000B00                     l1001:
   301                           
   302                           ;main.c: 57: char key = readKeypad();
   303  000B00  EC1A  F004         	call	_readKeypad	;wreg free
   304  000B04  6E2B               	movwf	main@key,c
   305                           
   306                           ;main.c: 59: if (key != '\0') {
   307  000B06  502B               	movf	main@key,w,c
   308  000B08  B4D8               	btfsc	status,2,c
   309  000B0A  D7FA               	goto	l1001
   310                           
   311                           ;main.c: 60: lcdCommand(0x01);
   312  000B0C  0E01               	movlw	1
   313  000B0E  ECFF  F004         	call	_lcdCommand
   314                           
   315                           ;main.c: 61: lcdPrint("Nivel: ");
   316  000B12  0E2B               	movlw	low STR_2
   317  000B14  6E04               	movwf	lcdPrint@str,c
   318  000B16  0E08               	movlw	high STR_2
   319  000B18  6E05               	movwf	lcdPrint@str+1,c
   320  000B1A  EC50  F006         	call	_lcdPrint	;wreg free
   321                           
   322                           ;main.c: 62: lcdData(key);
   323  000B1E  502B               	movf	main@key,w,c
   324  000B20  EC8D  F004         	call	_lcdData
   325                           
   326                           ;main.c: 65: char msg[16];
   327                           ;main.c: 66: sprintf(msg, "Nivel: %c\n", key);
   328  000B24  0E19               	movlw	low main@msg
   329  000B26  6E01               	movwf	sprintf@sp,c
   330  000B28  0E00               	movlw	high main@msg
   331  000B2A  6E02               	movwf	sprintf@sp+1,c
   332  000B2C  0E20               	movlw	low STR_3
   333  000B2E  6E03               	movwf	sprintf@f,c
   334  000B30  0E08               	movlw	high STR_3
   335  000B32  6E04               	movwf	sprintf@f+1,c
   336  000B34  C02B  F005         	movff	main@key,?_sprintf+4
   337  000B38  6A06               	clrf	?_sprintf+5,c
   338  000B3A  ECC2  F005         	call	_sprintf	;wreg free
   339                           
   340                           ;main.c: 67: sendUART(msg);
   341  000B3E  0E19               	movlw	low main@msg
   342  000B40  6E01               	movwf	sendUART@data,c
   343  000B42  0E00               	movlw	high main@msg
   344  000B44  6E02               	movwf	sendUART@data+1,c
   345  000B46  EC66  F006         	call	_sendUART	;wreg free
   346                           
   347                           ;main.c: 70: int level = key - '0';
   348  000B4A  0ED0               	movlw	208
   349  000B4C  242B               	addwf	main@key,w,c
   350  000B4E  6E29               	movwf	main@level,c
   351  000B50  6A2A               	clrf	main@level+1,c
   352  000B52  0EFF               	movlw	255
   353  000B54  222A               	addwfc	main@level+1,f,c
   354                           
   355                           ;main.c: 71: moveMotor(level * 100, 1);
   356  000B56  C029  F001         	movff	main@level,___wmul@multiplier
   357  000B5A  C02A  F002         	movff	main@level+1,___wmul@multiplier+1
   358  000B5E  0E00               	movlw	0
   359  000B60  6E04               	movwf	___wmul@multiplicand+1,c
   360  000B62  0E64               	movlw	100
   361  000B64  6E03               	movwf	___wmul@multiplicand,c
   362  000B66  EC7B  F006         	call	___wmul	;wreg free
   363  000B6A  C001  F007         	movff	?___wmul,moveMotor@steps
   364  000B6E  C002  F008         	movff	?___wmul+1,moveMotor@steps+1
   365  000B72  0E00               	movlw	0
   366  000B74  6E0A               	movwf	moveMotor@direction+1,c
   367  000B76  0E01               	movlw	1
   368  000B78  6E09               	movwf	moveMotor@direction,c
   369  000B7A  EC0E  F006         	call	_moveMotor	;wreg free
   370  000B7E  D7C0               	goto	l1001
   371  000B80  EF00  F000         	goto	start
   372  000B84                     __end_of_main:
   373                           	opt stack 0
   374                           tblptru	equ	0xFF8
   375                           status	equ	0xFD8
   376                           
   377 ;; *************** function _sprintf *****************
   378 ;; Defined at:
   379 ;;		line 492 in file "/opt/microchip/xc8/v1.34/sources/common/doprnt.c"
   380 ;; Parameters:    Size  Location     Type
   381 ;;  sp              2    0[COMRAM] PTR unsigned char 
   382 ;;		 -> main@msg(16), 
   383 ;;  f               2    2[COMRAM] PTR const unsigned char 
   384 ;;		 -> STR_3(11), 
   385 ;; Auto vars:     Size  Location     Type
   386 ;;  tmpval          4    0        struct .
   387 ;;  cp              3    0        PTR const unsigned char 
   388 ;;  ap              2    7[COMRAM] PTR void [1]
   389 ;;		 -> ?_sprintf(2), 
   390 ;;  len             2    0        unsigned int 
   391 ;;  val             2    0        unsigned int 
   392 ;;  c               1    9[COMRAM] char 
   393 ;;  flag            1    6[COMRAM] unsigned char 
   394 ;;  prec            1    0        char 
   395 ;; Return value:  Size  Location     Type
   396 ;;                  2    0[COMRAM] int 
   397 ;; Registers used:
   398 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
   399 ;; Tracked objects:
   400 ;;		On entry : 0/0
   401 ;;		On exit  : 0/0
   402 ;;		Unchanged: 0/0
   403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   404 ;;      Params:         6       0       0       0       0       0       0       0       0
   405 ;;      Locals:         4       0       0       0       0       0       0       0       0
   406 ;;      Temps:          0       0       0       0       0       0       0       0       0
   407 ;;      Totals:        10       0       0       0       0       0       0       0       0
   408 ;;Total ram usage:       10 bytes
   409 ;; Hardware stack levels used:    1
   410 ;; This function calls:
   411 ;;		Nothing
   412 ;; This function is called by:
   413 ;;		_main
   414 ;; This function uses a non-reentrant model
   415 ;;
   416                           
   417                           	psect	text1
   418  000B84                     __ptext1:
   419                           	opt stack 0
   420  000B84                     _sprintf:
   421                           	opt stack 30
   422                           
   423                           ;doprnt.c: 494: va_list ap;
   424                           ;doprnt.c: 499: signed char c;
   425                           ;doprnt.c: 506: signed char prec;
   426                           ;doprnt.c: 508: unsigned char flag;
   427                           ;doprnt.c: 523: union {
   428                           ;doprnt.c: 524: unsigned long vd;
   429                           ;doprnt.c: 525: double integ;
   430                           ;doprnt.c: 526: } tmpval;
   431                           ;doprnt.c: 528: unsigned int val;
   432                           ;doprnt.c: 529: unsigned len;
   433                           ;doprnt.c: 530: const char * cp;
   434                           ;doprnt.c: 533: *ap = __va_start();
   435                           
   436                           ;incstack = 0
   437  000B84  0E05               	movlw	low (?_sprintf+4)
   438  000B86  6E08               	movwf	sprintf@ap,c
   439  000B88  0E00               	movlw	high (?_sprintf+4)
   440  000B8A  6E09               	movwf	sprintf@ap+1,c
   441                           
   442                           ;doprnt.c: 536: while(c = *f++) {
   443  000B8C  D031               	goto	l961
   444  000B8E                     l941:
   445                           
   446                           ;doprnt.c: 538: if(c != '%')
   447  000B8E  0E25               	movlw	37
   448  000B90  180A               	xorwf	sprintf@c,w,c
   449  000B92  B4D8               	btfsc	status,2,c
   450  000B94  D004               	goto	l947
   451  000B96  D012               	goto	l953
   452  000B98                     l945:
   453  000B98  4A01               	infsnz	sprintf@sp,f,c
   454  000B9A  2A02               	incf	sprintf@sp+1,f,c
   455                           
   456                           ;doprnt.c: 542: continue;
   457  000B9C  D029               	goto	l961
   458  000B9E                     l947:
   459                           
   460                           ;doprnt.c: 543: }
   461                           ;doprnt.c: 548: flag = 0;
   462  000B9E  0E00               	movlw	0
   463  000BA0  6E07               	movwf	sprintf@flag,c
   464                           
   465                           ;doprnt.c: 635: switch(c = *f++) {
   466  000BA2  D014               	goto	l959
   467                           
   468                           ;doprnt.c: 638: goto alldone;
   469                           
   470                           ;doprnt.c: 637: case 0:
   471  000BA4  D033               	goto	l963
   472  000BA6                     l949:
   473                           
   474                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
   475  000BA6  C008  FFD9         	movff	sprintf@ap,fsr2l
   476  000BAA  C009  FFDA         	movff	sprintf@ap+1,fsr2h
   477  000BAE  50DF               	movf	indf2,w,c
   478  000BB0  6E0A               	movwf	sprintf@c,c
   479  000BB2  0E02               	movlw	2
   480  000BB4  2608               	addwf	sprintf@ap,f,c
   481  000BB6  0E00               	movlw	0
   482  000BB8  2209               	addwfc	sprintf@ap+1,f,c
   483  000BBA  D000               	goto	l953
   484  000BBC                     l953:
   485                           
   486                           ;doprnt.c: 809: ((*sp++ = (c)));
   487  000BBC  C001  FFD9         	movff	sprintf@sp,fsr2l
   488  000BC0  C002  FFDA         	movff	sprintf@sp+1,fsr2h
   489  000BC4  C00A  FFDF         	movff	sprintf@c,indf2
   490  000BC8  D7E7               	goto	l945
   491                           
   492                           ;doprnt.c: 822: }
   493                           
   494                           ;doprnt.c: 810: continue;
   495  000BCA  D012               	goto	l961
   496  000BCC                     l959:
   497  000BCC  C003  FFF6         	movff	sprintf@f,tblptrl
   498  000BD0  C004  FFF7         	movff	sprintf@f+1,tblptrh
   499  000BD4  4A03               	infsnz	sprintf@f,f,c
   500  000BD6  2A04               	incf	sprintf@f+1,f,c
   501  000BD8                     	if	0	;tblptru may be non-zero
   502  000BD8                     	endif
   503  000BD8                     	if	0	;tblptru may be non-zero
   504  000BD8                     	endif
   505  000BD8  0008               	tblrd		*
   506  000BDA  CFF5 F00A          	movff	tablat,sprintf@c
   507  000BDE  500A               	movf	sprintf@c,w,c
   508                           
   509                           ; Switch size 1, requested type "space"
   510                           ; Number of cases is 2, Range of values is 0 to 99
   511                           ; switch strategies available:
   512                           ; Name         Instructions Cycles
   513                           ; simple_byte            7     4 (average)
   514                           ;	Chosen strategy is simple_byte
   515  000BE0  0A00               	xorlw	0	; case 0
   516  000BE2  B4D8               	btfsc	status,2,c
   517  000BE4  D013               	goto	l963
   518  000BE6  0A63               	xorlw	99	; case 99
   519  000BE8  B4D8               	btfsc	status,2,c
   520  000BEA  D7DD               	goto	l949
   521  000BEC  D7E7               	goto	l953
   522  000BEE  D000               	goto	l961
   523  000BF0                     l961:
   524  000BF0  C003  FFF6         	movff	sprintf@f,tblptrl
   525  000BF4  C004  FFF7         	movff	sprintf@f+1,tblptrh
   526  000BF8  4A03               	infsnz	sprintf@f,f,c
   527  000BFA  2A04               	incf	sprintf@f+1,f,c
   528  000BFC                     	if	0	;tblptru may be non-zero
   529  000BFC                     	endif
   530  000BFC                     	if	0	;tblptru may be non-zero
   531  000BFC                     	endif
   532  000BFC  0008               	tblrd		*
   533  000BFE  CFF5 F00A          	movff	tablat,sprintf@c
   534  000C02  500A               	movf	sprintf@c,w,c
   535  000C04  B4D8               	btfsc	status,2,c
   536  000C06  D002               	goto	l963
   537  000C08  D7C2               	goto	l941
   538  000C0A  D000               	goto	l963
   539  000C0C                     l963:
   540                           
   541                           ;doprnt.c: 1538: *sp = 0;
   542  000C0C  C001  FFD9         	movff	sprintf@sp,fsr2l
   543  000C10  C002  FFDA         	movff	sprintf@sp+1,fsr2h
   544  000C14  0E00               	movlw	0
   545  000C16  6EDF               	movwf	indf2,c
   546  000C18  D000               	goto	l133
   547  000C1A                     l133:
   548  000C1A  0012               	return		;funcret
   549  000C1C                     __end_of_sprintf:
   550                           	opt stack 0
   551                           tblptru	equ	0xFF8
   552                           tblptrh	equ	0xFF7
   553                           tblptrl	equ	0xFF6
   554                           tablat	equ	0xFF5
   555                           indf2	equ	0xFDF
   556                           fsr2h	equ	0xFDA
   557                           fsr2l	equ	0xFD9
   558                           status	equ	0xFD8
   559                           
   560 ;; *************** function _sendUART *****************
   561 ;; Defined at:
   562 ;;		line 189 in file "main.c"
   563 ;; Parameters:    Size  Location     Type
   564 ;;  data            2    0[COMRAM] PTR unsigned char 
   565 ;;		 -> main@msg(16), 
   566 ;; Auto vars:     Size  Location     Type
   567 ;;		None
   568 ;; Return value:  Size  Location     Type
   569 ;;		None               void
   570 ;; Registers used:
   571 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   572 ;; Tracked objects:
   573 ;;		On entry : 0/0
   574 ;;		On exit  : 0/0
   575 ;;		Unchanged: 0/0
   576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   577 ;;      Params:         2       0       0       0       0       0       0       0       0
   578 ;;      Locals:         0       0       0       0       0       0       0       0       0
   579 ;;      Temps:          0       0       0       0       0       0       0       0       0
   580 ;;      Totals:         2       0       0       0       0       0       0       0       0
   581 ;;Total ram usage:        2 bytes
   582 ;; Hardware stack levels used:    1
   583 ;; This function calls:
   584 ;;		Nothing
   585 ;; This function is called by:
   586 ;;		_main
   587 ;; This function uses a non-reentrant model
   588 ;;
   589                           
   590                           	psect	text2
   591  000CCC                     __ptext2:
   592                           	opt stack 0
   593  000CCC                     _sendUART:
   594                           	opt stack 30
   595                           
   596                           ;main.c: 190: while (*data) {
   597                           
   598                           ;incstack = 0
   599  000CCC  D00C               	goto	l973
   600                           
   601                           ;main.c: 191: while (!TXSTAbits.TRMT);
   602  000CCE  D000               	goto	l112
   603  000CD0                     l112:
   604  000CD0  A2AC               	btfss	4012,1,c	;volatile
   605  000CD2  D7FE               	goto	l112
   606                           
   607                           ;main.c: 192: TXREG = *data++;
   608  000CD4  C001  FFD9         	movff	sendUART@data,fsr2l
   609  000CD8  C002  FFDA         	movff	sendUART@data+1,fsr2h
   610  000CDC  50DF               	movf	indf2,w,c
   611  000CDE  6EAD               	movwf	4013,c	;volatile
   612  000CE0  4A01               	infsnz	sendUART@data,f,c
   613  000CE2  2A02               	incf	sendUART@data+1,f,c
   614  000CE4  D000               	goto	l973
   615  000CE6                     l973:
   616  000CE6  C001  FFD9         	movff	sendUART@data,fsr2l
   617  000CEA  C002  FFDA         	movff	sendUART@data+1,fsr2h
   618  000CEE  50DF               	movf	indf2,w,c
   619  000CF0  A4D8               	btfss	status,2,c
   620  000CF2  D7EE               	goto	l112
   621  000CF4  0012               	return		;funcret
   622  000CF6                     __end_of_sendUART:
   623                           	opt stack 0
   624                           tblptru	equ	0xFF8
   625                           tblptrh	equ	0xFF7
   626                           tblptrl	equ	0xFF6
   627                           tablat	equ	0xFF5
   628                           indf2	equ	0xFDF
   629                           fsr2h	equ	0xFDA
   630                           fsr2l	equ	0xFD9
   631                           status	equ	0xFD8
   632                           
   633 ;; *************** function _readKeypad *****************
   634 ;; Defined at:
   635 ;;		line 140 in file "main.c"
   636 ;; Parameters:    Size  Location     Type
   637 ;;		None
   638 ;; Auto vars:     Size  Location     Type
   639 ;;  row             2   22[COMRAM] int 
   640 ;;  col             2   20[COMRAM] int 
   641 ;;  keymap         16    4[COMRAM] const unsigned char [4][
   642 ;; Return value:  Size  Location     Type
   643 ;;                  1    wreg      unsigned char 
   644 ;; Registers used:
   645 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
   646 ;; Tracked objects:
   647 ;;		On entry : 0/0
   648 ;;		On exit  : 0/0
   649 ;;		Unchanged: 0/0
   650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   651 ;;      Params:         0       0       0       0       0       0       0       0       0
   652 ;;      Locals:        20       0       0       0       0       0       0       0       0
   653 ;;      Temps:          4       0       0       0       0       0       0       0       0
   654 ;;      Totals:        24       0       0       0       0       0       0       0       0
   655 ;;Total ram usage:       24 bytes
   656 ;; Hardware stack levels used:    1
   657 ;; This function calls:
   658 ;;		Nothing
   659 ;; This function is called by:
   660 ;;		_main
   661 ;; This function uses a non-reentrant model
   662 ;;
   663                           
   664                           	psect	text3
   665  000834                     __ptext3:
   666                           	opt stack 0
   667  000834                     _readKeypad:
   668                           	opt stack 30
   669                           
   670                           ;main.c: 141: const char keymap[4][4] = {
   671                           ;main.c: 142: {'1', '2', '3', 'A'},
   672                           ;main.c: 143: {'4', '5', '6', 'B'},
   673                           ;main.c: 144: {'7', '8', '9', 'C'},
   674                           ;main.c: 145: {'*', '0', '#', 'D'}
   675                           ;main.c: 146: };
   676                           
   677                           ;incstack = 0
   678  000834  0E01               	movlw	low readKeypad@F4542
   679  000836  6EF6               	movwf	tblptrl,c
   680  000838                     	if	1	;There is more than 1 active tblptr byte
   681  000838  0E08               	movlw	high readKeypad@F4542
   682  00083A  6EF7               	movwf	tblptrh,c
   683  00083C                     	endif
   684  00083C                     	if	0	;There are less than 3 active tblptr bytes
   685  00083C                     	endif
   686  00083C  EE20  F005         	lfsr	2,readKeypad@keymap
   687  000840  0E0F               	movlw	15
   688  000842                     u240:
   689  000842  0009               	tblrd		*+
   690  000844  CFF5 FFDE          	movff	tablat,postinc2
   691  000848  06E8               	decf	wreg,f,c
   692  00084A  E2FB               	bc	u240
   693                           
   694                           ;main.c: 148: for (int col = 0; col < 4; col++) {
   695  00084C  0E00               	movlw	0
   696  00084E  6E16               	movwf	readKeypad@col+1,c
   697  000850  0E00               	movlw	0
   698  000852  6E15               	movwf	readKeypad@col,c
   699  000854                     l819:
   700  000854  BE16               	btfsc	readKeypad@col+1,7,c
   701  000856  D008               	goto	l823
   702  000858  5016               	movf	readKeypad@col+1,w,c
   703  00085A  E15C               	bnz	l847
   704  00085C  0E04               	movlw	4
   705  00085E  5C15               	subwf	readKeypad@col,w,c
   706  000860  B0D8               	btfsc	status,0,c
   707  000862  D058               	goto	l847
   708  000864  D001               	goto	l823
   709  000866  D056               	goto	l847
   710  000868                     l823:
   711                           
   712                           ;main.c: 149: LATC = ~(1 << col);
   713  000868  C015  F001         	movff	readKeypad@col,??_readKeypad
   714  00086C  0E01               	movlw	1
   715  00086E  6E02               	movwf	(??_readKeypad+1)& (0+255),c
   716  000870  2A01               	incf	??_readKeypad,f,c
   717  000872  D002               	goto	u264
   718  000874                     u265:
   719  000874  90D8               	bcf	status,0,c
   720  000876  3602               	rlcf	??_readKeypad+1,f,c
   721  000878                     u264:
   722  000878  2E01               	decfsz	??_readKeypad,f,c
   723  00087A  D7FC               	goto	u265
   724  00087C  5002               	movf	??_readKeypad+1,w,c
   725  00087E  0AFF               	xorlw	255
   726  000880  6E8B               	movwf	3979,c	;volatile
   727                           
   728                           ;main.c: 150: _delay((unsigned long)((10)*(20000000/4000.0)));
   729  000882  0E41               	movlw	65
   730  000884  6E01               	movwf	??_readKeypad& (0+255),c
   731  000886  0EEE               	movlw	238
   732  000888                     u477:
   733  000888  2EE8               	decfsz	wreg,f,c
   734  00088A  D7FE               	goto	u477
   735  00088C  2E01               	decfsz	??_readKeypad& (0+255),f,c
   736  00088E  D7FC               	goto	u477
   737  000890  D000               	nop2	
   738                           
   739                           ;main.c: 152: for (int row = 0; row < 4; row++) {
   740  000892  0E00               	movlw	0
   741  000894  6E18               	movwf	readKeypad@row+1,c
   742  000896  0E00               	movlw	0
   743  000898  6E17               	movwf	readKeypad@row,c
   744  00089A                     l829:
   745  00089A  BE18               	btfsc	readKeypad@row+1,7,c
   746  00089C  D008               	goto	l833
   747  00089E  5018               	movf	readKeypad@row+1,w,c
   748  0008A0  E135               	bnz	l843
   749  0008A2  0E04               	movlw	4
   750  0008A4  5C17               	subwf	readKeypad@row,w,c
   751  0008A6  B0D8               	btfsc	status,0,c
   752  0008A8  D031               	goto	l843
   753  0008AA  D001               	goto	l833
   754  0008AC  D02F               	goto	l843
   755  0008AE                     l833:
   756                           
   757                           ;main.c: 153: if (!(PORTC & (1 << (row + 4)))) {
   758  0008AE  C017  F001         	movff	readKeypad@row,??_readKeypad
   759  0008B2  0E04               	movlw	4
   760  0008B4  2601               	addwf	??_readKeypad,f,c
   761  0008B6  0E01               	movlw	1
   762  0008B8  6E02               	movwf	(??_readKeypad+1)& (0+255),c
   763  0008BA  2A01               	incf	??_readKeypad,f,c
   764  0008BC  D002               	goto	u284
   765  0008BE                     u285:
   766  0008BE  90D8               	bcf	status,0,c
   767  0008C0  3602               	rlcf	??_readKeypad+1,f,c
   768  0008C2                     u284:
   769  0008C2  2E01               	decfsz	??_readKeypad,f,c
   770  0008C4  D7FC               	goto	u285
   771  0008C6  5002               	movf	??_readKeypad+1,w,c
   772  0008C8  1482               	andwf	3970,w,c	;volatile
   773  0008CA  0900               	iorlw	0
   774  0008CC  A4D8               	btfss	status,2,c
   775  0008CE  D01A               	goto	l839
   776                           
   777                           ;main.c: 154: return keymap[row][col];
   778  0008D0  C017  F001         	movff	readKeypad@row,??_readKeypad
   779  0008D4  C018  F002         	movff	readKeypad@row+1,??_readKeypad+1
   780  0008D8  90D8               	bcf	status,0,c
   781  0008DA  3601               	rlcf	??_readKeypad,f,c
   782  0008DC  3602               	rlcf	??_readKeypad+1,f,c
   783  0008DE  90D8               	bcf	status,0,c
   784  0008E0  3601               	rlcf	??_readKeypad,f,c
   785  0008E2  3602               	rlcf	??_readKeypad+1,f,c
   786  0008E4  0E05               	movlw	low readKeypad@keymap
   787  0008E6  6E03               	movwf	(??_readKeypad+2)& (0+255),c
   788  0008E8  0E00               	movlw	high readKeypad@keymap
   789  0008EA  6E04               	movwf	(??_readKeypad+3)& (0+255),c
   790  0008EC  5001               	movf	??_readKeypad,w,c
   791  0008EE  2603               	addwf	??_readKeypad+2,f,c
   792  0008F0  5002               	movf	??_readKeypad+1,w,c
   793  0008F2  2204               	addwfc	??_readKeypad+3,f,c
   794  0008F4  5015               	movf	readKeypad@col,w,c
   795  0008F6  2403               	addwf	??_readKeypad+2,w,c
   796  0008F8  6ED9               	movwf	fsr2l,c
   797  0008FA  5016               	movf	readKeypad@col+1,w,c
   798  0008FC  2004               	addwfc	??_readKeypad+3,w,c
   799  0008FE  6EDA               	movwf	fsr2h,c
   800  000900  50DF               	movf	indf2,w,c
   801  000902  D00A               	goto	l95
   802  000904                     l839:
   803  000904  4A17               	infsnz	readKeypad@row,f,c
   804  000906  2A18               	incf	readKeypad@row+1,f,c
   805  000908  D7C8               	goto	l829
   806  00090A  D000               	goto	l843
   807  00090C                     l843:
   808  00090C  4A15               	infsnz	readKeypad@col,f,c
   809  00090E  2A16               	incf	readKeypad@col+1,f,c
   810  000910  D7A1               	goto	l819
   811  000912  D000               	goto	l847
   812  000914                     l847:
   813                           
   814                           ;main.c: 155: }
   815                           ;main.c: 156: }
   816                           ;main.c: 157: }
   817                           ;main.c: 158: return '\0';
   818  000914  0E00               	movlw	0
   819  000916  D000               	goto	l95
   820  000918                     l95:
   821  000918  0012               	return		;funcret
   822  00091A                     __end_of_readKeypad:
   823                           	opt stack 0
   824                           tblptru	equ	0xFF8
   825                           tblptrh	equ	0xFF7
   826                           tblptrl	equ	0xFF6
   827                           tablat	equ	0xFF5
   828                           wreg	equ	0xFE8
   829                           indf2	equ	0xFDF
   830                           postinc2	equ	0xFDE
   831                           fsr2h	equ	0xFDA
   832                           fsr2l	equ	0xFD9
   833                           status	equ	0xFD8
   834                           
   835 ;; *************** function _moveMotor *****************
   836 ;; Defined at:
   837 ;;		line 167 in file "main.c"
   838 ;; Parameters:    Size  Location     Type
   839 ;;  steps           2    6[COMRAM] int 
   840 ;;  direction       2    8[COMRAM] int 
   841 ;; Auto vars:     Size  Location     Type
   842 ;;  i               2   11[COMRAM] int 
   843 ;; Return value:  Size  Location     Type
   844 ;;		None               void
   845 ;; Registers used:
   846 ;;		wreg, status,2, status,0
   847 ;; Tracked objects:
   848 ;;		On entry : 0/0
   849 ;;		On exit  : 0/0
   850 ;;		Unchanged: 0/0
   851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   852 ;;      Params:         4       0       0       0       0       0       0       0       0
   853 ;;      Locals:         2       0       0       0       0       0       0       0       0
   854 ;;      Temps:          1       0       0       0       0       0       0       0       0
   855 ;;      Totals:         7       0       0       0       0       0       0       0       0
   856 ;;Total ram usage:        7 bytes
   857 ;; Hardware stack levels used:    1
   858 ;; This function calls:
   859 ;;		Nothing
   860 ;; This function is called by:
   861 ;;		_main
   862 ;; This function uses a non-reentrant model
   863 ;;
   864                           
   865                           	psect	text4
   866  000C1C                     __ptext4:
   867                           	opt stack 0
   868  000C1C                     _moveMotor:
   869                           	opt stack 30
   870                           
   871                           ;main.c: 168: LATB1 = direction;
   872                           
   873                           ;incstack = 0
   874  000C1C  B009               	btfsc	moveMotor@direction,0,c
   875  000C1E  D002               	bra	u445
   876  000C20  928A               	bcf	3978,1,c	;volatile
   877  000C22  D001               	bra	u446
   878  000C24                     u445:
   879  000C24  828A               	bsf	3978,1,c	;volatile
   880  000C26                     u446:
   881                           
   882                           ;main.c: 169: for (int i = 0; i < steps; i++) {
   883  000C26  0E00               	movlw	0
   884  000C28  6E0D               	movwf	moveMotor@i+1,c
   885  000C2A  0E00               	movlw	0
   886  000C2C  6E0C               	movwf	moveMotor@i,c
   887  000C2E  D014               	goto	l101
   888  000C30                     l102:
   889                           
   890                           ;main.c: 170: LATB0 = 1;
   891  000C30  808A               	bsf	3978,0,c	;volatile
   892                           
   893                           ;main.c: 171: _delay((unsigned long)((1)*(20000000/4000.0)));
   894  000C32  0E07               	movlw	7
   895  000C34  6E0B               	movwf	??_moveMotor& (0+255),c
   896  000C36  0E7D               	movlw	125
   897  000C38                     u487:
   898  000C38  2EE8               	decfsz	wreg,f,c
   899  000C3A  D7FE               	goto	u487
   900  000C3C  2E0B               	decfsz	??_moveMotor& (0+255),f,c
   901  000C3E  D7FC               	goto	u487
   902  000C40  F000               	nop	
   903                           
   904                           ;main.c: 172: LATB0 = 0;
   905  000C42  908A               	bcf	3978,0,c	;volatile
   906                           
   907                           ;main.c: 173: _delay((unsigned long)((1)*(20000000/4000.0)));
   908  000C44  0E07               	movlw	7
   909  000C46  6E0B               	movwf	??_moveMotor& (0+255),c
   910  000C48  0E7D               	movlw	125
   911  000C4A                     u497:
   912  000C4A  2EE8               	decfsz	wreg,f,c
   913  000C4C  D7FE               	goto	u497
   914  000C4E  2E0B               	decfsz	??_moveMotor& (0+255),f,c
   915  000C50  D7FC               	goto	u497
   916  000C52  F000               	nop	
   917  000C54  4A0C               	infsnz	moveMotor@i,f,c
   918  000C56  2A0D               	incf	moveMotor@i+1,f,c
   919  000C58                     l101:
   920  000C58  5007               	movf	moveMotor@steps,w,c
   921  000C5A  5C0C               	subwf	moveMotor@i,w,c
   922  000C5C  500D               	movf	moveMotor@i+1,w,c
   923  000C5E  0A80               	xorlw	128
   924  000C60  6E0B               	movwf	??_moveMotor& (0+255),c
   925  000C62  5008               	movf	moveMotor@steps+1,w,c
   926  000C64  0A80               	xorlw	128
   927  000C66  580B               	subwfb	??_moveMotor& (0+255),w,c
   928  000C68  A0D8               	btfss	status,0,c
   929  000C6A  D7E2               	goto	l102
   930  000C6C  0012               	return		;funcret
   931  000C6E                     __end_of_moveMotor:
   932                           	opt stack 0
   933                           tblptru	equ	0xFF8
   934                           tblptrh	equ	0xFF7
   935                           tblptrl	equ	0xFF6
   936                           tablat	equ	0xFF5
   937                           wreg	equ	0xFE8
   938                           indf2	equ	0xFDF
   939                           postinc2	equ	0xFDE
   940                           fsr2h	equ	0xFDA
   941                           fsr2l	equ	0xFD9
   942                           status	equ	0xFD8
   943                           
   944 ;; *************** function _lcdPrint *****************
   945 ;; Defined at:
   946 ;;		line 128 in file "main.c"
   947 ;; Parameters:    Size  Location     Type
   948 ;;  str             2    3[COMRAM] PTR const unsigned char 
   949 ;;		 -> STR_2(8), STR_1(15), 
   950 ;; Auto vars:     Size  Location     Type
   951 ;;		None
   952 ;; Return value:  Size  Location     Type
   953 ;;		None               void
   954 ;; Registers used:
   955 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   956 ;; Tracked objects:
   957 ;;		On entry : 0/0
   958 ;;		On exit  : 0/0
   959 ;;		Unchanged: 0/0
   960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   961 ;;      Params:         2       0       0       0       0       0       0       0       0
   962 ;;      Locals:         0       0       0       0       0       0       0       0       0
   963 ;;      Temps:          0       0       0       0       0       0       0       0       0
   964 ;;      Totals:         2       0       0       0       0       0       0       0       0
   965 ;;Total ram usage:        2 bytes
   966 ;; Hardware stack levels used:    1
   967 ;; Hardware stack levels required when called:    1
   968 ;; This function calls:
   969 ;;		_lcdData
   970 ;; This function is called by:
   971 ;;		_main
   972 ;; This function uses a non-reentrant model
   973 ;;
   974                           
   975                           	psect	text5
   976  000CA0                     __ptext5:
   977                           	opt stack 0
   978  000CA0                     _lcdPrint:
   979                           	opt stack 29
   980                           
   981                           ;main.c: 129: while (*str) {
   982                           
   983                           ;incstack = 0
   984  000CA0  D00B               	goto	l937
   985  000CA2                     l933:
   986                           
   987                           ;main.c: 130: lcdData(*str++);
   988  000CA2  C004  FFF6         	movff	lcdPrint@str,tblptrl
   989  000CA6  C005  FFF7         	movff	lcdPrint@str+1,tblptrh
   990  000CAA                     	if	0	;tblptru may be non-zero
   991  000CAA                     	endif
   992  000CAA                     	if	0	;tblptru may be non-zero
   993  000CAA                     	endif
   994  000CAA  0008               	tblrd		*
   995  000CAC  50F5               	movf	tablat,w,c
   996  000CAE  EC8D  F004         	call	_lcdData
   997  000CB2  4A04               	infsnz	lcdPrint@str,f,c
   998  000CB4  2A05               	incf	lcdPrint@str+1,f,c
   999  000CB6  D000               	goto	l937
  1000  000CB8                     l937:
  1001  000CB8  C004  FFF6         	movff	lcdPrint@str,tblptrl
  1002  000CBC  C005  FFF7         	movff	lcdPrint@str+1,tblptrh
  1003  000CC0                     	if	0	;tblptru may be non-zero
  1004  000CC0                     	endif
  1005  000CC0                     	if	0	;tblptru may be non-zero
  1006  000CC0                     	endif
  1007  000CC0  0008               	tblrd		*
  1008  000CC2  50F5               	movf	tablat,w,c
  1009  000CC4  0900               	iorlw	0
  1010  000CC6  A4D8               	btfss	status,2,c
  1011  000CC8  D7EC               	goto	l933
  1012  000CCA  0012               	return		;funcret
  1013  000CCC                     __end_of_lcdPrint:
  1014                           	opt stack 0
  1015                           tblptru	equ	0xFF8
  1016                           tblptrh	equ	0xFF7
  1017                           tblptrl	equ	0xFF6
  1018                           tablat	equ	0xFF5
  1019                           wreg	equ	0xFE8
  1020                           indf2	equ	0xFDF
  1021                           postinc2	equ	0xFDE
  1022                           fsr2h	equ	0xFDA
  1023                           fsr2l	equ	0xFD9
  1024                           status	equ	0xFD8
  1025                           
  1026 ;; *************** function _lcdData *****************
  1027 ;; Defined at:
  1028 ;;		line 108 in file "main.c"
  1029 ;; Parameters:    Size  Location     Type
  1030 ;;  data            1    wreg     unsigned char 
  1031 ;; Auto vars:     Size  Location     Type
  1032 ;;  data            1    2[COMRAM] unsigned char 
  1033 ;; Return value:  Size  Location     Type
  1034 ;;		None               void
  1035 ;; Registers used:
  1036 ;;		wreg, status,2, status,0
  1037 ;; Tracked objects:
  1038 ;;		On entry : 0/0
  1039 ;;		On exit  : 0/0
  1040 ;;		Unchanged: 0/0
  1041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1042 ;;      Params:         0       0       0       0       0       0       0       0       0
  1043 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1044 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1045 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1046 ;;Total ram usage:        3 bytes
  1047 ;; Hardware stack levels used:    1
  1048 ;; This function calls:
  1049 ;;		Nothing
  1050 ;; This function is called by:
  1051 ;;		_main
  1052 ;;		_lcdPrint
  1053 ;; This function uses a non-reentrant model
  1054 ;;
  1055                           
  1056                           	psect	text6
  1057  00091A                     __ptext6:
  1058                           	opt stack 0
  1059  00091A                     _lcdData:
  1060                           	opt stack 29
  1061                           
  1062                           ;incstack = 0
  1063                           ;lcdData@data stored from wreg
  1064  00091A  6E03               	movwf	lcdData@data,c
  1065                           
  1066                           ;main.c: 109: LATD0 = 1;
  1067  00091C  808C               	bsf	3980,0,c	;volatile
  1068                           
  1069                           ;main.c: 110: LATD2 = (data >> 4) & 1;
  1070  00091E  C003  F001         	movff	lcdData@data,??_lcdData
  1071  000922  3A01               	swapf	??_lcdData,f,c
  1072  000924  0E0F               	movlw	15
  1073  000926  1601               	andwf	??_lcdData,f,c
  1074  000928  3001               	rrcf	??_lcdData,w,c
  1075  00092A  B0D8               	btfsc	status,0,c
  1076  00092C  D002               	bra	u125
  1077  00092E  948C               	bcf	3980,2,c	;volatile
  1078  000930  D001               	bra	u126
  1079  000932                     u125:
  1080  000932  848C               	bsf	3980,2,c	;volatile
  1081  000934                     u126:
  1082                           
  1083                           ;main.c: 111: LATD3 = (data >> 5) & 1;
  1084  000934  C003  F001         	movff	lcdData@data,??_lcdData
  1085  000938  0E05               	movlw	5
  1086  00093A  6E02               	movwf	(??_lcdData+1)& (0+255),c
  1087  00093C                     u135:
  1088  00093C  90D8               	bcf	status,0,c
  1089  00093E  3201               	rrcf	??_lcdData,f,c
  1090  000940  2E02               	decfsz	(??_lcdData+1)& (0+255),f,c
  1091  000942  D7FC               	goto	u135
  1092  000944  3001               	rrcf	??_lcdData,w,c
  1093  000946  B0D8               	btfsc	status,0,c
  1094  000948  D002               	bra	u145
  1095  00094A  968C               	bcf	3980,3,c	;volatile
  1096  00094C  D001               	bra	u146
  1097  00094E                     u145:
  1098  00094E  868C               	bsf	3980,3,c	;volatile
  1099  000950                     u146:
  1100                           
  1101                           ;main.c: 112: LATD4 = (data >> 6) & 1;
  1102  000950  C003  F001         	movff	lcdData@data,??_lcdData
  1103  000954  0E06               	movlw	6
  1104  000956  6E02               	movwf	(??_lcdData+1)& (0+255),c
  1105  000958                     u155:
  1106  000958  90D8               	bcf	status,0,c
  1107  00095A  3201               	rrcf	??_lcdData,f,c
  1108  00095C  2E02               	decfsz	(??_lcdData+1)& (0+255),f,c
  1109  00095E  D7FC               	goto	u155
  1110  000960  3001               	rrcf	??_lcdData,w,c
  1111  000962  B0D8               	btfsc	status,0,c
  1112  000964  D002               	bra	u165
  1113  000966  988C               	bcf	3980,4,c	;volatile
  1114  000968  D001               	bra	u166
  1115  00096A                     u165:
  1116  00096A  888C               	bsf	3980,4,c	;volatile
  1117  00096C                     u166:
  1118                           
  1119                           ;main.c: 113: LATD5 = (data >> 7) & 1;
  1120  00096C  6A01               	clrf	??_lcdData& (0+255),c
  1121  00096E  AE03               	btfss	lcdData@data,7,c
  1122  000970  D001               	bra	u175
  1123  000972  2A01               	incf	??_lcdData& (0+255),f,c
  1124  000974                     u175:
  1125  000974  3001               	rrcf	??_lcdData,w,c
  1126  000976  B0D8               	btfsc	status,0,c
  1127  000978  D002               	bra	u185
  1128  00097A  9A8C               	bcf	3980,5,c	;volatile
  1129  00097C  D001               	bra	u186
  1130  00097E                     u185:
  1131  00097E  8A8C               	bsf	3980,5,c	;volatile
  1132  000980                     u186:
  1133                           
  1134                           ;main.c: 114: LATD1 = 1;
  1135  000980  828C               	bsf	3980,1,c	;volatile
  1136                           
  1137                           ;main.c: 115: _delay((unsigned long)((1)*(20000000/4000000.0)));
  1138  000982  F000               	nop	
  1139  000984  D000               	nop2		;2 cycle nop
  1140  000986  D000               	nop2		;2 cycle nop
  1141                           
  1142                           ;main.c: 116: LATD1 = 0;
  1143  000988  928C               	bcf	3980,1,c	;volatile
  1144                           
  1145                           ;main.c: 117: _delay((unsigned long)((200)*(20000000/4000000.0)));
  1146  00098A  0EFA               	movlw	250
  1147  00098C                     u507:
  1148  00098C  F000               	nop	
  1149  00098E  2EE8               	decfsz	wreg,f,c
  1150  000990  D7FD               	goto	u507
  1151                           
  1152                           ;main.c: 118: LATD2 = data & 1;
  1153  000992  B003               	btfsc	lcdData@data,0,c
  1154  000994  D002               	bra	u195
  1155  000996  948C               	bcf	3980,2,c	;volatile
  1156  000998  D001               	bra	u196
  1157  00099A                     u195:
  1158  00099A  848C               	bsf	3980,2,c	;volatile
  1159  00099C                     u196:
  1160                           
  1161                           ;main.c: 119: LATD3 = (data >> 1) & 1;
  1162  00099C  C003  F001         	movff	lcdData@data,??_lcdData
  1163  0009A0  90D8               	bcf	status,0,c
  1164  0009A2  3201               	rrcf	??_lcdData,f,c
  1165  0009A4  3001               	rrcf	??_lcdData,w,c
  1166  0009A6  B0D8               	btfsc	status,0,c
  1167  0009A8  D002               	bra	u205
  1168  0009AA  968C               	bcf	3980,3,c	;volatile
  1169  0009AC  D001               	bra	u206
  1170  0009AE                     u205:
  1171  0009AE  868C               	bsf	3980,3,c	;volatile
  1172  0009B0                     u206:
  1173                           
  1174                           ;main.c: 120: LATD4 = (data >> 2) & 1;
  1175  0009B0  C003  F001         	movff	lcdData@data,??_lcdData
  1176  0009B4  90D8               	bcf	status,0,c
  1177  0009B6  3201               	rrcf	??_lcdData,f,c
  1178  0009B8  90D8               	bcf	status,0,c
  1179  0009BA  3201               	rrcf	??_lcdData,f,c
  1180  0009BC  3001               	rrcf	??_lcdData,w,c
  1181  0009BE  B0D8               	btfsc	status,0,c
  1182  0009C0  D002               	bra	u215
  1183  0009C2  988C               	bcf	3980,4,c	;volatile
  1184  0009C4  D001               	bra	u216
  1185  0009C6                     u215:
  1186  0009C6  888C               	bsf	3980,4,c	;volatile
  1187  0009C8                     u216:
  1188                           
  1189                           ;main.c: 121: LATD5 = (data >> 3) & 1;
  1190  0009C8  C003  F001         	movff	lcdData@data,??_lcdData
  1191  0009CC  90D8               	bcf	status,0,c
  1192  0009CE  3201               	rrcf	??_lcdData,f,c
  1193  0009D0  90D8               	bcf	status,0,c
  1194  0009D2  3201               	rrcf	??_lcdData,f,c
  1195  0009D4  90D8               	bcf	status,0,c
  1196  0009D6  3201               	rrcf	??_lcdData,f,c
  1197  0009D8  3001               	rrcf	??_lcdData,w,c
  1198  0009DA  B0D8               	btfsc	status,0,c
  1199  0009DC  D002               	bra	u225
  1200  0009DE  9A8C               	bcf	3980,5,c	;volatile
  1201  0009E0  D001               	bra	u226
  1202  0009E2                     u225:
  1203  0009E2  8A8C               	bsf	3980,5,c	;volatile
  1204  0009E4                     u226:
  1205                           
  1206                           ;main.c: 122: LATD1 = 1;
  1207  0009E4  828C               	bsf	3980,1,c	;volatile
  1208                           
  1209                           ;main.c: 123: _delay((unsigned long)((1)*(20000000/4000000.0)));
  1210  0009E6  F000               	nop	
  1211  0009E8  D000               	nop2		;2 cycle nop
  1212  0009EA  D000               	nop2		;2 cycle nop
  1213                           
  1214                           ;main.c: 124: LATD1 = 0;
  1215  0009EC  928C               	bcf	3980,1,c	;volatile
  1216                           
  1217                           ;main.c: 125: _delay((unsigned long)((2)*(20000000/4000.0)));
  1218  0009EE  0E0D               	movlw	13
  1219  0009F0  6E01               	movwf	??_lcdData& (0+255),c
  1220  0009F2  0EFC               	movlw	252
  1221  0009F4                     u517:
  1222  0009F4  2EE8               	decfsz	wreg,f,c
  1223  0009F6  D7FE               	goto	u517
  1224  0009F8  2E01               	decfsz	??_lcdData& (0+255),f,c
  1225  0009FA  D7FC               	goto	u517
  1226  0009FC  0012               	return		;funcret
  1227  0009FE                     __end_of_lcdData:
  1228                           	opt stack 0
  1229                           tblptru	equ	0xFF8
  1230                           tblptrh	equ	0xFF7
  1231                           tblptrl	equ	0xFF6
  1232                           tablat	equ	0xFF5
  1233                           wreg	equ	0xFE8
  1234                           indf2	equ	0xFDF
  1235                           postinc2	equ	0xFDE
  1236                           fsr2h	equ	0xFDA
  1237                           fsr2l	equ	0xFD9
  1238                           status	equ	0xFD8
  1239                           
  1240 ;; *************** function _initUART *****************
  1241 ;; Defined at:
  1242 ;;		line 178 in file "main.c"
  1243 ;; Parameters:    Size  Location     Type
  1244 ;;		None
  1245 ;; Auto vars:     Size  Location     Type
  1246 ;;		None
  1247 ;; Return value:  Size  Location     Type
  1248 ;;		None               void
  1249 ;; Registers used:
  1250 ;;		wreg, status,2
  1251 ;; Tracked objects:
  1252 ;;		On entry : 0/0
  1253 ;;		On exit  : 0/0
  1254 ;;		Unchanged: 0/0
  1255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1256 ;;      Params:         0       0       0       0       0       0       0       0       0
  1257 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1258 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1259 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1260 ;;Total ram usage:        0 bytes
  1261 ;; Hardware stack levels used:    1
  1262 ;; This function calls:
  1263 ;;		Nothing
  1264 ;; This function is called by:
  1265 ;;		_main
  1266 ;; This function uses a non-reentrant model
  1267 ;;
  1268                           
  1269                           	psect	text7
  1270  000D1E                     __ptext7:
  1271                           	opt stack 0
  1272  000D1E                     _initUART:
  1273                           	opt stack 30
  1274                           
  1275                           ;main.c: 179: TRISCbits.TRISC6 = 1;
  1276                           
  1277                           ;incstack = 0
  1278  000D1E  8C94               	bsf	3988,6,c	;volatile
  1279                           
  1280                           ;main.c: 180: TRISCbits.TRISC7 = 1;
  1281  000D20  8E94               	bsf	3988,7,c	;volatile
  1282                           
  1283                           ;main.c: 181: SPBRG = 129;
  1284  000D22  0E81               	movlw	129
  1285  000D24  6EAF               	movwf	4015,c	;volatile
  1286                           
  1287                           ;main.c: 182: TXSTAbits.BRGH = 1;
  1288  000D26  84AC               	bsf	4012,2,c	;volatile
  1289                           
  1290                           ;main.c: 183: TXSTAbits.SYNC = 0;
  1291  000D28  98AC               	bcf	4012,4,c	;volatile
  1292                           
  1293                           ;main.c: 184: RCSTAbits.SPEN = 1;
  1294  000D2A  8EAB               	bsf	4011,7,c	;volatile
  1295                           
  1296                           ;main.c: 185: TXSTAbits.TXEN = 1;
  1297  000D2C  8AAC               	bsf	4012,5,c	;volatile
  1298                           
  1299                           ;main.c: 186: RCSTAbits.CREN = 1;
  1300  000D2E  88AB               	bsf	4011,4,c	;volatile
  1301  000D30  0012               	return		;funcret
  1302  000D32                     __end_of_initUART:
  1303                           	opt stack 0
  1304                           tblptru	equ	0xFF8
  1305                           tblptrh	equ	0xFF7
  1306                           tblptrl	equ	0xFF6
  1307                           tablat	equ	0xFF5
  1308                           wreg	equ	0xFE8
  1309                           indf2	equ	0xFDF
  1310                           postinc2	equ	0xFDE
  1311                           fsr2h	equ	0xFDA
  1312                           fsr2l	equ	0xFD9
  1313                           status	equ	0xFD8
  1314                           
  1315 ;; *************** function _initMotor *****************
  1316 ;; Defined at:
  1317 ;;		line 162 in file "main.c"
  1318 ;; Parameters:    Size  Location     Type
  1319 ;;		None
  1320 ;; Auto vars:     Size  Location     Type
  1321 ;;		None
  1322 ;; Return value:  Size  Location     Type
  1323 ;;		None               void
  1324 ;; Registers used:
  1325 ;;		None
  1326 ;; Tracked objects:
  1327 ;;		On entry : 0/0
  1328 ;;		On exit  : 0/0
  1329 ;;		Unchanged: 0/0
  1330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1331 ;;      Params:         0       0       0       0       0       0       0       0       0
  1332 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1333 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1334 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1335 ;;Total ram usage:        0 bytes
  1336 ;; Hardware stack levels used:    1
  1337 ;; This function calls:
  1338 ;;		Nothing
  1339 ;; This function is called by:
  1340 ;;		_main
  1341 ;; This function uses a non-reentrant model
  1342 ;;
  1343                           
  1344                           	psect	text8
  1345  000D46                     __ptext8:
  1346                           	opt stack 0
  1347  000D46                     _initMotor:
  1348                           	opt stack 30
  1349                           
  1350                           ;main.c: 163: TRISBbits.TRISB0 = 0;
  1351                           
  1352                           ;incstack = 0
  1353  000D46  9093               	bcf	3987,0,c	;volatile
  1354                           
  1355                           ;main.c: 164: TRISBbits.TRISB1 = 0;
  1356  000D48  9293               	bcf	3987,1,c	;volatile
  1357  000D4A  0012               	return		;funcret
  1358  000D4C                     __end_of_initMotor:
  1359                           	opt stack 0
  1360                           tblptru	equ	0xFF8
  1361                           tblptrh	equ	0xFF7
  1362                           tblptrl	equ	0xFF6
  1363                           tablat	equ	0xFF5
  1364                           wreg	equ	0xFE8
  1365                           indf2	equ	0xFDF
  1366                           postinc2	equ	0xFDE
  1367                           fsr2h	equ	0xFDA
  1368                           fsr2l	equ	0xFD9
  1369                           status	equ	0xFD8
  1370                           
  1371 ;; *************** function _initLCD *****************
  1372 ;; Defined at:
  1373 ;;		line 77 in file "main.c"
  1374 ;; Parameters:    Size  Location     Type
  1375 ;;		None
  1376 ;; Auto vars:     Size  Location     Type
  1377 ;;		None
  1378 ;; Return value:  Size  Location     Type
  1379 ;;		None               void
  1380 ;; Registers used:
  1381 ;;		wreg, status,2, status,0, cstack
  1382 ;; Tracked objects:
  1383 ;;		On entry : 0/0
  1384 ;;		On exit  : 0/0
  1385 ;;		Unchanged: 0/0
  1386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1387 ;;      Params:         0       0       0       0       0       0       0       0       0
  1388 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1389 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1390 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1391 ;;Total ram usage:        1 bytes
  1392 ;; Hardware stack levels used:    1
  1393 ;; Hardware stack levels required when called:    1
  1394 ;; This function calls:
  1395 ;;		_lcdCommand
  1396 ;; This function is called by:
  1397 ;;		_main
  1398 ;; This function uses a non-reentrant model
  1399 ;;
  1400                           
  1401                           	psect	text9
  1402  000C6E                     __ptext9:
  1403                           	opt stack 0
  1404  000C6E                     _initLCD:
  1405                           	opt stack 29
  1406                           
  1407                           ;main.c: 79: TRISD = 0x00;
  1408                           
  1409                           ;incstack = 0
  1410  000C6E  0E00               	movlw	0
  1411  000C70  6E95               	movwf	3989,c	;volatile
  1412                           
  1413                           ;main.c: 80: _delay((unsigned long)((20)*(20000000/4000.0)));
  1414  000C72  0E82               	movlw	130
  1415  000C74  6E04               	movwf	??_initLCD& (0+255),c
  1416  000C76  0EDE               	movlw	222
  1417  000C78                     u527:
  1418  000C78  2EE8               	decfsz	wreg,f,c
  1419  000C7A  D7FE               	goto	u527
  1420  000C7C  2E04               	decfsz	??_initLCD& (0+255),f,c
  1421  000C7E  D7FC               	goto	u527
  1422                           
  1423                           ;main.c: 81: lcdCommand(0x02);
  1424  000C80  0E02               	movlw	2
  1425  000C82  ECFF  F004         	call	_lcdCommand
  1426                           
  1427                           ;main.c: 82: lcdCommand(0x28);
  1428  000C86  0E28               	movlw	40
  1429  000C88  ECFF  F004         	call	_lcdCommand
  1430                           
  1431                           ;main.c: 83: lcdCommand(0x0C);
  1432  000C8C  0E0C               	movlw	12
  1433  000C8E  ECFF  F004         	call	_lcdCommand
  1434                           
  1435                           ;main.c: 84: lcdCommand(0x06);
  1436  000C92  0E06               	movlw	6
  1437  000C94  ECFF  F004         	call	_lcdCommand
  1438                           
  1439                           ;main.c: 85: lcdCommand(0x01);
  1440  000C98  0E01               	movlw	1
  1441  000C9A  ECFF  F004         	call	_lcdCommand
  1442  000C9E  0012               	return		;funcret
  1443  000CA0                     __end_of_initLCD:
  1444                           	opt stack 0
  1445                           tblptru	equ	0xFF8
  1446                           tblptrh	equ	0xFF7
  1447                           tblptrl	equ	0xFF6
  1448                           tablat	equ	0xFF5
  1449                           wreg	equ	0xFE8
  1450                           indf2	equ	0xFDF
  1451                           postinc2	equ	0xFDE
  1452                           fsr2h	equ	0xFDA
  1453                           fsr2l	equ	0xFD9
  1454                           status	equ	0xFD8
  1455                           
  1456 ;; *************** function _lcdCommand *****************
  1457 ;; Defined at:
  1458 ;;		line 88 in file "main.c"
  1459 ;; Parameters:    Size  Location     Type
  1460 ;;  cmd             1    wreg     unsigned char 
  1461 ;; Auto vars:     Size  Location     Type
  1462 ;;  cmd             1    2[COMRAM] unsigned char 
  1463 ;; Return value:  Size  Location     Type
  1464 ;;		None               void
  1465 ;; Registers used:
  1466 ;;		wreg, status,2, status,0
  1467 ;; Tracked objects:
  1468 ;;		On entry : 0/0
  1469 ;;		On exit  : 0/0
  1470 ;;		Unchanged: 0/0
  1471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1472 ;;      Params:         0       0       0       0       0       0       0       0       0
  1473 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1474 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1475 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1476 ;;Total ram usage:        3 bytes
  1477 ;; Hardware stack levels used:    1
  1478 ;; This function calls:
  1479 ;;		Nothing
  1480 ;; This function is called by:
  1481 ;;		_main
  1482 ;;		_initLCD
  1483 ;; This function uses a non-reentrant model
  1484 ;;
  1485                           
  1486                           	psect	text10
  1487  0009FE                     __ptext10:
  1488                           	opt stack 0
  1489  0009FE                     _lcdCommand:
  1490                           	opt stack 30
  1491                           
  1492                           ;incstack = 0
  1493                           ;lcdCommand@cmd stored from wreg
  1494  0009FE  6E03               	movwf	lcdCommand@cmd,c
  1495                           
  1496                           ;main.c: 89: LATD0 = 0;
  1497  000A00  908C               	bcf	3980,0,c	;volatile
  1498                           
  1499                           ;main.c: 90: LATD2 = (cmd >> 4) & 1;
  1500  000A02  C003  F001         	movff	lcdCommand@cmd,??_lcdCommand
  1501  000A06  3A01               	swapf	??_lcdCommand,f,c
  1502  000A08  0E0F               	movlw	15
  1503  000A0A  1601               	andwf	??_lcdCommand,f,c
  1504  000A0C  3001               	rrcf	??_lcdCommand,w,c
  1505  000A0E  B0D8               	btfsc	status,0,c
  1506  000A10  D002               	bra	u15
  1507  000A12  948C               	bcf	3980,2,c	;volatile
  1508  000A14  D001               	bra	u16
  1509  000A16                     u15:
  1510  000A16  848C               	bsf	3980,2,c	;volatile
  1511  000A18                     u16:
  1512                           
  1513                           ;main.c: 91: LATD3 = (cmd >> 5) & 1;
  1514  000A18  C003  F001         	movff	lcdCommand@cmd,??_lcdCommand
  1515  000A1C  0E05               	movlw	5
  1516  000A1E  6E02               	movwf	(??_lcdCommand+1)& (0+255),c
  1517  000A20                     u25:
  1518  000A20  90D8               	bcf	status,0,c
  1519  000A22  3201               	rrcf	??_lcdCommand,f,c
  1520  000A24  2E02               	decfsz	(??_lcdCommand+1)& (0+255),f,c
  1521  000A26  D7FC               	goto	u25
  1522  000A28  3001               	rrcf	??_lcdCommand,w,c
  1523  000A2A  B0D8               	btfsc	status,0,c
  1524  000A2C  D002               	bra	u35
  1525  000A2E  968C               	bcf	3980,3,c	;volatile
  1526  000A30  D001               	bra	u36
  1527  000A32                     u35:
  1528  000A32  868C               	bsf	3980,3,c	;volatile
  1529  000A34                     u36:
  1530                           
  1531                           ;main.c: 92: LATD4 = (cmd >> 6) & 1;
  1532  000A34  C003  F001         	movff	lcdCommand@cmd,??_lcdCommand
  1533  000A38  0E06               	movlw	6
  1534  000A3A  6E02               	movwf	(??_lcdCommand+1)& (0+255),c
  1535  000A3C                     u45:
  1536  000A3C  90D8               	bcf	status,0,c
  1537  000A3E  3201               	rrcf	??_lcdCommand,f,c
  1538  000A40  2E02               	decfsz	(??_lcdCommand+1)& (0+255),f,c
  1539  000A42  D7FC               	goto	u45
  1540  000A44  3001               	rrcf	??_lcdCommand,w,c
  1541  000A46  B0D8               	btfsc	status,0,c
  1542  000A48  D002               	bra	u55
  1543  000A4A  988C               	bcf	3980,4,c	;volatile
  1544  000A4C  D001               	bra	u56
  1545  000A4E                     u55:
  1546  000A4E  888C               	bsf	3980,4,c	;volatile
  1547  000A50                     u56:
  1548                           
  1549                           ;main.c: 93: LATD5 = (cmd >> 7) & 1;
  1550  000A50  6A01               	clrf	??_lcdCommand& (0+255),c
  1551  000A52  AE03               	btfss	lcdCommand@cmd,7,c
  1552  000A54  D001               	bra	u65
  1553  000A56  2A01               	incf	??_lcdCommand& (0+255),f,c
  1554  000A58                     u65:
  1555  000A58  3001               	rrcf	??_lcdCommand,w,c
  1556  000A5A  B0D8               	btfsc	status,0,c
  1557  000A5C  D002               	bra	u75
  1558  000A5E  9A8C               	bcf	3980,5,c	;volatile
  1559  000A60  D001               	bra	u76
  1560  000A62                     u75:
  1561  000A62  8A8C               	bsf	3980,5,c	;volatile
  1562  000A64                     u76:
  1563                           
  1564                           ;main.c: 94: LATD1 = 1;
  1565  000A64  828C               	bsf	3980,1,c	;volatile
  1566                           
  1567                           ;main.c: 95: _delay((unsigned long)((1)*(20000000/4000000.0)));
  1568  000A66  F000               	nop	
  1569  000A68  D000               	nop2		;2 cycle nop
  1570  000A6A  D000               	nop2		;2 cycle nop
  1571                           
  1572                           ;main.c: 96: LATD1 = 0;
  1573  000A6C  928C               	bcf	3980,1,c	;volatile
  1574                           
  1575                           ;main.c: 97: _delay((unsigned long)((200)*(20000000/4000000.0)));
  1576  000A6E  0EFA               	movlw	250
  1577  000A70                     u537:
  1578  000A70  F000               	nop	
  1579  000A72  2EE8               	decfsz	wreg,f,c
  1580  000A74  D7FD               	goto	u537
  1581                           
  1582                           ;main.c: 98: LATD2 = cmd & 1;
  1583  000A76  B003               	btfsc	lcdCommand@cmd,0,c
  1584  000A78  D002               	bra	u85
  1585  000A7A  948C               	bcf	3980,2,c	;volatile
  1586  000A7C  D001               	bra	u86
  1587  000A7E                     u85:
  1588  000A7E  848C               	bsf	3980,2,c	;volatile
  1589  000A80                     u86:
  1590                           
  1591                           ;main.c: 99: LATD3 = (cmd >> 1) & 1;
  1592  000A80  C003  F001         	movff	lcdCommand@cmd,??_lcdCommand
  1593  000A84  90D8               	bcf	status,0,c
  1594  000A86  3201               	rrcf	??_lcdCommand,f,c
  1595  000A88  3001               	rrcf	??_lcdCommand,w,c
  1596  000A8A  B0D8               	btfsc	status,0,c
  1597  000A8C  D002               	bra	u95
  1598  000A8E  968C               	bcf	3980,3,c	;volatile
  1599  000A90  D001               	bra	u96
  1600  000A92                     u95:
  1601  000A92  868C               	bsf	3980,3,c	;volatile
  1602  000A94                     u96:
  1603                           
  1604                           ;main.c: 100: LATD4 = (cmd >> 2) & 1;
  1605  000A94  C003  F001         	movff	lcdCommand@cmd,??_lcdCommand
  1606  000A98  90D8               	bcf	status,0,c
  1607  000A9A  3201               	rrcf	??_lcdCommand,f,c
  1608  000A9C  90D8               	bcf	status,0,c
  1609  000A9E  3201               	rrcf	??_lcdCommand,f,c
  1610  000AA0  3001               	rrcf	??_lcdCommand,w,c
  1611  000AA2  B0D8               	btfsc	status,0,c
  1612  000AA4  D002               	bra	u105
  1613  000AA6  988C               	bcf	3980,4,c	;volatile
  1614  000AA8  D001               	bra	u106
  1615  000AAA                     u105:
  1616  000AAA  888C               	bsf	3980,4,c	;volatile
  1617  000AAC                     u106:
  1618                           
  1619                           ;main.c: 101: LATD5 = (cmd >> 3) & 1;
  1620  000AAC  C003  F001         	movff	lcdCommand@cmd,??_lcdCommand
  1621  000AB0  90D8               	bcf	status,0,c
  1622  000AB2  3201               	rrcf	??_lcdCommand,f,c
  1623  000AB4  90D8               	bcf	status,0,c
  1624  000AB6  3201               	rrcf	??_lcdCommand,f,c
  1625  000AB8  90D8               	bcf	status,0,c
  1626  000ABA  3201               	rrcf	??_lcdCommand,f,c
  1627  000ABC  3001               	rrcf	??_lcdCommand,w,c
  1628  000ABE  B0D8               	btfsc	status,0,c
  1629  000AC0  D002               	bra	u115
  1630  000AC2  9A8C               	bcf	3980,5,c	;volatile
  1631  000AC4  D001               	bra	u116
  1632  000AC6                     u115:
  1633  000AC6  8A8C               	bsf	3980,5,c	;volatile
  1634  000AC8                     u116:
  1635                           
  1636                           ;main.c: 102: LATD1 = 1;
  1637  000AC8  828C               	bsf	3980,1,c	;volatile
  1638                           
  1639                           ;main.c: 103: _delay((unsigned long)((1)*(20000000/4000000.0)));
  1640  000ACA  F000               	nop	
  1641  000ACC  D000               	nop2		;2 cycle nop
  1642  000ACE  D000               	nop2		;2 cycle nop
  1643                           
  1644                           ;main.c: 104: LATD1 = 0;
  1645  000AD0  928C               	bcf	3980,1,c	;volatile
  1646                           
  1647                           ;main.c: 105: _delay((unsigned long)((2)*(20000000/4000.0)));
  1648  000AD2  0E0D               	movlw	13
  1649  000AD4  6E01               	movwf	??_lcdCommand& (0+255),c
  1650  000AD6  0EFC               	movlw	252
  1651  000AD8                     u547:
  1652  000AD8  2EE8               	decfsz	wreg,f,c
  1653  000ADA  D7FE               	goto	u547
  1654  000ADC  2E01               	decfsz	??_lcdCommand& (0+255),f,c
  1655  000ADE  D7FC               	goto	u547
  1656  000AE0  0012               	return		;funcret
  1657  000AE2                     __end_of_lcdCommand:
  1658                           	opt stack 0
  1659                           tblptru	equ	0xFF8
  1660                           tblptrh	equ	0xFF7
  1661                           tblptrl	equ	0xFF6
  1662                           tablat	equ	0xFF5
  1663                           wreg	equ	0xFE8
  1664                           indf2	equ	0xFDF
  1665                           postinc2	equ	0xFDE
  1666                           fsr2h	equ	0xFDA
  1667                           fsr2l	equ	0xFD9
  1668                           status	equ	0xFD8
  1669                           
  1670 ;; *************** function _initKeypad *****************
  1671 ;; Defined at:
  1672 ;;		line 135 in file "main.c"
  1673 ;; Parameters:    Size  Location     Type
  1674 ;;		None
  1675 ;; Auto vars:     Size  Location     Type
  1676 ;;		None
  1677 ;; Return value:  Size  Location     Type
  1678 ;;		None               void
  1679 ;; Registers used:
  1680 ;;		wreg, status,2
  1681 ;; Tracked objects:
  1682 ;;		On entry : 0/0
  1683 ;;		On exit  : 0/0
  1684 ;;		Unchanged: 0/0
  1685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1686 ;;      Params:         0       0       0       0       0       0       0       0       0
  1687 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1688 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1689 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1690 ;;Total ram usage:        0 bytes
  1691 ;; Hardware stack levels used:    1
  1692 ;; This function calls:
  1693 ;;		Nothing
  1694 ;; This function is called by:
  1695 ;;		_main
  1696 ;; This function uses a non-reentrant model
  1697 ;;
  1698                           
  1699                           	psect	text11
  1700  000D3C                     __ptext11:
  1701                           	opt stack 0
  1702  000D3C                     _initKeypad:
  1703                           	opt stack 30
  1704                           
  1705                           ;main.c: 136: TRISC = 0xF0;
  1706                           
  1707                           ;incstack = 0
  1708  000D3C  0EF0               	movlw	240
  1709  000D3E  6E94               	movwf	3988,c	;volatile
  1710                           
  1711                           ;main.c: 137: PORTC = 0x00;
  1712  000D40  0E00               	movlw	0
  1713  000D42  6E82               	movwf	3970,c	;volatile
  1714  000D44  0012               	return		;funcret
  1715  000D46                     __end_of_initKeypad:
  1716                           	opt stack 0
  1717                           tblptru	equ	0xFF8
  1718                           tblptrh	equ	0xFF7
  1719                           tblptrl	equ	0xFF6
  1720                           tablat	equ	0xFF5
  1721                           wreg	equ	0xFE8
  1722                           indf2	equ	0xFDF
  1723                           postinc2	equ	0xFDE
  1724                           fsr2h	equ	0xFDA
  1725                           fsr2l	equ	0xFD9
  1726                           status	equ	0xFD8
  1727                           
  1728 ;; *************** function ___wmul *****************
  1729 ;; Defined at:
  1730 ;;		line 15 in file "/opt/microchip/xc8/v1.34/sources/common/Umul16.c"
  1731 ;; Parameters:    Size  Location     Type
  1732 ;;  multiplier      2    0[COMRAM] unsigned int 
  1733 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1734 ;; Auto vars:     Size  Location     Type
  1735 ;;  product         2    4[COMRAM] unsigned int 
  1736 ;; Return value:  Size  Location     Type
  1737 ;;                  2    0[COMRAM] unsigned int 
  1738 ;; Registers used:
  1739 ;;		wreg, status,2, status,0, prodl, prodh
  1740 ;; Tracked objects:
  1741 ;;		On entry : 0/0
  1742 ;;		On exit  : 0/0
  1743 ;;		Unchanged: 0/0
  1744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1745 ;;      Params:         4       0       0       0       0       0       0       0       0
  1746 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1747 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1748 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1749 ;;Total ram usage:        6 bytes
  1750 ;; Hardware stack levels used:    1
  1751 ;; This function calls:
  1752 ;;		Nothing
  1753 ;; This function is called by:
  1754 ;;		_main
  1755 ;; This function uses a non-reentrant model
  1756 ;;
  1757                           
  1758                           	psect	text12
  1759  000CF6                     __ptext12:
  1760                           	opt stack 0
  1761  000CF6                     ___wmul:
  1762                           	opt stack 30
  1763                           
  1764                           ;incstack = 0
  1765  000CF6  5001               	movf	___wmul@multiplier,w,c
  1766  000CF8  0203               	mulwf	___wmul@multiplicand,c
  1767  000CFA  CFF3 F005          	movff	prodl,___wmul@product
  1768  000CFE  CFF4 F006          	movff	prodh,___wmul@product+1
  1769  000D02  5001               	movf	___wmul@multiplier,w,c
  1770  000D04  0204               	mulwf	___wmul@multiplicand+1,c
  1771  000D06  50F3               	movf	prodl,w,c
  1772  000D08  2606               	addwf	___wmul@product+1,f,c
  1773  000D0A  5002               	movf	___wmul@multiplier+1,w,c
  1774  000D0C  0203               	mulwf	___wmul@multiplicand,c
  1775  000D0E  50F3               	movf	prodl,w,c
  1776  000D10  2606               	addwf	___wmul@product+1,f,c
  1777  000D12  C005  F001         	movff	___wmul@product,?___wmul
  1778  000D16  C006  F002         	movff	___wmul@product+1,?___wmul+1
  1779  000D1A  D000               	goto	l136
  1780  000D1C                     l136:
  1781  000D1C  0012               	return		;funcret
  1782  000D1E                     __end_of___wmul:
  1783                           	opt stack 0
  1784                           tblptru	equ	0xFF8
  1785                           tblptrh	equ	0xFF7
  1786                           tblptrl	equ	0xFF6
  1787                           tablat	equ	0xFF5
  1788                           prodh	equ	0xFF4
  1789                           prodl	equ	0xFF3
  1790                           wreg	equ	0xFE8
  1791                           indf2	equ	0xFDF
  1792                           postinc2	equ	0xFDE
  1793                           fsr2h	equ	0xFDA
  1794                           fsr2l	equ	0xFD9
  1795                           status	equ	0xFD8
  1796                           tblptru	equ	0xFF8
  1797                           tblptrh	equ	0xFF7
  1798                           tblptrl	equ	0xFF6
  1799                           tablat	equ	0xFF5
  1800                           prodh	equ	0xFF4
  1801                           prodl	equ	0xFF3
  1802                           wreg	equ	0xFE8
  1803                           indf2	equ	0xFDF
  1804                           postinc2	equ	0xFDE
  1805                           fsr2h	equ	0xFDA
  1806                           fsr2l	equ	0xFD9
  1807                           status	equ	0xFD8
  1808                           
  1809                           	psect	rparam
  1810  0000                     tblptru	equ	0xFF8
  1811                           tblptrh	equ	0xFF7
  1812                           tblptrl	equ	0xFF6
  1813                           tablat	equ	0xFF5
  1814                           prodh	equ	0xFF4
  1815                           prodl	equ	0xFF3
  1816                           wreg	equ	0xFE8
  1817                           indf2	equ	0xFDF
  1818                           postinc2	equ	0xFDE
  1819                           fsr2h	equ	0xFDA
  1820                           fsr2l	equ	0xFD9
  1821                           status	equ	0xFD8


Data Sizes:
    Strings     34
    Constant    16
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     43      43
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_3(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 16
		 -> main@msg(COMRAM[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sendUART@data	PTR unsigned char  size(2) Largest target is 16
		 -> main@msg(COMRAM[16]), 

    lcdPrint@str	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_2(CODE[8]), STR_1(CODE[15]), 


Critical Paths under _main in COMRAM

    _main->_readKeypad
    _moveMotor->___wmul
    _lcdPrint->_lcdData
    _initLCD->_lcdCommand

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                19    19      0    1779
                                             24 COMRAM    19    19      0
                             ___wmul
                         _initKeypad
                            _initLCD
                          _initMotor
                           _initUART
                         _lcdCommand
                            _lcdData
                           _lcdPrint
                          _moveMotor
                         _readKeypad
                           _sendUART
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             22    16      6     312
                                              0 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (1) _sendUART                                             2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _readKeypad                                          24    24      0     135
                                              0 COMRAM    24    24      0
 ---------------------------------------------------------------------------------
 (1) _moveMotor                                            7     3      4     174
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _lcdPrint                                             2     0      2     271
                                              3 COMRAM     2     0      2
                            _lcdData
 ---------------------------------------------------------------------------------
 (2) _lcdData                                              3     3      0     120
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _initUART                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMotor                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     120
                                              3 COMRAM     1     1      0
                         _lcdCommand
 ---------------------------------------------------------------------------------
 (1) _lcdCommand                                           3     3      0     120
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _initKeypad                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     265
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___wmul
   _initKeypad
   _initLCD
     _lcdCommand
   _initMotor
   _initUART
   _lcdCommand
   _lcdData
   _lcdPrint
     _lcdData
   _moveMotor
     ___wmul (ARG)
   _readKeypad
   _sendUART
   _sprintf

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     2B      2B       1       45.3%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sat Jun  8 15:31:26 2024

                     l95 0918                       u15 0A16                       u16 0A18  
                     u25 0A20                       u35 0A32                       u36 0A34  
                     u45 0A3C                       u55 0A4E                       u56 0A50  
                     u65 0A58                       u75 0A62                       u76 0A64  
                     u85 0A7E                       u86 0A80                       u95 0A92  
                     u96 0A94              __CFG_BOR$ON 000000      ___wmul@multiplicand 0003  
            __CFG_BORV$3 000000             __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000  
           __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000                      l101 0C58  
                    l102 0C30                      l112 0CD0                      l133 0C1A  
                    l136 0D1C                      l823 0868                      l833 08AE  
                    l843 090C                      l819 0854                      l933 0CA2  
                    l829 089A                      l941 0B8E                      l839 0904  
                    l847 0914                      l937 0CB8                      l953 0BBC  
                    l945 0B98                      l961 0BF0                      l963 0C0C  
                    l947 0B9E                      l973 0CE6                      l949 0BA6  
                    l959 0BCC             __CFG_CPB$OFF 000000                      u105 0AAA  
                    u106 0AAC                      u115 0AC6                      u116 0AC8  
                    u205 09AE                      u125 0932                      u206 09B0  
                    u126 0934                      u215 09C6                      u135 093C  
                    u216 09C8                      u240 0842                      u225 09E2  
                    u145 094E                      u226 09E4                      u146 0950  
                    u155 0958                      u165 096A                      u166 096C  
                    u175 0974                      u264 0878                      u185 097E  
                    u265 0874                      u186 0980             __CFG_CPD$OFF 000000  
                    u195 099A                      u507 098C                      u196 099C  
                    u284 08C2                      u517 09F4                      u445 0C24  
                    u285 08BE                      u446 0C26                      u527 0C78  
                    u537 0A70                      u547 0AD8                      u477 0888  
                    u487 0C38                      u497 0C4A                      wreg 000FE8  
           __CFG_FOSC$HS 000000             __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000  
                   l1001 0B00                     STR_1 0811                     STR_2 082B  
                   STR_3 0820                     _LATC 000F8B             __CFG_PWRT$ON 000000  
                   _main 0AE2                     fsr2h 000FDA                     indf2 000FDF  
                   fsr2l 000FD9                     prodh 000FF4                     prodl 000FF3  
                   start 0000            __CFG_MCLRE$ON 000000             ___param_bank 000010  
                  ?_main 0001                    _LATB0 007C50                    _LATB1 007C51  
                  _LATD0 007C60                    _LATD1 007C61                    _LATD2 007C62  
                  _LATD3 007C63                    _LATD4 007C64                    _LATD5 007C65  
                  _SPBRG 000FAF                    _PORTC 000F82                    _TRISC 000F94  
                  _TRISD 000F95                    _TXREG 000FAD          __end_of_lcdData 09FE  
        __end_of_initLCD 0CA0                    tablat 000FF5                    status 000FD8  
        __end_of_sprintf 0C1C          __initialization 0D32             __end_of_main 0B84  
        readKeypad@F4542 0801           moveMotor@steps 0007                   ??_main 0019  
          __activetblptr 000002           __CFG_XINST$OFF 000000         __end_of_lcdPrint 0CCC  
                 ___wmul 0CF6         __end_of_initUART 0D32                ??_lcdData 0001  
       __end_of_sendUART 0CF6                ??_initLCD 0004             __mediumconst 0000  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
              ??_sprintf 0007       moveMotor@direction 0009               __accesstop 0060  
__end_of__initialization 0D32          __CFG_PBADEN$OFF 000000  __end_ofreadKeypad@F4542 0811  
          ___rparam_used 000001           __pcstackCOMRAM 0001       __size_of_initMotor 0006  
       readKeypad@keymap 0005               _lcdCommand 09FE                  ?___wmul 0001  
     __size_of_moveMotor 0052                ?_lcdPrint 0004                ?_initUART 0001  
              ?_sendUART 0001                  __Hparam 0000                  __Lparam 0000  
             _initKeypad 0D3C               _readKeypad 0834          __size_of___wmul 0028  
           __psmallconst 0800                  __pcinit 0D32                  _lcdData 091A  
                __ramtop 0800                  __ptext0 0AE2                  __ptext1 0B84  
                __ptext2 0CCC                  __ptext3 0834                  __ptext4 0C1C  
                __ptext5 0CA0                  __ptext6 091A                  __ptext7 0D1E  
                __ptext8 0D46                  __ptext9 0C6E                  _initLCD 0C6E  
      __end_of_initMotor 0D4C               ??_lcdPrint 0006                  _sprintf 0B84  
                main@key 002B                  main@msg 0019     end_of_initialization 0D32  
             ??_initUART 0001        __end_of_moveMotor 0C6E            __Lmediumconst 0000  
             ??_sendUART 0003                _RCSTAbits 000FAB              ?_lcdCommand 0001  
                postinc2 000FDE                _TRISBbits 000F93                _TRISCbits 000F94  
              _TXSTAbits 000FAC              ?_initKeypad 0001              ?_readKeypad 0001  
         __end_of___wmul 0D1E      start_initialization 0D32      __size_of_lcdCommand 00E4  
           sendUART@data 0001                 ??___wmul 0005      __size_of_initKeypad 000A  
    __size_of_readKeypad 00E6        __size_of_lcdPrint 002C              sprintf@flag 0007  
      __size_of_initUART 0014        __size_of_sendUART 002A                 ?_lcdData 0001  
          lcdCommand@cmd 0003                 ?_initLCD 0001              __smallconst 0800  
             moveMotor@i 000C                _initMotor 0D46                 ?_sprintf 0001  
         ___wmul@product 0005                _moveMotor 0C1C             ??_lcdCommand 0001  
      ___wmul@multiplier 0001                main@level 0029               ?_initMotor 0001  
     __end_of_lcdCommand 0AE2            readKeypad@col 0015            readKeypad@row 0017  
             ?_moveMotor 0007                 __Hrparam 0000                 __Lrparam 0000  
           ??_initKeypad 0001             ??_readKeypad 0001         __size_of_lcdData 00E4  
       __size_of_initLCD 0032                 __ptext10 09FE                 __ptext11 0D3C  
               __ptext12 0CF6                 _lcdPrint 0CA0       __end_of_initKeypad 0D46  
       __size_of_sprintf 0098                 _initUART 0D1E       __end_of_readKeypad 091A  
          __size_of_main 00A2                 _sendUART 0CCC              lcdData@data 0003  
            ??_initMotor 0001                sprintf@ap 0008                sprintf@sp 0001  
            ??_moveMotor 000B                 sprintf@c 000A                 sprintf@f 0003  
            lcdPrint@str 0004  

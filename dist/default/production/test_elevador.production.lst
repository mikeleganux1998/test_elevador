

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Mon Jun 10 22:01:57 2024

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	text11,global,reloc=2,class=CODE,delta=1
    20                           	psect	text12,global,reloc=2,class=CODE,delta=1
    21                           	psect	text13,global,reloc=2,class=CODE,delta=1
    22                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    23                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    24  0000                     _LATB	set	3978
    25  0000                     _LATD	set	3980
    26  0000                     _LATDbits	set	3980
    27  0000                     _PORTAbits	set	3968
    28  0000                     _PORTCbits	set	3970
    29  0000                     _TRISA	set	3986
    30  0000                     _TRISB	set	3987
    31  0000                     _TRISC	set	3988
    32  0000                     _TRISD	set	3989
    33                           
    34                           	psect	smallconst
    35  000800                     __psmallconst:
    36                           	opt stack 0
    37  000800  00                 	db	0
    38  000801                     STR_1:
    39  000801  4E                 	db	78	;'N'
    40  000802  69                 	db	105	;'i'
    41  000803  76                 	db	118	;'v'
    42  000804  65                 	db	101	;'e'
    43  000805  6C                 	db	108	;'l'
    44  000806  3A                 	db	58	;':'
    45  000807  20                 	db	32
    46  000808  00                 	db	0
    47                           
    48                           ; #config settings
    49  000809  00                 	db	0	; dummy byte at the end
    50  0000                     
    51                           	psect	cinit
    52  000D7A                     __pcinit:
    53                           	opt stack 0
    54  000D7A                     start_initialization:
    55                           	opt stack 0
    56  000D7A                     __initialization:
    57                           	opt stack 0
    58  000D7A                     end_of_initialization:
    59                           	opt stack 0
    60  000D7A                     __end_of__initialization:
    61                           	opt stack 0
    62  000D7A  0E00               	movlw	low (__Lsmallconst shr (0+16))
    63  000D7C  6EF8               	movwf	tblptru,c
    64  000D7E  0E08               	movlw	high __Lsmallconst
    65  000D80  6EF7               	movwf	tblptrh,c
    66  000D82  0100               	movlb	0
    67  000D84  EF8D  F005         	goto	_main	;jump to C main() function
    68                           tblptru	equ	0xFF8
    69                           tblptrh	equ	0xFF7
    70                           
    71                           	psect	cstackCOMRAM
    72  000001                     __pcstackCOMRAM:
    73                           	opt stack 0
    74  000001                     ??_read_keypad:
    75  000001                     ??_lcd_command:
    76  000001                     ??_lcd_data:
    77  000001                     ?___wmul:
    78                           	opt stack 0
    79  000001                     step_motor@steps:
    80                           	opt stack 0
    81  000001                     display_level@level:
    82                           	opt stack 0
    83  000001                     ___wmul@multiplier:
    84                           	opt stack 0
    85                           
    86                           ; 2 bytes @ 0x0
    87  000001                     	ds	2
    88  000003                     ??_step_motor:
    89  000003                     read_keypad@key:
    90                           	opt stack 0
    91  000003                     lcd_command@cmd:
    92                           	opt stack 0
    93  000003                     lcd_data@data:
    94                           	opt stack 0
    95  000003                     ___wmul@multiplicand:
    96                           	opt stack 0
    97                           
    98                           ; 2 bytes @ 0x2
    99  000003                     	ds	1
   100  000004                     ??_lcd_init:
   101  000004                     ??_lcd_clear:
   102  000004                     lcd_write_char@c:
   103                           	opt stack 0
   104  000004                     read_keypad@col:
   105                           	opt stack 0
   106  000004                     lcd_set_cursor@row:
   107                           	opt stack 0
   108  000004                     lcd_write_string@str:
   109                           	opt stack 0
   110  000004                     step_motor@direction:
   111                           	opt stack 0
   112                           
   113                           ; 2 bytes @ 0x3
   114  000004                     	ds	1
   115  000005                     ___wmul@product:
   116                           	opt stack 0
   117                           
   118                           ; 2 bytes @ 0x4
   119  000005                     	ds	1
   120  000006                     lcd_set_cursor@col:
   121                           	opt stack 0
   122  000006                     step_motor@i:
   123                           	opt stack 0
   124                           
   125                           ; 2 bytes @ 0x5
   126  000006                     	ds	2
   127  000008                     lcd_set_cursor@address:
   128                           	opt stack 0
   129                           
   130                           ; 2 bytes @ 0x7
   131  000008                     	ds	2
   132  00000A                     ??_main:
   133                           
   134                           ; 0 bytes @ 0x9
   135  00000A                     	ds	2
   136  00000C                     main@steps:
   137                           	opt stack 0
   138                           
   139                           ; 2 bytes @ 0xB
   140  00000C                     	ds	2
   141  00000E                     main@key:
   142                           	opt stack 0
   143                           
   144                           ; 1 bytes @ 0xD
   145  00000E                     	ds	1
   146  00000F                     main@target_level:
   147                           	opt stack 0
   148                           
   149                           ; 2 bytes @ 0xE
   150  00000F                     	ds	2
   151  000011                     main@current_level:
   152                           	opt stack 0
   153                           
   154                           ; 2 bytes @ 0x10
   155  000011                     	ds	2
   156                           tblptru	equ	0xFF8
   157                           tblptrh	equ	0xFF7
   158                           
   159 ;;
   160 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   161 ;;
   162 ;; *************** function _main *****************
   163 ;; Defined at:
   164 ;;		line 44 in file "main.c"
   165 ;; Parameters:    Size  Location     Type
   166 ;;		None
   167 ;; Auto vars:     Size  Location     Type
   168 ;;  steps           2   11[COMRAM] int 
   169 ;;  target_level    2   14[COMRAM] int 
   170 ;;  key             1   13[COMRAM] unsigned char 
   171 ;;  current_leve    2   16[COMRAM] int 
   172 ;; Return value:  Size  Location     Type
   173 ;;		None               void
   174 ;; Registers used:
   175 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   176 ;; Tracked objects:
   177 ;;		On entry : 0/0
   178 ;;		On exit  : 0/0
   179 ;;		Unchanged: 0/0
   180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   181 ;;      Params:         0       0       0       0       0       0       0       0       0
   182 ;;      Locals:         7       0       0       0       0       0       0       0       0
   183 ;;      Temps:          2       0       0       0       0       0       0       0       0
   184 ;;      Totals:         9       0       0       0       0       0       0       0       0
   185 ;;Total ram usage:        9 bytes
   186 ;; Hardware stack levels required when called:    3
   187 ;; This function calls:
   188 ;;		___wmul
   189 ;;		_display_level
   190 ;;		_init_leds_and_motor
   191 ;;		_lcd_clear
   192 ;;		_lcd_init
   193 ;;		_lcd_set_cursor
   194 ;;		_lcd_write_char
   195 ;;		_lcd_write_string
   196 ;;		_read_keypad
   197 ;;		_step_motor
   198 ;; This function is called by:
   199 ;;		Startup code after reset
   200 ;; This function uses a non-reentrant model
   201 ;;
   202                           
   203                           	psect	text0
   204  000B1A                     __ptext0:
   205                           	opt stack 0
   206  000B1A                     _main:
   207                           	opt stack 28
   208                           
   209                           ;main.c: 45: TRISA = 0x0F;
   210                           
   211                           ;incstack = 0
   212  000B1A  0E0F               	movlw	15
   213  000B1C  6E92               	movwf	3986,c	;volatile
   214                           
   215                           ;main.c: 46: TRISB = 0xF0;
   216  000B1E  0EF0               	movlw	240
   217  000B20  6E93               	movwf	3987,c	;volatile
   218                           
   219                           ;main.c: 48: lcd_init();
   220  000B22  EC4C  F006         	call	_lcd_init	;wreg free
   221                           
   222                           ;main.c: 49: init_leds_and_motor();
   223  000B26  ECCE  F006         	call	_init_leds_and_motor	;wreg free
   224                           
   225                           ;main.c: 51: int current_level = 0;
   226  000B2A  0E00               	movlw	0
   227  000B2C  6E12               	movwf	main@current_level+1,c
   228  000B2E  0E00               	movlw	0
   229  000B30  6E11               	movwf	main@current_level,c
   230                           
   231                           ;main.c: 52: display_level(current_level);
   232  000B32  C011  F001         	movff	main@current_level,display_level@level
   233  000B36  C012  F002         	movff	main@current_level+1,display_level@level+1
   234  000B3A  ECD3  F006         	call	_display_level	;wreg free
   235  000B3E  D000               	goto	l1049
   236  000B40                     l1049:
   237                           
   238                           ;main.c: 55: char key = read_keypad();
   239  000B40  ECF7  F005         	call	_read_keypad	;wreg free
   240  000B44  6E0E               	movwf	main@key,c
   241                           
   242                           ;main.c: 57: if (key != '\0') {
   243  000B46  500E               	movf	main@key,w,c
   244  000B48  B4D8               	btfsc	status,2,c
   245  000B4A  D7FA               	goto	l1049
   246                           
   247                           ;main.c: 58: int target_level = key - '0';
   248  000B4C  0ED0               	movlw	208
   249  000B4E  240E               	addwf	main@key,w,c
   250  000B50  6E0F               	movwf	main@target_level,c
   251  000B52  6A10               	clrf	main@target_level+1,c
   252  000B54  0EFF               	movlw	255
   253  000B56  2210               	addwfc	main@target_level+1,f,c
   254                           
   255                           ;main.c: 60: if (target_level >= 0 && target_level <= 9) {
   256  000B58  BE10               	btfsc	main@target_level+1,7,c
   257  000B5A  D7F2               	goto	l1049
   258  000B5C  BE10               	btfsc	main@target_level+1,7,c
   259  000B5E  D006               	goto	l1057
   260  000B60  5010               	movf	main@target_level+1,w,c
   261  000B62  E1EE               	bnz	l1049
   262  000B64  0E0A               	movlw	10
   263  000B66  5C0F               	subwf	main@target_level,w,c
   264  000B68  B0D8               	btfsc	status,0,c
   265  000B6A  D7EA               	goto	l1049
   266  000B6C                     l1057:
   267                           
   268                           ;main.c: 61: int steps = (target_level - current_level) * 100;
   269  000B6C  C011  F00A         	movff	main@current_level,??_main
   270  000B70  C012  F00B         	movff	main@current_level+1,??_main+1
   271  000B74  1E0A               	comf	??_main,f,c
   272  000B76  1E0B               	comf	??_main+1,f,c
   273  000B78  4A0A               	infsnz	??_main,f,c
   274  000B7A  2A0B               	incf	??_main+1,f,c
   275  000B7C  500F               	movf	main@target_level,w,c
   276  000B7E  240A               	addwf	??_main,w,c
   277  000B80  6E01               	movwf	___wmul@multiplier,c
   278  000B82  5010               	movf	main@target_level+1,w,c
   279  000B84  200B               	addwfc	??_main+1,w,c
   280  000B86  6E02               	movwf	___wmul@multiplier+1,c
   281  000B88  0E00               	movlw	0
   282  000B8A  6E04               	movwf	___wmul@multiplicand+1,c
   283  000B8C  0E64               	movlw	100
   284  000B8E  6E03               	movwf	___wmul@multiplicand,c
   285  000B90  EC9D  F006         	call	___wmul	;wreg free
   286  000B94  C001  F00C         	movff	?___wmul,main@steps
   287  000B98  C002  F00D         	movff	?___wmul+1,main@steps+1
   288                           
   289                           ;main.c: 62: step_motor(steps);
   290  000B9C  C00C  F001         	movff	main@steps,step_motor@steps
   291  000BA0  C00D  F002         	movff	main@steps+1,step_motor@steps+1
   292  000BA4  EC05  F004         	call	_step_motor	;wreg free
   293                           
   294                           ;main.c: 63: current_level = target_level;
   295  000BA8  C00F  F011         	movff	main@target_level,main@current_level
   296  000BAC  C010  F012         	movff	main@target_level+1,main@current_level+1
   297                           
   298                           ;main.c: 64: display_level(current_level);
   299  000BB0  C011  F001         	movff	main@current_level,display_level@level
   300  000BB4  C012  F002         	movff	main@current_level+1,display_level@level+1
   301  000BB8  ECD3  F006         	call	_display_level	;wreg free
   302                           
   303                           ;main.c: 65: lcd_clear();
   304  000BBC  ECB1  F006         	call	_lcd_clear	;wreg free
   305                           
   306                           ;main.c: 66: lcd_set_cursor(1, 1);
   307  000BC0  0E00               	movlw	0
   308  000BC2  6E05               	movwf	lcd_set_cursor@row+1,c
   309  000BC4  0E01               	movlw	1
   310  000BC6  6E04               	movwf	lcd_set_cursor@row,c
   311  000BC8  0E00               	movlw	0
   312  000BCA  6E07               	movwf	lcd_set_cursor@col+1,c
   313  000BCC  0E01               	movlw	1
   314  000BCE  6E06               	movwf	lcd_set_cursor@col,c
   315  000BD0  EC6D  F006         	call	_lcd_set_cursor	;wreg free
   316                           
   317                           ;main.c: 67: lcd_write_string("Nivel: ");
   318  000BD4  0E01               	movlw	low STR_1
   319  000BD6  6E04               	movwf	lcd_write_string@str,c
   320  000BD8  0E08               	movlw	high STR_1
   321  000BDA  6E05               	movwf	lcd_write_string@str+1,c
   322  000BDC  EC87  F006         	call	_lcd_write_string	;wreg free
   323                           
   324                           ;main.c: 68: lcd_write_char(current_level + '0');
   325  000BE0  5011               	movf	main@current_level,w,c
   326  000BE2  0F30               	addlw	48
   327  000BE4  ECC4  F006         	call	_lcd_write_char
   328  000BE8  D7AB               	goto	l1049
   329  000BEA  EF00  F000         	goto	start
   330  000BEE                     __end_of_main:
   331                           	opt stack 0
   332                           tblptru	equ	0xFF8
   333                           tblptrh	equ	0xFF7
   334                           status	equ	0xFD8
   335                           
   336 ;; *************** function _step_motor *****************
   337 ;; Defined at:
   338 ;;		line 13 in file "motor_led.c"
   339 ;; Parameters:    Size  Location     Type
   340 ;;  steps           2    0[COMRAM] int 
   341 ;; Auto vars:     Size  Location     Type
   342 ;;  i               2    5[COMRAM] int 
   343 ;;  direction       2    3[COMRAM] int 
   344 ;; Return value:  Size  Location     Type
   345 ;;		None               void
   346 ;; Registers used:
   347 ;;		wreg, status,2, status,0
   348 ;; Tracked objects:
   349 ;;		On entry : 0/0
   350 ;;		On exit  : 0/0
   351 ;;		Unchanged: 0/0
   352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   353 ;;      Params:         2       0       0       0       0       0       0       0       0
   354 ;;      Locals:         4       0       0       0       0       0       0       0       0
   355 ;;      Temps:          1       0       0       0       0       0       0       0       0
   356 ;;      Totals:         7       0       0       0       0       0       0       0       0
   357 ;;Total ram usage:        7 bytes
   358 ;; Hardware stack levels used:    1
   359 ;; This function calls:
   360 ;;		Nothing
   361 ;; This function is called by:
   362 ;;		_main
   363 ;; This function uses a non-reentrant model
   364 ;;
   365                           
   366                           	psect	text1
   367  00080A                     __ptext1:
   368                           	opt stack 0
   369  00080A                     _step_motor:
   370                           	opt stack 30
   371                           
   372                           ;motor_led.c: 14: int direction = (steps > 0) ? 1 : -1;
   373                           
   374                           ;incstack = 0
   375  00080A  BE02               	btfsc	step_motor@steps+1,7,c
   376  00080C  D005               	goto	l945
   377  00080E  5002               	movf	step_motor@steps+1,w,c
   378  000810  E106               	bnz	l947
   379  000812  0401               	decf	step_motor@steps,w,c
   380  000814  B0D8               	btfsc	status,0,c
   381  000816  D003               	goto	l947
   382  000818                     l945:
   383  000818  6804               	setf	step_motor@direction,c
   384  00081A  6805               	setf	step_motor@direction+1,c
   385  00081C  D005               	goto	l949
   386  00081E                     l947:
   387  00081E  0E00               	movlw	0
   388  000820  6E05               	movwf	step_motor@direction+1,c
   389  000822  0E01               	movlw	1
   390  000824  6E04               	movwf	step_motor@direction,c
   391  000826  D000               	goto	l949
   392  000828                     l949:
   393                           
   394                           ;motor_led.c: 15: if (steps < 0) {
   395  000828  AE02               	btfss	step_motor@steps+1,7,c
   396  00082A  D005               	goto	l953
   397                           
   398                           ;motor_led.c: 16: steps = -steps;
   399  00082C  6C01               	negf	step_motor@steps,c
   400  00082E  1E02               	comf	step_motor@steps+1,f,c
   401  000830  B0D8               	btfsc	status,0,c
   402  000832  2A02               	incf	step_motor@steps+1,f,c
   403  000834  D000               	goto	l953
   404  000836                     l953:
   405                           
   406                           ;motor_led.c: 17: }
   407                           ;motor_led.c: 19: for (int i = 0; i < steps; i++) {
   408  000836  0E00               	movlw	0
   409  000838  6E07               	movwf	step_motor@i+1,c
   410  00083A  0E00               	movlw	0
   411  00083C  6E06               	movwf	step_motor@i,c
   412  00083E  D06A               	goto	l107
   413  000840                     l955:
   414                           
   415                           ;motor_led.c: 20: if (direction > 0) {
   416  000840  BE05               	btfsc	step_motor@direction+1,7,c
   417  000842  D035               	goto	l109
   418  000844  5005               	movf	step_motor@direction+1,w,c
   419  000846  E103               	bnz	u280
   420  000848  0404               	decf	step_motor@direction,w,c
   421  00084A  A0D8               	btfss	status,0,c
   422  00084C  D030               	goto	l109
   423  00084E                     u280:
   424                           
   425                           ;motor_led.c: 22: LATDbits.LATD0 = 1; LATDbits.LATD1 = 0; LATDbits.LATD2 = 0; LATDbits.L
      +                          ATD3 = 0; _delay((unsigned long)((10)*(8000000/4000.0)));
   426  00084E  808C               	bsf	3980,0,c	;volatile
   427  000850  928C               	bcf	3980,1,c	;volatile
   428  000852  948C               	bcf	3980,2,c	;volatile
   429  000854  968C               	bcf	3980,3,c	;volatile
   430  000856  0E1A               	movlw	26
   431  000858  6E03               	movwf	??_step_motor& (0+255),c
   432  00085A  0EF8               	movlw	248
   433  00085C                     u367:
   434  00085C  2EE8               	decfsz	wreg,f,c
   435  00085E  D7FE               	goto	u367
   436  000860  2E03               	decfsz	??_step_motor& (0+255),f,c
   437  000862  D7FC               	goto	u367
   438  000864  D000               	nop2	
   439                           
   440                           ;motor_led.c: 23: LATDbits.LATD0 = 0; LATDbits.LATD1 = 1; LATDbits.LATD2 = 0; LATDbits.L
      +                          ATD3 = 0; _delay((unsigned long)((10)*(8000000/4000.0)));
   441  000866  908C               	bcf	3980,0,c	;volatile
   442  000868  828C               	bsf	3980,1,c	;volatile
   443  00086A  948C               	bcf	3980,2,c	;volatile
   444  00086C  968C               	bcf	3980,3,c	;volatile
   445  00086E  0E1A               	movlw	26
   446  000870  6E03               	movwf	??_step_motor& (0+255),c
   447  000872  0EF8               	movlw	248
   448  000874                     u377:
   449  000874  2EE8               	decfsz	wreg,f,c
   450  000876  D7FE               	goto	u377
   451  000878  2E03               	decfsz	??_step_motor& (0+255),f,c
   452  00087A  D7FC               	goto	u377
   453  00087C  D000               	nop2	
   454                           
   455                           ;motor_led.c: 24: LATDbits.LATD0 = 0; LATDbits.LATD1 = 0; LATDbits.LATD2 = 1; LATDbits.L
      +                          ATD3 = 0; _delay((unsigned long)((10)*(8000000/4000.0)));
   456  00087E  908C               	bcf	3980,0,c	;volatile
   457  000880  928C               	bcf	3980,1,c	;volatile
   458  000882  848C               	bsf	3980,2,c	;volatile
   459  000884  968C               	bcf	3980,3,c	;volatile
   460  000886  0E1A               	movlw	26
   461  000888  6E03               	movwf	??_step_motor& (0+255),c
   462  00088A  0EF8               	movlw	248
   463  00088C                     u387:
   464  00088C  2EE8               	decfsz	wreg,f,c
   465  00088E  D7FE               	goto	u387
   466  000890  2E03               	decfsz	??_step_motor& (0+255),f,c
   467  000892  D7FC               	goto	u387
   468  000894  D000               	nop2	
   469                           
   470                           ;motor_led.c: 25: LATDbits.LATD0 = 0; LATDbits.LATD1 = 0; LATDbits.LATD2 = 0; LATDbits.L
      +                          ATD3 = 1; _delay((unsigned long)((10)*(8000000/4000.0)));
   471  000896  908C               	bcf	3980,0,c	;volatile
   472  000898  928C               	bcf	3980,1,c	;volatile
   473  00089A  948C               	bcf	3980,2,c	;volatile
   474  00089C  868C               	bsf	3980,3,c	;volatile
   475  00089E  0E1A               	movlw	26
   476  0008A0  6E03               	movwf	??_step_motor& (0+255),c
   477  0008A2  0EF8               	movlw	248
   478  0008A4                     u397:
   479  0008A4  2EE8               	decfsz	wreg,f,c
   480  0008A6  D7FE               	goto	u397
   481  0008A8  2E03               	decfsz	??_step_motor& (0+255),f,c
   482  0008AA  D7FC               	goto	u397
   483  0008AC  D02F               	goto	L1
   484  0008AE                     l109:
   485                           
   486                           ;motor_led.c: 28: LATDbits.LATD0 = 0; LATDbits.LATD1 = 0; LATDbits.LATD2 = 0; LATDbits.L
      +                          ATD3 = 1; _delay((unsigned long)((10)*(8000000/4000.0)));
   487  0008AE  908C               	bcf	3980,0,c	;volatile
   488  0008B0  928C               	bcf	3980,1,c	;volatile
   489  0008B2  948C               	bcf	3980,2,c	;volatile
   490  0008B4  868C               	bsf	3980,3,c	;volatile
   491  0008B6  0E1A               	movlw	26
   492  0008B8  6E03               	movwf	??_step_motor& (0+255),c
   493  0008BA  0EF8               	movlw	248
   494  0008BC                     u407:
   495  0008BC  2EE8               	decfsz	wreg,f,c
   496  0008BE  D7FE               	goto	u407
   497  0008C0  2E03               	decfsz	??_step_motor& (0+255),f,c
   498  0008C2  D7FC               	goto	u407
   499  0008C4  D000               	nop2	
   500                           
   501                           ;motor_led.c: 29: LATDbits.LATD0 = 0; LATDbits.LATD1 = 0; LATDbits.LATD2 = 1; LATDbits.L
      +                          ATD3 = 0; _delay((unsigned long)((10)*(8000000/4000.0)));
   502  0008C6  908C               	bcf	3980,0,c	;volatile
   503  0008C8  928C               	bcf	3980,1,c	;volatile
   504  0008CA  848C               	bsf	3980,2,c	;volatile
   505  0008CC  968C               	bcf	3980,3,c	;volatile
   506  0008CE  0E1A               	movlw	26
   507  0008D0  6E03               	movwf	??_step_motor& (0+255),c
   508  0008D2  0EF8               	movlw	248
   509  0008D4                     u417:
   510  0008D4  2EE8               	decfsz	wreg,f,c
   511  0008D6  D7FE               	goto	u417
   512  0008D8  2E03               	decfsz	??_step_motor& (0+255),f,c
   513  0008DA  D7FC               	goto	u417
   514  0008DC  D000               	nop2	
   515                           
   516                           ;motor_led.c: 30: LATDbits.LATD0 = 0; LATDbits.LATD1 = 1; LATDbits.LATD2 = 0; LATDbits.L
      +                          ATD3 = 0; _delay((unsigned long)((10)*(8000000/4000.0)));
   517  0008DE  908C               	bcf	3980,0,c	;volatile
   518  0008E0  828C               	bsf	3980,1,c	;volatile
   519  0008E2  948C               	bcf	3980,2,c	;volatile
   520  0008E4  968C               	bcf	3980,3,c	;volatile
   521  0008E6  0E1A               	movlw	26
   522  0008E8  6E03               	movwf	??_step_motor& (0+255),c
   523  0008EA  0EF8               	movlw	248
   524  0008EC                     u427:
   525  0008EC  2EE8               	decfsz	wreg,f,c
   526  0008EE  D7FE               	goto	u427
   527  0008F0  2E03               	decfsz	??_step_motor& (0+255),f,c
   528  0008F2  D7FC               	goto	u427
   529  0008F4  D000               	nop2	
   530                           
   531                           ;motor_led.c: 31: LATDbits.LATD0 = 1; LATDbits.LATD1 = 0; LATDbits.LATD2 = 0; LATDbits.L
      +                          ATD3 = 0; _delay((unsigned long)((10)*(8000000/4000.0)));
   532  0008F6  808C               	bsf	3980,0,c	;volatile
   533  0008F8  928C               	bcf	3980,1,c	;volatile
   534  0008FA  948C               	bcf	3980,2,c	;volatile
   535  0008FC  968C               	bcf	3980,3,c	;volatile
   536  0008FE  0E1A               	movlw	26
   537  000900  6E03               	movwf	??_step_motor& (0+255),c
   538  000902  0EF8               	movlw	248
   539  000904                     u437:
   540  000904  2EE8               	decfsz	wreg,f,c
   541  000906  D7FE               	goto	u437
   542  000908  2E03               	decfsz	??_step_motor& (0+255),f,c
   543  00090A  D7FC               	goto	u437
   544  00090C                     L1:
   545  00090C  D000               	nop2	
   546  00090E  D000               	goto	l1011
   547  000910                     l1011:
   548  000910  4A06               	infsnz	step_motor@i,f,c
   549  000912  2A07               	incf	step_motor@i+1,f,c
   550  000914                     l107:
   551  000914  5001               	movf	step_motor@steps,w,c
   552  000916  5C06               	subwf	step_motor@i,w,c
   553  000918  5007               	movf	step_motor@i+1,w,c
   554  00091A  0A80               	xorlw	128
   555  00091C  6E03               	movwf	??_step_motor& (0+255),c
   556  00091E  5002               	movf	step_motor@steps+1,w,c
   557  000920  0A80               	xorlw	128
   558  000922  5803               	subwfb	??_step_motor& (0+255),w,c
   559  000924  A0D8               	btfss	status,0,c
   560  000926  D78C               	goto	l955
   561  000928  0012               	return		;funcret
   562  00092A                     __end_of_step_motor:
   563                           	opt stack 0
   564                           tblptru	equ	0xFF8
   565                           tblptrh	equ	0xFF7
   566                           wreg	equ	0xFE8
   567                           status	equ	0xFD8
   568                           
   569 ;; *************** function _read_keypad *****************
   570 ;; Defined at:
   571 ;;		line 74 in file "main.c"
   572 ;; Parameters:    Size  Location     Type
   573 ;;		None
   574 ;; Auto vars:     Size  Location     Type
   575 ;;  col             2    3[COMRAM] int 
   576 ;;  key             1    2[COMRAM] unsigned char 
   577 ;; Return value:  Size  Location     Type
   578 ;;                  1    wreg      unsigned char 
   579 ;; Registers used:
   580 ;;		wreg, status,2, status,0
   581 ;; Tracked objects:
   582 ;;		On entry : 0/0
   583 ;;		On exit  : 0/0
   584 ;;		Unchanged: 0/0
   585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   586 ;;      Params:         0       0       0       0       0       0       0       0       0
   587 ;;      Locals:         3       0       0       0       0       0       0       0       0
   588 ;;      Temps:          2       0       0       0       0       0       0       0       0
   589 ;;      Totals:         5       0       0       0       0       0       0       0       0
   590 ;;Total ram usage:        5 bytes
   591 ;; Hardware stack levels used:    1
   592 ;; This function calls:
   593 ;;		Nothing
   594 ;; This function is called by:
   595 ;;		_main
   596 ;; This function uses a non-reentrant model
   597 ;;
   598                           
   599                           	psect	text2
   600  000BEE                     __ptext2:
   601                           	opt stack 0
   602  000BEE                     _read_keypad:
   603                           	opt stack 30
   604                           
   605                           ;main.c: 75: char key = '\0';
   606                           
   607                           ;incstack = 0
   608  000BEE  0E00               	movlw	0
   609  000BF0  6E03               	movwf	read_keypad@key,c
   610                           
   611                           ;main.c: 76: for (int col = 0; col < 4; col++) {
   612  000BF2  0E00               	movlw	0
   613  000BF4  6E05               	movwf	read_keypad@col+1,c
   614  000BF6  0E00               	movlw	0
   615  000BF8  6E04               	movwf	read_keypad@col,c
   616  000BFA                     l769:
   617  000BFA  BE05               	btfsc	read_keypad@col+1,7,c
   618  000BFC  D008               	goto	l773
   619  000BFE  5005               	movf	read_keypad@col+1,w,c
   620  000C00  E148               	bnz	l801
   621  000C02  0E04               	movlw	4
   622  000C04  5C04               	subwf	read_keypad@col,w,c
   623  000C06  B0D8               	btfsc	status,0,c
   624  000C08  D044               	goto	l801
   625  000C0A  D001               	goto	l773
   626  000C0C  D042               	goto	l801
   627  000C0E                     l773:
   628                           
   629                           ;main.c: 77: TRISB = 0xF0 | (1 << col);
   630  000C0E  C004  F001         	movff	read_keypad@col,??_read_keypad
   631  000C12  0E01               	movlw	1
   632  000C14  6E02               	movwf	(??_read_keypad+1)& (0+255),c
   633  000C16  2A01               	incf	??_read_keypad,f,c
   634  000C18  D002               	goto	u84
   635  000C1A                     u85:
   636  000C1A  90D8               	bcf	status,0,c
   637  000C1C  3602               	rlcf	??_read_keypad+1,f,c
   638  000C1E                     u84:
   639  000C1E  2E01               	decfsz	??_read_keypad,f,c
   640  000C20  D7FC               	goto	u85
   641  000C22  5002               	movf	??_read_keypad+1,w,c
   642  000C24  09F0               	iorlw	240
   643  000C26  6E93               	movwf	3987,c	;volatile
   644                           
   645                           ;main.c: 78: LATB = ~(1 << col);
   646  000C28  C004  F001         	movff	read_keypad@col,??_read_keypad
   647  000C2C  0E01               	movlw	1
   648  000C2E  6E02               	movwf	(??_read_keypad+1)& (0+255),c
   649  000C30  2A01               	incf	??_read_keypad,f,c
   650  000C32  D002               	goto	u94
   651  000C34                     u95:
   652  000C34  90D8               	bcf	status,0,c
   653  000C36  3602               	rlcf	??_read_keypad+1,f,c
   654  000C38                     u94:
   655  000C38  2E01               	decfsz	??_read_keypad,f,c
   656  000C3A  D7FC               	goto	u95
   657  000C3C  5002               	movf	??_read_keypad+1,w,c
   658  000C3E  0AFF               	xorlw	255
   659  000C40  6E8A               	movwf	3978,c	;volatile
   660                           
   661                           ;main.c: 80: _delay((unsigned long)((20)*(8000000/4000.0)));
   662  000C42  0E34               	movlw	52
   663  000C44  6E01               	movwf	??_read_keypad& (0+255),c
   664  000C46  0EF2               	movlw	242
   665  000C48                     u447:
   666  000C48  2EE8               	decfsz	wreg,f,c
   667  000C4A  D7FE               	goto	u447
   668  000C4C  2E01               	decfsz	??_read_keypad& (0+255),f,c
   669  000C4E  D7FC               	goto	u447
   670                           
   671                           ;main.c: 82: if (PORTAbits.RA0 == 0) key = '1' + col;
   672  000C50  B080               	btfsc	3968,0,c	;volatile
   673  000C52  D004               	goto	l781
   674  000C54  5004               	movf	read_keypad@col,w,c
   675  000C56  0F31               	addlw	49
   676  000C58  6E03               	movwf	read_keypad@key,c
   677  000C5A  D000               	goto	l781
   678  000C5C                     l781:
   679                           
   680                           ;main.c: 83: if (PORTAbits.RA1 == 0) key = '4' + col;
   681  000C5C  B280               	btfsc	3968,1,c	;volatile
   682  000C5E  D004               	goto	l785
   683  000C60  5004               	movf	read_keypad@col,w,c
   684  000C62  0F34               	addlw	52
   685  000C64  6E03               	movwf	read_keypad@key,c
   686  000C66  D000               	goto	l785
   687  000C68                     l785:
   688                           
   689                           ;main.c: 84: if (PORTAbits.RA2 == 0) key = '7' + col;
   690  000C68  B480               	btfsc	3968,2,c	;volatile
   691  000C6A  D004               	goto	l789
   692  000C6C  5004               	movf	read_keypad@col,w,c
   693  000C6E  0F37               	addlw	55
   694  000C70  6E03               	movwf	read_keypad@key,c
   695  000C72  D000               	goto	l789
   696  000C74                     l789:
   697                           
   698                           ;main.c: 85: if (PORTAbits.RA3 == 0) key = '*' + col;
   699  000C74  B680               	btfsc	3968,3,c	;volatile
   700  000C76  D004               	goto	l793
   701  000C78  5004               	movf	read_keypad@col,w,c
   702  000C7A  0F2A               	addlw	42
   703  000C7C  6E03               	movwf	read_keypad@key,c
   704  000C7E  D000               	goto	l793
   705  000C80                     l793:
   706                           
   707                           ;main.c: 87: if (key != '\0') break;
   708  000C80  5003               	movf	read_keypad@key,w,c
   709  000C82  A4D8               	btfss	status,2,c
   710  000C84  D006               	goto	l801
   711  000C86  D001               	goto	l797
   712  000C88  D004               	goto	l801
   713  000C8A                     l797:
   714  000C8A  4A04               	infsnz	read_keypad@col,f,c
   715  000C8C  2A05               	incf	read_keypad@col+1,f,c
   716  000C8E  D7B5               	goto	l769
   717  000C90  D000               	goto	l801
   718  000C92                     l801:
   719                           
   720                           ;main.c: 88: }
   721                           ;main.c: 89: return key;
   722  000C92  5003               	movf	read_keypad@key,w,c
   723  000C94  D000               	goto	l46
   724  000C96                     l46:
   725  000C96  0012               	return		;funcret
   726  000C98                     __end_of_read_keypad:
   727                           	opt stack 0
   728                           tblptru	equ	0xFF8
   729                           tblptrh	equ	0xFF7
   730                           wreg	equ	0xFE8
   731                           status	equ	0xFD8
   732                           
   733 ;; *************** function _lcd_write_string *****************
   734 ;; Defined at:
   735 ;;		line 45 in file "lcd.c"
   736 ;; Parameters:    Size  Location     Type
   737 ;;  str             2    3[COMRAM] PTR const unsigned char 
   738 ;;		 -> STR_1(8), 
   739 ;; Auto vars:     Size  Location     Type
   740 ;;		None
   741 ;; Return value:  Size  Location     Type
   742 ;;		None               void
   743 ;; Registers used:
   744 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   745 ;; Tracked objects:
   746 ;;		On entry : 0/0
   747 ;;		On exit  : 0/0
   748 ;;		Unchanged: 0/0
   749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   750 ;;      Params:         2       0       0       0       0       0       0       0       0
   751 ;;      Locals:         0       0       0       0       0       0       0       0       0
   752 ;;      Temps:          0       0       0       0       0       0       0       0       0
   753 ;;      Totals:         2       0       0       0       0       0       0       0       0
   754 ;;Total ram usage:        2 bytes
   755 ;; Hardware stack levels used:    1
   756 ;; Hardware stack levels required when called:    2
   757 ;; This function calls:
   758 ;;		_lcd_data
   759 ;; This function is called by:
   760 ;;		_main
   761 ;; This function uses a non-reentrant model
   762 ;;
   763                           
   764                           	psect	text3
   765  000D0E                     __ptext3:
   766                           	opt stack 0
   767  000D0E                     _lcd_write_string:
   768                           	opt stack 28
   769                           
   770                           ;lcd.c: 46: while (*str) {
   771                           
   772                           ;incstack = 0
   773  000D0E  D00B               	goto	l1031
   774  000D10                     l1027:
   775                           
   776                           ;lcd.c: 47: lcd_data(*str++);
   777  000D10  C004  FFF6         	movff	lcd_write_string@str,tblptrl
   778  000D14  C005  FFF7         	movff	lcd_write_string@str+1,tblptrh
   779  000D18                     	if	0	;tblptru may be non-zero
   780  000D18                     	endif
   781  000D18                     	if	0	;tblptru may be non-zero
   782  000D18                     	endif
   783  000D18  0008               	tblrd		*
   784  000D1A  50F5               	movf	tablat,w,c
   785  000D1C  EC95  F004         	call	_lcd_data
   786  000D20  4A04               	infsnz	lcd_write_string@str,f,c
   787  000D22  2A05               	incf	lcd_write_string@str+1,f,c
   788  000D24  D000               	goto	l1031
   789  000D26                     l1031:
   790  000D26  C004  FFF6         	movff	lcd_write_string@str,tblptrl
   791  000D2A  C005  FFF7         	movff	lcd_write_string@str+1,tblptrh
   792  000D2E                     	if	0	;tblptru may be non-zero
   793  000D2E                     	endif
   794  000D2E                     	if	0	;tblptru may be non-zero
   795  000D2E                     	endif
   796  000D2E  0008               	tblrd		*
   797  000D30  50F5               	movf	tablat,w,c
   798  000D32  0900               	iorlw	0
   799  000D34  A4D8               	btfss	status,2,c
   800  000D36  D7EC               	goto	l1027
   801  000D38  0012               	return		;funcret
   802  000D3A                     __end_of_lcd_write_string:
   803                           	opt stack 0
   804                           tblptru	equ	0xFF8
   805                           tblptrh	equ	0xFF7
   806                           tblptrl	equ	0xFF6
   807                           tablat	equ	0xFF5
   808                           wreg	equ	0xFE8
   809                           status	equ	0xFD8
   810                           
   811 ;; *************** function _lcd_write_char *****************
   812 ;; Defined at:
   813 ;;		line 51 in file "lcd.c"
   814 ;; Parameters:    Size  Location     Type
   815 ;;  c               1    wreg     unsigned char 
   816 ;; Auto vars:     Size  Location     Type
   817 ;;  c               1    3[COMRAM] unsigned char 
   818 ;; Return value:  Size  Location     Type
   819 ;;		None               void
   820 ;; Registers used:
   821 ;;		wreg, status,2, status,0, cstack
   822 ;; Tracked objects:
   823 ;;		On entry : 0/0
   824 ;;		On exit  : 0/0
   825 ;;		Unchanged: 0/0
   826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   827 ;;      Params:         0       0       0       0       0       0       0       0       0
   828 ;;      Locals:         1       0       0       0       0       0       0       0       0
   829 ;;      Temps:          0       0       0       0       0       0       0       0       0
   830 ;;      Totals:         1       0       0       0       0       0       0       0       0
   831 ;;Total ram usage:        1 bytes
   832 ;; Hardware stack levels used:    1
   833 ;; Hardware stack levels required when called:    2
   834 ;; This function calls:
   835 ;;		_lcd_data
   836 ;; This function is called by:
   837 ;;		_main
   838 ;; This function uses a non-reentrant model
   839 ;;
   840                           
   841                           	psect	text4
   842  000D88                     __ptext4:
   843                           	opt stack 0
   844  000D88                     _lcd_write_char:
   845                           	opt stack 28
   846                           
   847                           ;incstack = 0
   848                           ;lcd_write_char@c stored from wreg
   849  000D88  6E04               	movwf	lcd_write_char@c,c
   850                           
   851                           ;lcd.c: 52: lcd_data(c);
   852  000D8A  5004               	movf	lcd_write_char@c,w,c
   853  000D8C  EC95  F004         	call	_lcd_data
   854  000D90  0012               	return		;funcret
   855  000D92                     __end_of_lcd_write_char:
   856                           	opt stack 0
   857                           tblptru	equ	0xFF8
   858                           tblptrh	equ	0xFF7
   859                           tblptrl	equ	0xFF6
   860                           tablat	equ	0xFF5
   861                           wreg	equ	0xFE8
   862                           status	equ	0xFD8
   863                           
   864 ;; *************** function _lcd_data *****************
   865 ;; Defined at:
   866 ;;		line 69 in file "lcd.c"
   867 ;; Parameters:    Size  Location     Type
   868 ;;  data            1    wreg     unsigned char 
   869 ;; Auto vars:     Size  Location     Type
   870 ;;  data            1    2[COMRAM] unsigned char 
   871 ;; Return value:  Size  Location     Type
   872 ;;		None               void
   873 ;; Registers used:
   874 ;;		wreg, status,2, status,0, cstack
   875 ;; Tracked objects:
   876 ;;		On entry : 0/0
   877 ;;		On exit  : 0/0
   878 ;;		Unchanged: 0/0
   879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   880 ;;      Params:         0       0       0       0       0       0       0       0       0
   881 ;;      Locals:         1       0       0       0       0       0       0       0       0
   882 ;;      Temps:          2       0       0       0       0       0       0       0       0
   883 ;;      Totals:         3       0       0       0       0       0       0       0       0
   884 ;;Total ram usage:        3 bytes
   885 ;; Hardware stack levels used:    1
   886 ;; Hardware stack levels required when called:    1
   887 ;; This function calls:
   888 ;;		_lcd_strobe
   889 ;; This function is called by:
   890 ;;		_lcd_write_string
   891 ;;		_lcd_write_char
   892 ;; This function uses a non-reentrant model
   893 ;;
   894                           
   895                           	psect	text5
   896  00092A                     __ptext5:
   897                           	opt stack 0
   898  00092A                     _lcd_data:
   899                           	opt stack 28
   900                           
   901                           ;incstack = 0
   902                           ;lcd_data@data stored from wreg
   903  00092A  6E03               	movwf	lcd_data@data,c
   904                           
   905                           ;lcd.c: 70: PORTCbits.RC0 = 1;
   906  00092C  8082               	bsf	3970,0,c	;volatile
   907                           
   908                           ;lcd.c: 71: PORTCbits.RC2 = (data >> 4) & 1;
   909  00092E  C003  F001         	movff	lcd_data@data,??_lcd_data
   910  000932  3A01               	swapf	??_lcd_data,f,c
   911  000934  0E0F               	movlw	15
   912  000936  1601               	andwf	??_lcd_data,f,c
   913  000938  0E01               	movlw	1
   914  00093A  1601               	andwf	??_lcd_data,f,c
   915  00093C  4601               	rlncf	??_lcd_data,f,c
   916  00093E  4601               	rlncf	??_lcd_data,f,c
   917  000940  5082               	movf	3970,w,c	;volatile
   918  000942  1801               	xorwf	??_lcd_data,w,c
   919  000944  0BFB               	andlw	-5
   920  000946  1801               	xorwf	??_lcd_data,w,c
   921  000948  6E82               	movwf	3970,c	;volatile
   922                           
   923                           ;lcd.c: 72: PORTCbits.RC3 = (data >> 5) & 1;
   924  00094A  C003  F001         	movff	lcd_data@data,??_lcd_data
   925  00094E  0E05               	movlw	5
   926  000950  6E02               	movwf	(??_lcd_data+1)& (0+255),c
   927  000952                     u45:
   928  000952  90D8               	bcf	status,0,c
   929  000954  3201               	rrcf	??_lcd_data,f,c
   930  000956  2E02               	decfsz	(??_lcd_data+1)& (0+255),f,c
   931  000958  D7FC               	goto	u45
   932  00095A  0E01               	movlw	1
   933  00095C  1601               	andwf	??_lcd_data,f,c
   934  00095E  4601               	rlncf	??_lcd_data,f,c
   935  000960  4601               	rlncf	??_lcd_data,f,c
   936  000962  4601               	rlncf	??_lcd_data,f,c
   937  000964  5082               	movf	3970,w,c	;volatile
   938  000966  1801               	xorwf	??_lcd_data,w,c
   939  000968  0BF7               	andlw	-9
   940  00096A  1801               	xorwf	??_lcd_data,w,c
   941  00096C  6E82               	movwf	3970,c	;volatile
   942                           
   943                           ;lcd.c: 73: PORTCbits.RC4 = (data >> 6) & 1;
   944  00096E  C003  F001         	movff	lcd_data@data,??_lcd_data
   945  000972  0E06               	movlw	6
   946  000974  6E02               	movwf	(??_lcd_data+1)& (0+255),c
   947  000976                     u55:
   948  000976  90D8               	bcf	status,0,c
   949  000978  3201               	rrcf	??_lcd_data,f,c
   950  00097A  2E02               	decfsz	(??_lcd_data+1)& (0+255),f,c
   951  00097C  D7FC               	goto	u55
   952  00097E  0E01               	movlw	1
   953  000980  1601               	andwf	??_lcd_data,f,c
   954  000982  3A01               	swapf	??_lcd_data,f,c
   955  000984  5082               	movf	3970,w,c	;volatile
   956  000986  1801               	xorwf	??_lcd_data,w,c
   957  000988  0BEF               	andlw	-17
   958  00098A  1801               	xorwf	??_lcd_data,w,c
   959  00098C  6E82               	movwf	3970,c	;volatile
   960                           
   961                           ;lcd.c: 74: PORTCbits.RC5 = (data >> 7) & 1;
   962  00098E  6A01               	clrf	??_lcd_data& (0+255),c
   963  000990  AE03               	btfss	lcd_data@data,7,c
   964  000992  D001               	bra	u65
   965  000994  2A01               	incf	??_lcd_data& (0+255),f,c
   966  000996                     u65:
   967  000996  0E01               	movlw	1
   968  000998  1601               	andwf	??_lcd_data,f,c
   969  00099A  3A01               	swapf	??_lcd_data,f,c
   970  00099C  4601               	rlncf	??_lcd_data,f,c
   971  00099E  5082               	movf	3970,w,c	;volatile
   972  0009A0  1801               	xorwf	??_lcd_data,w,c
   973  0009A2  0BDF               	andlw	-33
   974  0009A4  1801               	xorwf	??_lcd_data,w,c
   975  0009A6  6E82               	movwf	3970,c	;volatile
   976                           
   977                           ;lcd.c: 75: lcd_strobe();
   978  0009A8  ECC9  F006         	call	_lcd_strobe	;wreg free
   979                           
   980                           ;lcd.c: 76: PORTCbits.RC2 = data & 1;
   981  0009AC  C003  F001         	movff	lcd_data@data,??_lcd_data
   982  0009B0  0E01               	movlw	1
   983  0009B2  1601               	andwf	??_lcd_data,f,c
   984  0009B4  4601               	rlncf	??_lcd_data,f,c
   985  0009B6  4601               	rlncf	??_lcd_data,f,c
   986  0009B8  5082               	movf	3970,w,c	;volatile
   987  0009BA  1801               	xorwf	??_lcd_data,w,c
   988  0009BC  0BFB               	andlw	-5
   989  0009BE  1801               	xorwf	??_lcd_data,w,c
   990  0009C0  6E82               	movwf	3970,c	;volatile
   991                           
   992                           ;lcd.c: 77: PORTCbits.RC3 = (data >> 1) & 1;
   993  0009C2  C003  F001         	movff	lcd_data@data,??_lcd_data
   994  0009C6  90D8               	bcf	status,0,c
   995  0009C8  3201               	rrcf	??_lcd_data,f,c
   996  0009CA  0E01               	movlw	1
   997  0009CC  1601               	andwf	??_lcd_data,f,c
   998  0009CE  4601               	rlncf	??_lcd_data,f,c
   999  0009D0  4601               	rlncf	??_lcd_data,f,c
  1000  0009D2  4601               	rlncf	??_lcd_data,f,c
  1001  0009D4  5082               	movf	3970,w,c	;volatile
  1002  0009D6  1801               	xorwf	??_lcd_data,w,c
  1003  0009D8  0BF7               	andlw	-9
  1004  0009DA  1801               	xorwf	??_lcd_data,w,c
  1005  0009DC  6E82               	movwf	3970,c	;volatile
  1006                           
  1007                           ;lcd.c: 78: PORTCbits.RC4 = (data >> 2) & 1;
  1008  0009DE  C003  F001         	movff	lcd_data@data,??_lcd_data
  1009  0009E2  90D8               	bcf	status,0,c
  1010  0009E4  3201               	rrcf	??_lcd_data,f,c
  1011  0009E6  90D8               	bcf	status,0,c
  1012  0009E8  3201               	rrcf	??_lcd_data,f,c
  1013  0009EA  0E01               	movlw	1
  1014  0009EC  1601               	andwf	??_lcd_data,f,c
  1015  0009EE  3A01               	swapf	??_lcd_data,f,c
  1016  0009F0  5082               	movf	3970,w,c	;volatile
  1017  0009F2  1801               	xorwf	??_lcd_data,w,c
  1018  0009F4  0BEF               	andlw	-17
  1019  0009F6  1801               	xorwf	??_lcd_data,w,c
  1020  0009F8  6E82               	movwf	3970,c	;volatile
  1021                           
  1022                           ;lcd.c: 79: PORTCbits.RC5 = (data >> 3) & 1;
  1023  0009FA  C003  F001         	movff	lcd_data@data,??_lcd_data
  1024  0009FE  90D8               	bcf	status,0,c
  1025  000A00  3201               	rrcf	??_lcd_data,f,c
  1026  000A02  90D8               	bcf	status,0,c
  1027  000A04  3201               	rrcf	??_lcd_data,f,c
  1028  000A06  90D8               	bcf	status,0,c
  1029  000A08  3201               	rrcf	??_lcd_data,f,c
  1030  000A0A  0E01               	movlw	1
  1031  000A0C  1601               	andwf	??_lcd_data,f,c
  1032  000A0E  3A01               	swapf	??_lcd_data,f,c
  1033  000A10  4601               	rlncf	??_lcd_data,f,c
  1034  000A12  5082               	movf	3970,w,c	;volatile
  1035  000A14  1801               	xorwf	??_lcd_data,w,c
  1036  000A16  0BDF               	andlw	-33
  1037  000A18  1801               	xorwf	??_lcd_data,w,c
  1038  000A1A  6E82               	movwf	3970,c	;volatile
  1039                           
  1040                           ;lcd.c: 80: lcd_strobe();
  1041  000A1C  ECC9  F006         	call	_lcd_strobe	;wreg free
  1042  000A20  0012               	return		;funcret
  1043  000A22                     __end_of_lcd_data:
  1044                           	opt stack 0
  1045                           tblptru	equ	0xFF8
  1046                           tblptrh	equ	0xFF7
  1047                           tblptrl	equ	0xFF6
  1048                           tablat	equ	0xFF5
  1049                           wreg	equ	0xFE8
  1050                           status	equ	0xFD8
  1051                           
  1052 ;; *************** function _lcd_set_cursor *****************
  1053 ;; Defined at:
  1054 ;;		line 35 in file "lcd.c"
  1055 ;; Parameters:    Size  Location     Type
  1056 ;;  row             2    3[COMRAM] int 
  1057 ;;  col             2    5[COMRAM] int 
  1058 ;; Auto vars:     Size  Location     Type
  1059 ;;  address         2    7[COMRAM] int 
  1060 ;; Return value:  Size  Location     Type
  1061 ;;		None               void
  1062 ;; Registers used:
  1063 ;;		wreg, status,2, status,0, cstack
  1064 ;; Tracked objects:
  1065 ;;		On entry : 0/0
  1066 ;;		On exit  : 0/0
  1067 ;;		Unchanged: 0/0
  1068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1069 ;;      Params:         4       0       0       0       0       0       0       0       0
  1070 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1071 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1072 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1073 ;;Total ram usage:        6 bytes
  1074 ;; Hardware stack levels used:    1
  1075 ;; Hardware stack levels required when called:    2
  1076 ;; This function calls:
  1077 ;;		_lcd_command
  1078 ;; This function is called by:
  1079 ;;		_main
  1080 ;; This function uses a non-reentrant model
  1081 ;;
  1082                           
  1083                           	psect	text6
  1084  000CDA                     __ptext6:
  1085                           	opt stack 0
  1086  000CDA                     _lcd_set_cursor:
  1087                           	opt stack 28
  1088                           
  1089                           ;lcd.c: 36: int address = 0;
  1090                           
  1091                           ;incstack = 0
  1092  000CDA  0E00               	movlw	0
  1093  000CDC  6E09               	movwf	lcd_set_cursor@address+1,c
  1094  000CDE  0E00               	movlw	0
  1095  000CE0  6E08               	movwf	lcd_set_cursor@address,c
  1096                           
  1097                           ;lcd.c: 37: if (row == 1) {
  1098  000CE2  0404               	decf	lcd_set_cursor@row,w,c
  1099  000CE4  1005               	iorwf	lcd_set_cursor@row+1,w,c
  1100  000CE6  A4D8               	btfss	status,2,c
  1101  000CE8  D002               	goto	l1019
  1102                           
  1103                           ;lcd.c: 38: address = 0x80 + col - 1;
  1104  000CEA  0E7F               	movlw	127
  1105  000CEC  D006               	goto	L2
  1106  000CEE                     l1019:
  1107  000CEE  0E02               	movlw	2
  1108  000CF0  1804               	xorwf	lcd_set_cursor@row,w,c
  1109  000CF2  1005               	iorwf	lcd_set_cursor@row+1,w,c
  1110  000CF4  A4D8               	btfss	status,2,c
  1111  000CF6  D007               	goto	l1023
  1112                           
  1113                           ;lcd.c: 40: address = 0xC0 + col - 1;
  1114  000CF8  0EBF               	movlw	191
  1115  000CFA                     L2:
  1116  000CFA  2406               	addwf	lcd_set_cursor@col,w,c
  1117  000CFC  6E08               	movwf	lcd_set_cursor@address,c
  1118  000CFE  0E00               	movlw	0
  1119  000D00  2007               	addwfc	lcd_set_cursor@col+1,w,c
  1120  000D02  6E09               	movwf	lcd_set_cursor@address+1,c
  1121  000D04  D000               	goto	l1023
  1122  000D06                     l1023:
  1123                           
  1124                           ;lcd.c: 41: }
  1125                           ;lcd.c: 42: lcd_command(address);
  1126  000D06  5008               	movf	lcd_set_cursor@address,w,c
  1127  000D08  EC11  F005         	call	_lcd_command
  1128  000D0C  0012               	return		;funcret
  1129  000D0E                     __end_of_lcd_set_cursor:
  1130                           	opt stack 0
  1131                           tblptru	equ	0xFF8
  1132                           tblptrh	equ	0xFF7
  1133                           tblptrl	equ	0xFF6
  1134                           tablat	equ	0xFF5
  1135                           wreg	equ	0xFE8
  1136                           status	equ	0xFD8
  1137                           
  1138 ;; *************** function _lcd_init *****************
  1139 ;; Defined at:
  1140 ;;		line 18 in file "lcd.c"
  1141 ;; Parameters:    Size  Location     Type
  1142 ;;		None
  1143 ;; Auto vars:     Size  Location     Type
  1144 ;;		None
  1145 ;; Return value:  Size  Location     Type
  1146 ;;		None               void
  1147 ;; Registers used:
  1148 ;;		wreg, status,2, status,0, cstack
  1149 ;; Tracked objects:
  1150 ;;		On entry : 0/0
  1151 ;;		On exit  : 0/0
  1152 ;;		Unchanged: 0/0
  1153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1154 ;;      Params:         0       0       0       0       0       0       0       0       0
  1155 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1156 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1157 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1158 ;;Total ram usage:        1 bytes
  1159 ;; Hardware stack levels used:    1
  1160 ;; Hardware stack levels required when called:    2
  1161 ;; This function calls:
  1162 ;;		_lcd_command
  1163 ;; This function is called by:
  1164 ;;		_main
  1165 ;; This function uses a non-reentrant model
  1166 ;;
  1167                           
  1168                           	psect	text7
  1169  000C98                     __ptext7:
  1170                           	opt stack 0
  1171  000C98                     _lcd_init:
  1172                           	opt stack 28
  1173                           
  1174                           ;lcd.c: 19: TRISC = 0x00;
  1175                           
  1176                           ;incstack = 0
  1177  000C98  0E00               	movlw	0
  1178  000C9A  6E94               	movwf	3988,c	;volatile
  1179                           
  1180                           ;lcd.c: 20: _delay((unsigned long)((20)*(8000000/4000.0)));
  1181  000C9C  0E34               	movlw	52
  1182  000C9E  6E04               	movwf	??_lcd_init& (0+255),c
  1183  000CA0  0EF2               	movlw	242
  1184  000CA2                     u457:
  1185  000CA2  2EE8               	decfsz	wreg,f,c
  1186  000CA4  D7FE               	goto	u457
  1187  000CA6  2E04               	decfsz	??_lcd_init& (0+255),f,c
  1188  000CA8  D7FC               	goto	u457
  1189                           
  1190                           ;lcd.c: 22: lcd_command(0x02);
  1191  000CAA  0E02               	movlw	2
  1192  000CAC  EC11  F005         	call	_lcd_command
  1193                           
  1194                           ;lcd.c: 23: lcd_command(0x28);
  1195  000CB0  0E28               	movlw	40
  1196  000CB2  EC11  F005         	call	_lcd_command
  1197                           
  1198                           ;lcd.c: 24: lcd_command(0x0C);
  1199  000CB6  0E0C               	movlw	12
  1200  000CB8  EC11  F005         	call	_lcd_command
  1201                           
  1202                           ;lcd.c: 25: lcd_command(0x06);
  1203  000CBC  0E06               	movlw	6
  1204  000CBE  EC11  F005         	call	_lcd_command
  1205                           
  1206                           ;lcd.c: 26: lcd_command(0x01);
  1207  000CC2  0E01               	movlw	1
  1208  000CC4  EC11  F005         	call	_lcd_command
  1209                           
  1210                           ;lcd.c: 27: _delay((unsigned long)((2)*(8000000/4000.0)));
  1211  000CC8  0E06               	movlw	6
  1212  000CCA  6E04               	movwf	??_lcd_init& (0+255),c
  1213  000CCC  0E30               	movlw	48
  1214  000CCE                     u467:
  1215  000CCE  2EE8               	decfsz	wreg,f,c
  1216  000CD0  D7FE               	goto	u467
  1217  000CD2  2E04               	decfsz	??_lcd_init& (0+255),f,c
  1218  000CD4  D7FC               	goto	u467
  1219  000CD6  D000               	nop2	
  1220  000CD8  0012               	return		;funcret
  1221  000CDA                     __end_of_lcd_init:
  1222                           	opt stack 0
  1223                           tblptru	equ	0xFF8
  1224                           tblptrh	equ	0xFF7
  1225                           tblptrl	equ	0xFF6
  1226                           tablat	equ	0xFF5
  1227                           wreg	equ	0xFE8
  1228                           status	equ	0xFD8
  1229                           
  1230 ;; *************** function _lcd_clear *****************
  1231 ;; Defined at:
  1232 ;;		line 30 in file "lcd.c"
  1233 ;; Parameters:    Size  Location     Type
  1234 ;;		None
  1235 ;; Auto vars:     Size  Location     Type
  1236 ;;		None
  1237 ;; Return value:  Size  Location     Type
  1238 ;;		None               void
  1239 ;; Registers used:
  1240 ;;		wreg, status,2, status,0, cstack
  1241 ;; Tracked objects:
  1242 ;;		On entry : 0/0
  1243 ;;		On exit  : 0/0
  1244 ;;		Unchanged: 0/0
  1245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1246 ;;      Params:         0       0       0       0       0       0       0       0       0
  1247 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1248 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1249 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1250 ;;Total ram usage:        1 bytes
  1251 ;; Hardware stack levels used:    1
  1252 ;; Hardware stack levels required when called:    2
  1253 ;; This function calls:
  1254 ;;		_lcd_command
  1255 ;; This function is called by:
  1256 ;;		_main
  1257 ;; This function uses a non-reentrant model
  1258 ;;
  1259                           
  1260                           	psect	text8
  1261  000D62                     __ptext8:
  1262                           	opt stack 0
  1263  000D62                     _lcd_clear:
  1264                           	opt stack 28
  1265                           
  1266                           ;lcd.c: 31: lcd_command(0x01);
  1267                           
  1268                           ;incstack = 0
  1269  000D62  0E01               	movlw	1
  1270  000D64  EC11  F005         	call	_lcd_command
  1271                           
  1272                           ;lcd.c: 32: _delay((unsigned long)((2)*(8000000/4000.0)));
  1273  000D68  0E06               	movlw	6
  1274  000D6A  6E04               	movwf	??_lcd_clear& (0+255),c
  1275  000D6C  0E30               	movlw	48
  1276  000D6E                     u477:
  1277  000D6E  2EE8               	decfsz	wreg,f,c
  1278  000D70  D7FE               	goto	u477
  1279  000D72  2E04               	decfsz	??_lcd_clear& (0+255),f,c
  1280  000D74  D7FC               	goto	u477
  1281  000D76  D000               	nop2	
  1282  000D78  0012               	return		;funcret
  1283  000D7A                     __end_of_lcd_clear:
  1284                           	opt stack 0
  1285                           tblptru	equ	0xFF8
  1286                           tblptrh	equ	0xFF7
  1287                           tblptrl	equ	0xFF6
  1288                           tablat	equ	0xFF5
  1289                           wreg	equ	0xFE8
  1290                           status	equ	0xFD8
  1291                           
  1292 ;; *************** function _lcd_command *****************
  1293 ;; Defined at:
  1294 ;;		line 55 in file "lcd.c"
  1295 ;; Parameters:    Size  Location     Type
  1296 ;;  cmd             1    wreg     unsigned char 
  1297 ;; Auto vars:     Size  Location     Type
  1298 ;;  cmd             1    2[COMRAM] unsigned char 
  1299 ;; Return value:  Size  Location     Type
  1300 ;;		None               void
  1301 ;; Registers used:
  1302 ;;		wreg, status,2, status,0, cstack
  1303 ;; Tracked objects:
  1304 ;;		On entry : 0/0
  1305 ;;		On exit  : 0/0
  1306 ;;		Unchanged: 0/0
  1307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1308 ;;      Params:         0       0       0       0       0       0       0       0       0
  1309 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1310 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1311 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1312 ;;Total ram usage:        3 bytes
  1313 ;; Hardware stack levels used:    1
  1314 ;; Hardware stack levels required when called:    1
  1315 ;; This function calls:
  1316 ;;		_lcd_strobe
  1317 ;; This function is called by:
  1318 ;;		_lcd_init
  1319 ;;		_lcd_clear
  1320 ;;		_lcd_set_cursor
  1321 ;; This function uses a non-reentrant model
  1322 ;;
  1323                           
  1324                           	psect	text9
  1325  000A22                     __ptext9:
  1326                           	opt stack 0
  1327  000A22                     _lcd_command:
  1328                           	opt stack 28
  1329                           
  1330                           ;incstack = 0
  1331                           ;lcd_command@cmd stored from wreg
  1332  000A22  6E03               	movwf	lcd_command@cmd,c
  1333                           
  1334                           ;lcd.c: 56: PORTCbits.RC0 = 0;
  1335  000A24  9082               	bcf	3970,0,c	;volatile
  1336                           
  1337                           ;lcd.c: 57: PORTCbits.RC2 = (cmd >> 4) & 1;
  1338  000A26  C003  F001         	movff	lcd_command@cmd,??_lcd_command
  1339  000A2A  3A01               	swapf	??_lcd_command,f,c
  1340  000A2C  0E0F               	movlw	15
  1341  000A2E  1601               	andwf	??_lcd_command,f,c
  1342  000A30  0E01               	movlw	1
  1343  000A32  1601               	andwf	??_lcd_command,f,c
  1344  000A34  4601               	rlncf	??_lcd_command,f,c
  1345  000A36  4601               	rlncf	??_lcd_command,f,c
  1346  000A38  5082               	movf	3970,w,c	;volatile
  1347  000A3A  1801               	xorwf	??_lcd_command,w,c
  1348  000A3C  0BFB               	andlw	-5
  1349  000A3E  1801               	xorwf	??_lcd_command,w,c
  1350  000A40  6E82               	movwf	3970,c	;volatile
  1351                           
  1352                           ;lcd.c: 58: PORTCbits.RC3 = (cmd >> 5) & 1;
  1353  000A42  C003  F001         	movff	lcd_command@cmd,??_lcd_command
  1354  000A46  0E05               	movlw	5
  1355  000A48  6E02               	movwf	(??_lcd_command+1)& (0+255),c
  1356  000A4A                     u15:
  1357  000A4A  90D8               	bcf	status,0,c
  1358  000A4C  3201               	rrcf	??_lcd_command,f,c
  1359  000A4E  2E02               	decfsz	(??_lcd_command+1)& (0+255),f,c
  1360  000A50  D7FC               	goto	u15
  1361  000A52  0E01               	movlw	1
  1362  000A54  1601               	andwf	??_lcd_command,f,c
  1363  000A56  4601               	rlncf	??_lcd_command,f,c
  1364  000A58  4601               	rlncf	??_lcd_command,f,c
  1365  000A5A  4601               	rlncf	??_lcd_command,f,c
  1366  000A5C  5082               	movf	3970,w,c	;volatile
  1367  000A5E  1801               	xorwf	??_lcd_command,w,c
  1368  000A60  0BF7               	andlw	-9
  1369  000A62  1801               	xorwf	??_lcd_command,w,c
  1370  000A64  6E82               	movwf	3970,c	;volatile
  1371                           
  1372                           ;lcd.c: 59: PORTCbits.RC4 = (cmd >> 6) & 1;
  1373  000A66  C003  F001         	movff	lcd_command@cmd,??_lcd_command
  1374  000A6A  0E06               	movlw	6
  1375  000A6C  6E02               	movwf	(??_lcd_command+1)& (0+255),c
  1376  000A6E                     u25:
  1377  000A6E  90D8               	bcf	status,0,c
  1378  000A70  3201               	rrcf	??_lcd_command,f,c
  1379  000A72  2E02               	decfsz	(??_lcd_command+1)& (0+255),f,c
  1380  000A74  D7FC               	goto	u25
  1381  000A76  0E01               	movlw	1
  1382  000A78  1601               	andwf	??_lcd_command,f,c
  1383  000A7A  3A01               	swapf	??_lcd_command,f,c
  1384  000A7C  5082               	movf	3970,w,c	;volatile
  1385  000A7E  1801               	xorwf	??_lcd_command,w,c
  1386  000A80  0BEF               	andlw	-17
  1387  000A82  1801               	xorwf	??_lcd_command,w,c
  1388  000A84  6E82               	movwf	3970,c	;volatile
  1389                           
  1390                           ;lcd.c: 60: PORTCbits.RC5 = (cmd >> 7) & 1;
  1391  000A86  6A01               	clrf	??_lcd_command& (0+255),c
  1392  000A88  AE03               	btfss	lcd_command@cmd,7,c
  1393  000A8A  D001               	bra	u35
  1394  000A8C  2A01               	incf	??_lcd_command& (0+255),f,c
  1395  000A8E                     u35:
  1396  000A8E  0E01               	movlw	1
  1397  000A90  1601               	andwf	??_lcd_command,f,c
  1398  000A92  3A01               	swapf	??_lcd_command,f,c
  1399  000A94  4601               	rlncf	??_lcd_command,f,c
  1400  000A96  5082               	movf	3970,w,c	;volatile
  1401  000A98  1801               	xorwf	??_lcd_command,w,c
  1402  000A9A  0BDF               	andlw	-33
  1403  000A9C  1801               	xorwf	??_lcd_command,w,c
  1404  000A9E  6E82               	movwf	3970,c	;volatile
  1405                           
  1406                           ;lcd.c: 61: lcd_strobe();
  1407  000AA0  ECC9  F006         	call	_lcd_strobe	;wreg free
  1408                           
  1409                           ;lcd.c: 62: PORTCbits.RC2 = cmd & 1;
  1410  000AA4  C003  F001         	movff	lcd_command@cmd,??_lcd_command
  1411  000AA8  0E01               	movlw	1
  1412  000AAA  1601               	andwf	??_lcd_command,f,c
  1413  000AAC  4601               	rlncf	??_lcd_command,f,c
  1414  000AAE  4601               	rlncf	??_lcd_command,f,c
  1415  000AB0  5082               	movf	3970,w,c	;volatile
  1416  000AB2  1801               	xorwf	??_lcd_command,w,c
  1417  000AB4  0BFB               	andlw	-5
  1418  000AB6  1801               	xorwf	??_lcd_command,w,c
  1419  000AB8  6E82               	movwf	3970,c	;volatile
  1420                           
  1421                           ;lcd.c: 63: PORTCbits.RC3 = (cmd >> 1) & 1;
  1422  000ABA  C003  F001         	movff	lcd_command@cmd,??_lcd_command
  1423  000ABE  90D8               	bcf	status,0,c
  1424  000AC0  3201               	rrcf	??_lcd_command,f,c
  1425  000AC2  0E01               	movlw	1
  1426  000AC4  1601               	andwf	??_lcd_command,f,c
  1427  000AC6  4601               	rlncf	??_lcd_command,f,c
  1428  000AC8  4601               	rlncf	??_lcd_command,f,c
  1429  000ACA  4601               	rlncf	??_lcd_command,f,c
  1430  000ACC  5082               	movf	3970,w,c	;volatile
  1431  000ACE  1801               	xorwf	??_lcd_command,w,c
  1432  000AD0  0BF7               	andlw	-9
  1433  000AD2  1801               	xorwf	??_lcd_command,w,c
  1434  000AD4  6E82               	movwf	3970,c	;volatile
  1435                           
  1436                           ;lcd.c: 64: PORTCbits.RC4 = (cmd >> 2) & 1;
  1437  000AD6  C003  F001         	movff	lcd_command@cmd,??_lcd_command
  1438  000ADA  90D8               	bcf	status,0,c
  1439  000ADC  3201               	rrcf	??_lcd_command,f,c
  1440  000ADE  90D8               	bcf	status,0,c
  1441  000AE0  3201               	rrcf	??_lcd_command,f,c
  1442  000AE2  0E01               	movlw	1
  1443  000AE4  1601               	andwf	??_lcd_command,f,c
  1444  000AE6  3A01               	swapf	??_lcd_command,f,c
  1445  000AE8  5082               	movf	3970,w,c	;volatile
  1446  000AEA  1801               	xorwf	??_lcd_command,w,c
  1447  000AEC  0BEF               	andlw	-17
  1448  000AEE  1801               	xorwf	??_lcd_command,w,c
  1449  000AF0  6E82               	movwf	3970,c	;volatile
  1450                           
  1451                           ;lcd.c: 65: PORTCbits.RC5 = (cmd >> 3) & 1;
  1452  000AF2  C003  F001         	movff	lcd_command@cmd,??_lcd_command
  1453  000AF6  90D8               	bcf	status,0,c
  1454  000AF8  3201               	rrcf	??_lcd_command,f,c
  1455  000AFA  90D8               	bcf	status,0,c
  1456  000AFC  3201               	rrcf	??_lcd_command,f,c
  1457  000AFE  90D8               	bcf	status,0,c
  1458  000B00  3201               	rrcf	??_lcd_command,f,c
  1459  000B02  0E01               	movlw	1
  1460  000B04  1601               	andwf	??_lcd_command,f,c
  1461  000B06  3A01               	swapf	??_lcd_command,f,c
  1462  000B08  4601               	rlncf	??_lcd_command,f,c
  1463  000B0A  5082               	movf	3970,w,c	;volatile
  1464  000B0C  1801               	xorwf	??_lcd_command,w,c
  1465  000B0E  0BDF               	andlw	-33
  1466  000B10  1801               	xorwf	??_lcd_command,w,c
  1467  000B12  6E82               	movwf	3970,c	;volatile
  1468                           
  1469                           ;lcd.c: 66: lcd_strobe();
  1470  000B14  ECC9  F006         	call	_lcd_strobe	;wreg free
  1471  000B18  0012               	return		;funcret
  1472  000B1A                     __end_of_lcd_command:
  1473                           	opt stack 0
  1474                           tblptru	equ	0xFF8
  1475                           tblptrh	equ	0xFF7
  1476                           tblptrl	equ	0xFF6
  1477                           tablat	equ	0xFF5
  1478                           wreg	equ	0xFE8
  1479                           status	equ	0xFD8
  1480                           
  1481 ;; *************** function _lcd_strobe *****************
  1482 ;; Defined at:
  1483 ;;		line 83 in file "lcd.c"
  1484 ;; Parameters:    Size  Location     Type
  1485 ;;		None
  1486 ;; Auto vars:     Size  Location     Type
  1487 ;;		None
  1488 ;; Return value:  Size  Location     Type
  1489 ;;		None               void
  1490 ;; Registers used:
  1491 ;;		None
  1492 ;; Tracked objects:
  1493 ;;		On entry : 0/0
  1494 ;;		On exit  : 0/0
  1495 ;;		Unchanged: 0/0
  1496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1497 ;;      Params:         0       0       0       0       0       0       0       0       0
  1498 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1499 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1500 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1501 ;;Total ram usage:        0 bytes
  1502 ;; Hardware stack levels used:    1
  1503 ;; This function calls:
  1504 ;;		Nothing
  1505 ;; This function is called by:
  1506 ;;		_lcd_command
  1507 ;;		_lcd_data
  1508 ;; This function uses a non-reentrant model
  1509 ;;
  1510                           
  1511                           	psect	text10
  1512  000D92                     __ptext10:
  1513                           	opt stack 0
  1514  000D92                     _lcd_strobe:
  1515                           	opt stack 28
  1516                           
  1517                           ;lcd.c: 84: PORTCbits.RC1 = 1;
  1518                           
  1519                           ;incstack = 0
  1520  000D92  8282               	bsf	3970,1,c	;volatile
  1521                           
  1522                           ;lcd.c: 85: _delay((unsigned long)((1)*(8000000/4000000.0)));
  1523  000D94  D000               	nop2		;2 cycle nop
  1524                           
  1525                           ;lcd.c: 86: PORTCbits.RC1 = 0;
  1526  000D96  9282               	bcf	3970,1,c	;volatile
  1527                           
  1528                           ;lcd.c: 87: _delay((unsigned long)((1)*(8000000/4000000.0)));
  1529  000D98  D000               	nop2		;2 cycle nop
  1530  000D9A  0012               	return		;funcret
  1531  000D9C                     __end_of_lcd_strobe:
  1532                           	opt stack 0
  1533                           tblptru	equ	0xFF8
  1534                           tblptrh	equ	0xFF7
  1535                           tblptrl	equ	0xFF6
  1536                           tablat	equ	0xFF5
  1537                           wreg	equ	0xFE8
  1538                           status	equ	0xFD8
  1539                           
  1540 ;; *************** function _init_leds_and_motor *****************
  1541 ;; Defined at:
  1542 ;;		line 6 in file "motor_led.c"
  1543 ;; Parameters:    Size  Location     Type
  1544 ;;		None
  1545 ;; Auto vars:     Size  Location     Type
  1546 ;;		None
  1547 ;; Return value:  Size  Location     Type
  1548 ;;		None               void
  1549 ;; Registers used:
  1550 ;;		wreg, status,2
  1551 ;; Tracked objects:
  1552 ;;		On entry : 0/0
  1553 ;;		On exit  : 0/0
  1554 ;;		Unchanged: 0/0
  1555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1556 ;;      Params:         0       0       0       0       0       0       0       0       0
  1557 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1558 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1559 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1560 ;;Total ram usage:        0 bytes
  1561 ;; Hardware stack levels used:    1
  1562 ;; This function calls:
  1563 ;;		Nothing
  1564 ;; This function is called by:
  1565 ;;		_main
  1566 ;; This function uses a non-reentrant model
  1567 ;;
  1568                           
  1569                           	psect	text11
  1570  000D9C                     __ptext11:
  1571                           	opt stack 0
  1572  000D9C                     _init_leds_and_motor:
  1573                           	opt stack 30
  1574                           
  1575                           ;motor_led.c: 7: TRISD = 0x00;
  1576                           
  1577                           ;incstack = 0
  1578  000D9C  0E00               	movlw	0
  1579  000D9E  6E95               	movwf	3989,c	;volatile
  1580                           
  1581                           ;motor_led.c: 9: LATD = 0x00;
  1582  000DA0  0E00               	movlw	0
  1583  000DA2  6E8C               	movwf	3980,c	;volatile
  1584  000DA4  0012               	return		;funcret
  1585  000DA6                     __end_of_init_leds_and_motor:
  1586                           	opt stack 0
  1587                           tblptru	equ	0xFF8
  1588                           tblptrh	equ	0xFF7
  1589                           tblptrl	equ	0xFF6
  1590                           tablat	equ	0xFF5
  1591                           wreg	equ	0xFE8
  1592                           status	equ	0xFD8
  1593                           
  1594 ;; *************** function _display_level *****************
  1595 ;; Defined at:
  1596 ;;		line 37 in file "motor_led.c"
  1597 ;; Parameters:    Size  Location     Type
  1598 ;;  level           2    0[COMRAM] int 
  1599 ;; Auto vars:     Size  Location     Type
  1600 ;;		None
  1601 ;; Return value:  Size  Location     Type
  1602 ;;		None               void
  1603 ;; Registers used:
  1604 ;;		wreg, status,2, status,0
  1605 ;; Tracked objects:
  1606 ;;		On entry : 0/0
  1607 ;;		On exit  : 0/0
  1608 ;;		Unchanged: 0/0
  1609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1610 ;;      Params:         2       0       0       0       0       0       0       0       0
  1611 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1612 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1613 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1614 ;;Total ram usage:        2 bytes
  1615 ;; Hardware stack levels used:    1
  1616 ;; This function calls:
  1617 ;;		Nothing
  1618 ;; This function is called by:
  1619 ;;		_main
  1620 ;; This function uses a non-reentrant model
  1621 ;;
  1622                           
  1623                           	psect	text12
  1624  000DA6                     __ptext12:
  1625                           	opt stack 0
  1626  000DA6                     _display_level:
  1627                           	opt stack 30
  1628                           
  1629                           ;motor_led.c: 39: LATD = (level & 0x0F);
  1630                           
  1631                           ;incstack = 0
  1632  000DA6  5001               	movf	display_level@level,w,c
  1633  000DA8  0B0F               	andlw	15
  1634  000DAA  6E8C               	movwf	3980,c	;volatile
  1635  000DAC  0012               	return		;funcret
  1636  000DAE                     __end_of_display_level:
  1637                           	opt stack 0
  1638                           tblptru	equ	0xFF8
  1639                           tblptrh	equ	0xFF7
  1640                           tblptrl	equ	0xFF6
  1641                           tablat	equ	0xFF5
  1642                           wreg	equ	0xFE8
  1643                           status	equ	0xFD8
  1644                           
  1645 ;; *************** function ___wmul *****************
  1646 ;; Defined at:
  1647 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  1648 ;; Parameters:    Size  Location     Type
  1649 ;;  multiplier      2    0[COMRAM] unsigned int 
  1650 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1651 ;; Auto vars:     Size  Location     Type
  1652 ;;  product         2    4[COMRAM] unsigned int 
  1653 ;; Return value:  Size  Location     Type
  1654 ;;                  2    0[COMRAM] unsigned int 
  1655 ;; Registers used:
  1656 ;;		wreg, status,2, status,0, prodl, prodh
  1657 ;; Tracked objects:
  1658 ;;		On entry : 0/0
  1659 ;;		On exit  : 0/0
  1660 ;;		Unchanged: 0/0
  1661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1662 ;;      Params:         4       0       0       0       0       0       0       0       0
  1663 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1664 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1665 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1666 ;;Total ram usage:        6 bytes
  1667 ;; Hardware stack levels used:    1
  1668 ;; This function calls:
  1669 ;;		Nothing
  1670 ;; This function is called by:
  1671 ;;		_main
  1672 ;; This function uses a non-reentrant model
  1673 ;;
  1674                           
  1675                           	psect	text13
  1676  000D3A                     __ptext13:
  1677                           	opt stack 0
  1678  000D3A                     ___wmul:
  1679                           	opt stack 30
  1680                           
  1681                           ;incstack = 0
  1682  000D3A  5001               	movf	___wmul@multiplier,w,c
  1683  000D3C  0203               	mulwf	___wmul@multiplicand,c
  1684  000D3E  CFF3 F005          	movff	prodl,___wmul@product
  1685  000D42  CFF4 F006          	movff	prodh,___wmul@product+1
  1686  000D46  5001               	movf	___wmul@multiplier,w,c
  1687  000D48  0204               	mulwf	___wmul@multiplicand+1,c
  1688  000D4A  50F3               	movf	prodl,w,c
  1689  000D4C  2606               	addwf	___wmul@product+1,f,c
  1690  000D4E  5002               	movf	___wmul@multiplier+1,w,c
  1691  000D50  0203               	mulwf	___wmul@multiplicand,c
  1692  000D52  50F3               	movf	prodl,w,c
  1693  000D54  2606               	addwf	___wmul@product+1,f,c
  1694  000D56  C005  F001         	movff	___wmul@product,?___wmul
  1695  000D5A  C006  F002         	movff	___wmul@product+1,?___wmul+1
  1696  000D5E  D000               	goto	l118
  1697  000D60                     l118:
  1698  000D60  0012               	return		;funcret
  1699  000D62                     __end_of___wmul:
  1700                           	opt stack 0
  1701                           tblptru	equ	0xFF8
  1702                           tblptrh	equ	0xFF7
  1703                           tblptrl	equ	0xFF6
  1704                           tablat	equ	0xFF5
  1705                           prodh	equ	0xFF4
  1706                           prodl	equ	0xFF3
  1707                           wreg	equ	0xFE8
  1708                           status	equ	0xFD8
  1709                           tblptru	equ	0xFF8
  1710                           tblptrh	equ	0xFF7
  1711                           tblptrl	equ	0xFF6
  1712                           tablat	equ	0xFF5
  1713                           prodh	equ	0xFF4
  1714                           prodl	equ	0xFF3
  1715                           wreg	equ	0xFE8
  1716                           status	equ	0xFD8
  1717                           
  1718                           	psect	rparam
  1719  0000                     tblptru	equ	0xFF8
  1720                           tblptrh	equ	0xFF7
  1721                           tblptrl	equ	0xFF6
  1722                           tablat	equ	0xFF5
  1723                           prodh	equ	0xFF4
  1724                           prodl	equ	0xFF3
  1725                           wreg	equ	0xFE8
  1726                           status	equ	0xFD8


Data Sizes:
    Strings     8
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     18      18
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    lcd_write_string@str	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_1(CODE[8]), 


Critical Paths under _main in COMRAM

    _main->_lcd_set_cursor
    _lcd_write_string->_lcd_data
    _lcd_write_char->_lcd_data
    _lcd_set_cursor->_lcd_command
    _lcd_init->_lcd_command
    _lcd_clear->_lcd_command

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0    2000
                                              9 COMRAM     9     9      0
                             ___wmul
                      _display_level
                _init_leds_and_motor
                          _lcd_clear
                           _lcd_init
                     _lcd_set_cursor
                     _lcd_write_char
                   _lcd_write_string
                        _read_keypad
                         _step_motor
 ---------------------------------------------------------------------------------
 (1) _step_motor                                           7     5      2     201
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) _read_keypad                                          5     5      0     150
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (1) _lcd_write_string                                     2     0      2     229
                                              3 COMRAM     2     0      2
                           _lcd_data
 ---------------------------------------------------------------------------------
 (1) _lcd_write_char                                       1     1      0     135
                                              3 COMRAM     1     1      0
                           _lcd_data
 ---------------------------------------------------------------------------------
 (2) _lcd_data                                             3     3      0     120
                                              0 COMRAM     3     3      0
                         _lcd_strobe
 ---------------------------------------------------------------------------------
 (1) _lcd_set_cursor                                       6     2      4     361
                                              3 COMRAM     6     2      4
                        _lcd_command
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0     120
                                              3 COMRAM     1     1      0
                        _lcd_command
 ---------------------------------------------------------------------------------
 (1) _lcd_clear                                            1     1      0     120
                                              3 COMRAM     1     1      0
                        _lcd_command
 ---------------------------------------------------------------------------------
 (2) _lcd_command                                          3     3      0     120
                                              0 COMRAM     3     3      0
                         _lcd_strobe
 ---------------------------------------------------------------------------------
 (3) _lcd_strobe                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_leds_and_motor                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _display_level                                        2     0      2     150
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     287
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___wmul
   _display_level
   _init_leds_and_motor
   _lcd_clear
     _lcd_command
       _lcd_strobe
   _lcd_init
     _lcd_command
       _lcd_strobe
   _lcd_set_cursor
     _lcd_command
       _lcd_strobe
   _lcd_write_char
     _lcd_data
       _lcd_strobe
   _lcd_write_string
     _lcd_data
       _lcd_strobe
   _read_keypad
   _step_motor

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     12      12       1       18.9%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Mon Jun 10 22:01:57 2024

                lcd_data@data 0003                            l46 0C96                            u15 0A4A  
                          u25 0A6E                            u35 0A8E                            u45 0952  
                          u55 0976                            u65 0996                            u84 0C1E  
                          u85 0C1A                            u94 0C38                            u95 0C34  
                 __CFG_BOR$ON 000000           ___wmul@multiplicand 0003                   __CFG_BORV$3 000000  
                         l107 0914                           l109 08AE                           l118 0D60  
                         l801 0C92                           l781 0C5C                           l773 0C0E  
                         l793 0C80                           l785 0C68                           l769 0BFA  
                         l953 0836                           l945 0818                           l955 0840  
                         l947 081E                           l797 0C8A                           l789 0C74  
                         l949 0828                           u407 08BC                           u280 084E  
                         u417 08D4                           u427 08EC                           u437 0904  
                         u447 0C48                           u367 085C                           u457 0CA2  
                         u377 0874                           u467 0CCE                           u387 088C  
                         u477 0D6E                           u397 08A4                           wreg 000FE8  
             ?_lcd_set_cursor 0004                  __CFG_LVP$OFF 000000                  __CFG_WDT$OFF 000000  
                        l1011 0910                          l1023 0D06                          l1031 0D26  
                        l1019 0CEE                          l1027 0D10                          l1057 0B6C  
                        l1049 0B40                          STR_1 0801             main@current_level 0011  
                        _LATB 000F8A                          _LATD 000F8C                ?_display_level 0001  
             lcd_write_char@c 0004                  __CFG_PWRT$ON 000000        __end_of_lcd_write_char 0D92  
                        _main 0B1A                          prodh 000FF4                          prodl 000FF3  
                        start 0000                 __CFG_IESO$OFF 000000                 __CFG_MCLRE$ON 000000  
                ___param_bank 000010                 __CFG_PLLDIV$5 000000                __CFG_CCP2MX$ON 000000  
                       ?_main 0001                __CFG_DEBUG$OFF 000000                 __CFG_USBDIV$2 000000  
                       _TRISA 000F92                         _TRISB 000F93                         _TRISC 000F94  
                       _TRISD 000F95                __CFG_FCMEN$OFF 000000                  ?_read_keypad 0001  
                       tablat 000FF5               ?_lcd_write_char 0001                         status 000FD8  
              __CFG_ICPRT$OFF 000000               __initialization 0D7A                  __end_of_main 0BEE  
                      ??_main 000A                 __activetblptr 000001                lcd_command@cmd 0003  
             ??_display_level 0003                __CFG_VREGEN$ON 000000                __CFG_XINST$OFF 000000  
            __end_of_lcd_data 0A22              __end_of_lcd_init 0CDA          __size_of_lcd_command 00F8  
                      ___wmul 0D3A                __CFG_STVREN$ON 000000      __end_of_lcd_write_string 0D3A  
                __mediumconst 0000                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8                    __accesstop 0060       __end_of__initialization 0D7A  
             __CFG_PBADEN$OFF 000000  __size_of_init_leds_and_motor 000A                 ___rparam_used 000001  
              __pcstackCOMRAM 0001              ??_lcd_set_cursor 0008            __size_of_lcd_clear 0018  
        __size_of_read_keypad 00AA                       ?___wmul 0001              ??_lcd_write_char 0004  
                   ?_lcd_data 0001                    _lcd_strobe 0D92                     ?_lcd_init 0001  
                     __Hparam 0000                       __Lparam 0000             __end_of_lcd_clear 0D7A  
             __size_of___wmul 0028                  __psmallconst 0800                       __pcinit 0D7A  
                     __ramtop 0800                       __ptext0 0B1A                       __ptext1 080A  
                     __ptext2 0BEE                       __ptext3 0D0E                       __ptext4 0D88  
                     __ptext5 092A                       __ptext6 0CDA                       __ptext7 0C98  
                     __ptext8 0D62                       __ptext9 0A22                    ??_lcd_data 0001  
                     main@key 000E                    ??_lcd_init 0004          end_of_initialization 0D7A  
                   _PORTAbits 000F80                     _PORTCbits 000F82             ?_lcd_write_string 0004  
         _init_leds_and_motor 0D9C            ??_lcd_write_string 0006            display_level@level 0001  
                 ?_lcd_strobe 0001         __end_of_display_level 0DAE                    _step_motor 080A  
        ?_init_leds_and_motor 0001                 ??_lcd_command 0001           step_motor@direction 0004  
              __end_of___wmul 0D62           start_initialization 0D7A         ??_init_leds_and_motor 0001  
       lcd_set_cursor@address 0008                      ??___wmul 0005           __end_of_lcd_command 0B1A  
         __size_of_lcd_strobe 000A              __CFG_LPT1OSC$OFF 000000                   step_motor@i 0006  
               ??_read_keypad 0001                   ?_step_motor 0001             __size_of_lcd_data 00F8  
           __size_of_lcd_init 0042                     _lcd_clear 0D62                   __smallconst 0800  
            main@target_level 000F       __size_of_lcd_set_cursor 0034           __end_of_read_keypad 0C98  
              ___wmul@product 0005                      _LATDbits 000F8C                   _lcd_command 0A22  
            __CFG_WDTPS$32768 000000                    ?_lcd_clear 0001           __size_of_step_motor 0120  
           ___wmul@multiplier 0001                     main@steps 000C                  ??_lcd_strobe 0001  
   __size_of_lcd_write_string 002C       __size_of_lcd_write_char 000A                      __Hrparam 0000  
                    __Lrparam 0000                  __Lsmallconst 0800            __end_of_lcd_strobe 0D9C  
                 _read_keypad 0BEE                      __ptext10 0D92                      __ptext11 0D9C  
                    __ptext12 0DA6                      __ptext13 0D3A                      _lcd_data 092A  
                    _lcd_init 0C98                 __size_of_main 00D4                   ??_lcd_clear 0004  
      __size_of_display_level 0008         __CFG_CPUDIV$OSC1_PLL2 000000   __end_of_init_leds_and_motor 0DA6  
                ??_step_motor 0003                _lcd_set_cursor 0CDA             lcd_set_cursor@col 0006  
             step_motor@steps 0001             lcd_set_cursor@row 0004                read_keypad@col 0004  
              read_keypad@key 0003            __end_of_step_motor 092A        __end_of_lcd_set_cursor 0D0E  
          __CFG_FOSC$HSPLL_HS 000000              _lcd_write_string 0D0E                 _display_level 0DA6  
              _lcd_write_char 0D88                  ?_lcd_command 0001           lcd_write_string@str 0004  

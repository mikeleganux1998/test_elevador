

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Mon Jun 10 22:56:23 2024

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	text11,global,reloc=2,class=CODE,delta=1
    20                           	psect	text12,global,reloc=2,class=CODE,delta=1
    21                           	psect	text13,global,reloc=2,class=CODE,delta=1
    22                           	psect	text14,global,reloc=2,class=CODE,delta=1
    23                           	psect	text15,global,reloc=2,class=CODE,delta=1
    24                           	psect	text16,global,reloc=2,class=CODE,delta=1
    25                           	psect	text17,global,reloc=2,class=CODE,delta=1
    26                           	psect	text18,global,reloc=2,class=CODE,delta=1
    27                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    28                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    29  0000                     
    30                           	psect	smallconst
    31  000800                     __psmallconst:
    32                           	opt stack 0
    33  000800  00                 	db	0
    34  000801                     _dpowers:
    35                           	opt stack 0
    36  000801  0001               	dw	1
    37  000803  000A               	dw	10
    38  000805  0064               	dw	100
    39  000807  03E8               	dw	1000
    40  000809  2710               	dw	10000
    41  00080B                     __end_of_dpowers:
    42                           	opt stack 0
    43  0000                     _LATB	set	3978
    44  0000                     _LATD	set	3980
    45  0000                     _LATDbits	set	3980
    46  0000                     _PORTAbits	set	3968
    47  0000                     _PORTCbits	set	3970
    48  0000                     _RCSTAbits	set	4011
    49  0000                     _SPBRG	set	4015
    50  0000                     _TRISA	set	3986
    51  0000                     _TRISB	set	3987
    52  0000                     _TRISC	set	3988
    53  0000                     _TRISD	set	3989
    54  0000                     _TXREG	set	4013
    55  0000                     _TXSTAbits	set	4012
    56  00080B                     STR_2:
    57  00080B  4E                 	db	78	;'N'
    58  00080C  69                 	db	105	;'i'
    59  00080D  76                 	db	118	;'v'
    60  00080E  65                 	db	101	;'e'
    61  00080F  6C                 	db	108	;'l'
    62  000810  3A                 	db	58	;':'
    63  000811  20                 	db	32
    64  000812  25                 	db	37
    65  000813  64                 	db	100	;'d'
    66  000814  0D                 	db	13
    67  000815  0A                 	db	10
    68  000816  00                 	db	0
    69  000817                     STR_1:
    70  000817  4E                 	db	78	;'N'
    71  000818  69                 	db	105	;'i'
    72  000819  76                 	db	118	;'v'
    73  00081A  65                 	db	101	;'e'
    74  00081B  6C                 	db	108	;'l'
    75  00081C  3A                 	db	58	;':'
    76  00081D  20                 	db	32
    77  00081E  00                 	db	0
    78  00081F  00                 	db	0	; dummy byte at the end
    79  0000                     
    80                           ; #config settings
    81                           
    82                           	psect	cinit
    83  001006                     __pcinit:
    84                           	opt stack 0
    85  001006                     start_initialization:
    86                           	opt stack 0
    87  001006                     __initialization:
    88                           	opt stack 0
    89  001006                     end_of_initialization:
    90                           	opt stack 0
    91  001006                     __end_of__initialization:
    92                           	opt stack 0
    93  001006  0E00               	movlw	low (__Lmediumconst shr (0+16))
    94  001008  6EF8               	movwf	tblptru,c
    95  00100A  0100               	movlb	0
    96  00100C  EF55  F005         	goto	_main	;jump to C main() function
    97                           tblptru	equ	0xFF8
    98                           
    99                           	psect	cstackCOMRAM
   100  000001                     __pcstackCOMRAM:
   101                           	opt stack 0
   102  000001                     ??_lcd_command:
   103  000001                     ??_lcd_data:
   104  000001                     ??_read_keypad:
   105  000001                     ?___wmul:
   106                           	opt stack 0
   107  000001                     ?___lwdiv:
   108                           	opt stack 0
   109  000001                     uart_send_string@str:
   110                           	opt stack 0
   111  000001                     step_motor@steps:
   112                           	opt stack 0
   113  000001                     display_level@level:
   114                           	opt stack 0
   115  000001                     ___wmul@multiplier:
   116                           	opt stack 0
   117  000001                     ___lwdiv@dividend:
   118                           	opt stack 0
   119                           
   120                           ; 2 bytes @ 0x0
   121  000001                     	ds	2
   122  000003                     ??_step_motor:
   123  000003                     read_keypad@key:
   124                           	opt stack 0
   125  000003                     lcd_command@cmd:
   126                           	opt stack 0
   127  000003                     lcd_data@data:
   128                           	opt stack 0
   129  000003                     ___wmul@multiplicand:
   130                           	opt stack 0
   131  000003                     ___lwdiv@divisor:
   132                           	opt stack 0
   133                           
   134                           ; 2 bytes @ 0x2
   135  000003                     	ds	1
   136  000004                     ??_lcd_init:
   137  000004                     ??_lcd_clear:
   138  000004                     lcd_write_char@c:
   139                           	opt stack 0
   140  000004                     read_keypad@col:
   141                           	opt stack 0
   142  000004                     lcd_set_cursor@row:
   143                           	opt stack 0
   144  000004                     lcd_write_string@str:
   145                           	opt stack 0
   146  000004                     step_motor@direction:
   147                           	opt stack 0
   148                           
   149                           ; 2 bytes @ 0x3
   150  000004                     	ds	1
   151  000005                     ___wmul@product:
   152                           	opt stack 0
   153  000005                     ___lwdiv@quotient:
   154                           	opt stack 0
   155                           
   156                           ; 2 bytes @ 0x4
   157  000005                     	ds	1
   158  000006                     lcd_set_cursor@col:
   159                           	opt stack 0
   160  000006                     step_motor@i:
   161                           	opt stack 0
   162                           
   163                           ; 2 bytes @ 0x5
   164  000006                     	ds	1
   165  000007                     ___lwdiv@counter:
   166                           	opt stack 0
   167                           
   168                           ; 1 bytes @ 0x6
   169  000007                     	ds	1
   170  000008                     ?___lwmod:
   171                           	opt stack 0
   172  000008                     lcd_set_cursor@address:
   173                           	opt stack 0
   174  000008                     ___lwmod@dividend:
   175                           	opt stack 0
   176                           
   177                           ; 2 bytes @ 0x7
   178  000008                     	ds	2
   179  00000A                     ___lwmod@divisor:
   180                           	opt stack 0
   181                           
   182                           ; 2 bytes @ 0x9
   183  00000A                     	ds	2
   184  00000C                     ___lwmod@counter:
   185                           	opt stack 0
   186                           
   187                           ; 1 bytes @ 0xB
   188  00000C                     	ds	1
   189  00000D                     ?_sprintf:
   190                           	opt stack 0
   191  00000D                     sprintf@sp:
   192                           	opt stack 0
   193                           
   194                           ; 2 bytes @ 0xC
   195  00000D                     	ds	2
   196  00000F                     sprintf@f:
   197                           	opt stack 0
   198                           
   199                           ; 2 bytes @ 0xE
   200  00000F                     	ds	4
   201  000013                     ??_sprintf:
   202                           
   203                           ; 0 bytes @ 0x12
   204  000013                     	ds	1
   205  000014                     sprintf@ap:
   206                           	opt stack 0
   207                           
   208                           ; 2 bytes @ 0x13
   209  000014                     	ds	2
   210  000016                     sprintf@flag:
   211                           	opt stack 0
   212                           
   213                           ; 1 bytes @ 0x15
   214  000016                     	ds	1
   215  000017                     sprintf@prec:
   216                           	opt stack 0
   217                           
   218                           ; 1 bytes @ 0x16
   219  000017                     	ds	1
   220  000018                     sprintf@val:
   221                           	opt stack 0
   222                           
   223                           ; 2 bytes @ 0x17
   224  000018                     	ds	2
   225  00001A                     sprintf@c:
   226                           	opt stack 0
   227                           
   228                           ; 1 bytes @ 0x19
   229  00001A                     	ds	1
   230  00001B                     ??_main:
   231                           
   232                           ; 0 bytes @ 0x1A
   233  00001B                     	ds	2
   234  00001D                     main@buffer:
   235                           	opt stack 0
   236                           
   237                           ; 20 bytes @ 0x1C
   238  00001D                     	ds	20
   239  000031                     main@steps:
   240                           	opt stack 0
   241                           
   242                           ; 2 bytes @ 0x30
   243  000031                     	ds	2
   244  000033                     main@key:
   245                           	opt stack 0
   246                           
   247                           ; 1 bytes @ 0x32
   248  000033                     	ds	1
   249  000034                     main@target_level:
   250                           	opt stack 0
   251                           
   252                           ; 2 bytes @ 0x33
   253  000034                     	ds	2
   254  000036                     main@current_level:
   255                           	opt stack 0
   256                           
   257                           ; 2 bytes @ 0x35
   258  000036                     	ds	2
   259                           tblptru	equ	0xFF8
   260                           
   261 ;;
   262 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   263 ;;
   264 ;; *************** function _main *****************
   265 ;; Defined at:
   266 ;;		line 36 in file "main.c"
   267 ;; Parameters:    Size  Location     Type
   268 ;;		None
   269 ;; Auto vars:     Size  Location     Type
   270 ;;  buffer         20   28[COMRAM] unsigned char [20]
   271 ;;  steps           2   48[COMRAM] int 
   272 ;;  target_level    2   51[COMRAM] int 
   273 ;;  key             1   50[COMRAM] unsigned char 
   274 ;;  current_leve    2   53[COMRAM] int 
   275 ;; Return value:  Size  Location     Type
   276 ;;		None               void
   277 ;; Registers used:
   278 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   279 ;; Tracked objects:
   280 ;;		On entry : 0/0
   281 ;;		On exit  : 0/0
   282 ;;		Unchanged: 0/0
   283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   284 ;;      Params:         0       0       0       0       0       0       0       0       0
   285 ;;      Locals:        27       0       0       0       0       0       0       0       0
   286 ;;      Temps:          2       0       0       0       0       0       0       0       0
   287 ;;      Totals:        29       0       0       0       0       0       0       0       0
   288 ;;Total ram usage:       29 bytes
   289 ;; Hardware stack levels required when called:    3
   290 ;; This function calls:
   291 ;;		___wmul
   292 ;;		_display_level
   293 ;;		_init_leds_and_motor
   294 ;;		_init_uart
   295 ;;		_lcd_clear
   296 ;;		_lcd_init
   297 ;;		_lcd_set_cursor
   298 ;;		_lcd_write_char
   299 ;;		_lcd_write_string
   300 ;;		_read_keypad
   301 ;;		_sprintf
   302 ;;		_step_motor
   303 ;;		_uart_send_string
   304 ;; This function is called by:
   305 ;;		Startup code after reset
   306 ;; This function uses a non-reentrant model
   307 ;;
   308                           
   309                           	psect	text0
   310  000AAA                     __ptext0:
   311                           	opt stack 0
   312  000AAA                     _main:
   313                           	opt stack 28
   314                           
   315                           ;main.c: 37: TRISA = 0x0F;
   316                           
   317                           ;incstack = 0
   318  000AAA  0E0F               	movlw	15
   319  000AAC  6E92               	movwf	3986,c	;volatile
   320                           
   321                           ;main.c: 38: TRISB = 0xF0;
   322  000AAE  0EF0               	movlw	240
   323  000AB0  6E93               	movwf	3987,c	;volatile
   324                           
   325                           ;main.c: 39: TRISD = 0x00;
   326  000AB2  0E00               	movlw	0
   327  000AB4  6E95               	movwf	3989,c	;volatile
   328                           
   329                           ;main.c: 41: lcd_init();
   330  000AB6  EC77  F007         	call	_lcd_init	;wreg free
   331                           
   332                           ;main.c: 42: init_leds_and_motor();
   333  000ABA  EC12  F008         	call	_init_leds_and_motor	;wreg free
   334                           
   335                           ;main.c: 43: init_uart();
   336  000ABE  ECFD  F007         	call	_init_uart	;wreg free
   337                           
   338                           ;main.c: 45: int current_level = 0;
   339  000AC2  0E00               	movlw	0
   340  000AC4  6E37               	movwf	main@current_level+1,c
   341  000AC6  0E00               	movlw	0
   342  000AC8  6E36               	movwf	main@current_level,c
   343                           
   344                           ;main.c: 46: display_level(current_level);
   345  000ACA  C036  F001         	movff	main@current_level,display_level@level
   346  000ACE  C037  F002         	movff	main@current_level+1,display_level@level+1
   347  000AD2  EC17  F008         	call	_display_level	;wreg free
   348  000AD6                     l55:
   349                           
   350                           ;main.c: 49: char key = read_keypad();
   351  000AD6  ECCE  F006         	call	_read_keypad	;wreg free
   352  000ADA  6E33               	movwf	main@key,c
   353                           
   354                           ;main.c: 51: if (key != '\0') {
   355  000ADC  5033               	movf	main@key,w,c
   356  000ADE  B4D8               	btfsc	status,2,c
   357  000AE0  D7FA               	goto	l55
   358                           
   359                           ;main.c: 52: int target_level = key - '0';
   360  000AE2  0ED0               	movlw	208
   361  000AE4  2433               	addwf	main@key,w,c
   362  000AE6  6E34               	movwf	main@target_level,c
   363  000AE8  6A35               	clrf	main@target_level+1,c
   364  000AEA  0EFF               	movlw	255
   365  000AEC  2235               	addwfc	main@target_level+1,f,c
   366                           
   367                           ;main.c: 54: if (target_level >= 0 && target_level <= 9) {
   368  000AEE  BE35               	btfsc	main@target_level+1,7,c
   369  000AF0  D7F2               	goto	l55
   370  000AF2  BE35               	btfsc	main@target_level+1,7,c
   371  000AF4  D006               	goto	l1331
   372  000AF6  5035               	movf	main@target_level+1,w,c
   373  000AF8  E1EE               	bnz	l55
   374  000AFA  0E0A               	movlw	10
   375  000AFC  5C34               	subwf	main@target_level,w,c
   376  000AFE  B0D8               	btfsc	status,0,c
   377  000B00  D7EA               	goto	l55
   378  000B02                     l1331:
   379                           
   380                           ;main.c: 55: int steps = (target_level - current_level) * 100;
   381  000B02  C036  F01B         	movff	main@current_level,??_main
   382  000B06  C037  F01C         	movff	main@current_level+1,??_main+1
   383  000B0A  1E1B               	comf	??_main,f,c
   384  000B0C  1E1C               	comf	??_main+1,f,c
   385  000B0E  4A1B               	infsnz	??_main,f,c
   386  000B10  2A1C               	incf	??_main+1,f,c
   387  000B12  5034               	movf	main@target_level,w,c
   388  000B14  241B               	addwf	??_main,w,c
   389  000B16  6E01               	movwf	___wmul@multiplier,c
   390  000B18  5035               	movf	main@target_level+1,w,c
   391  000B1A  201C               	addwfc	??_main+1,w,c
   392  000B1C  6E02               	movwf	___wmul@multiplier+1,c
   393  000B1E  0E00               	movlw	0
   394  000B20  6E04               	movwf	___wmul@multiplicand+1,c
   395  000B22  0E64               	movlw	100
   396  000B24  6E03               	movwf	___wmul@multiplicand,c
   397  000B26  ECDD  F007         	call	___wmul	;wreg free
   398  000B2A  C001  F031         	movff	?___wmul,main@steps
   399  000B2E  C002  F032         	movff	?___wmul+1,main@steps+1
   400                           
   401                           ;main.c: 56: step_motor(steps);
   402  000B32  C031  F001         	movff	main@steps,step_motor@steps
   403  000B36  C032  F002         	movff	main@steps+1,step_motor@steps+1
   404  000B3A  ECC5  F004         	call	_step_motor	;wreg free
   405                           
   406                           ;main.c: 57: current_level = target_level;
   407  000B3E  C034  F036         	movff	main@target_level,main@current_level
   408  000B42  C035  F037         	movff	main@target_level+1,main@current_level+1
   409                           
   410                           ;main.c: 58: display_level(current_level);
   411  000B46  C036  F001         	movff	main@current_level,display_level@level
   412  000B4A  C037  F002         	movff	main@current_level+1,display_level@level+1
   413  000B4E  EC17  F008         	call	_display_level	;wreg free
   414                           
   415                           ;main.c: 59: lcd_clear();
   416  000B52  ECF1  F007         	call	_lcd_clear	;wreg free
   417                           
   418                           ;main.c: 60: lcd_set_cursor(1, 1);
   419  000B56  0E00               	movlw	0
   420  000B58  6E05               	movwf	lcd_set_cursor@row+1,c
   421  000B5A  0E01               	movlw	1
   422  000B5C  6E04               	movwf	lcd_set_cursor@row,c
   423  000B5E  0E00               	movlw	0
   424  000B60  6E07               	movwf	lcd_set_cursor@col+1,c
   425  000B62  0E01               	movlw	1
   426  000B64  6E06               	movwf	lcd_set_cursor@col,c
   427  000B66  EC98  F007         	call	_lcd_set_cursor	;wreg free
   428                           
   429                           ;main.c: 61: lcd_write_string("Nivel: ");
   430  000B6A  0E17               	movlw	low STR_1
   431  000B6C  6E04               	movwf	lcd_write_string@str,c
   432  000B6E  0E08               	movlw	high STR_1
   433  000B70  6E05               	movwf	lcd_write_string@str+1,c
   434  000B72  ECB2  F007         	call	_lcd_write_string	;wreg free
   435                           
   436                           ;main.c: 62: lcd_write_char(current_level + '0');
   437  000B76  5036               	movf	main@current_level,w,c
   438  000B78  0F30               	addlw	48
   439  000B7A  EC08  F008         	call	_lcd_write_char
   440                           
   441                           ;main.c: 65: char buffer[20];
   442                           ;main.c: 66: sprintf(buffer, "Nivel: %d\r\n", current_level);
   443  000B7E  0E1D               	movlw	low main@buffer
   444  000B80  6E0D               	movwf	sprintf@sp,c
   445  000B82  0E00               	movlw	high main@buffer
   446  000B84  6E0E               	movwf	sprintf@sp+1,c
   447  000B86  0E0B               	movlw	low STR_2
   448  000B88  6E0F               	movwf	sprintf@f,c
   449  000B8A  0E08               	movlw	high STR_2
   450  000B8C  6E10               	movwf	sprintf@f+1,c
   451  000B8E  C036  F011         	movff	main@current_level,?_sprintf+4
   452  000B92  C037  F012         	movff	main@current_level+1,?_sprintf+5
   453  000B96  EC10  F004         	call	_sprintf	;wreg free
   454                           
   455                           ;main.c: 67: uart_send_string(buffer);
   456  000B9A  0E1D               	movlw	low main@buffer
   457  000B9C  6E01               	movwf	uart_send_string@str,c
   458  000B9E  0E00               	movlw	high main@buffer
   459  000BA0  6E02               	movwf	uart_send_string@str+1,c
   460  000BA2  ECC8  F007         	call	_uart_send_string	;wreg free
   461  000BA6  D797               	goto	l55
   462  000BA8  EF00  F000         	goto	start
   463  000BAC                     __end_of_main:
   464                           	opt stack 0
   465                           tblptru	equ	0xFF8
   466                           status	equ	0xFD8
   467                           
   468 ;; *************** function _uart_send_string *****************
   469 ;; Defined at:
   470 ;;		line 82 in file "main.c"
   471 ;; Parameters:    Size  Location     Type
   472 ;;  str             2    0[COMRAM] PTR const unsigned char 
   473 ;;		 -> main@buffer(20), 
   474 ;; Auto vars:     Size  Location     Type
   475 ;;		None
   476 ;; Return value:  Size  Location     Type
   477 ;;		None               void
   478 ;; Registers used:
   479 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   480 ;; Tracked objects:
   481 ;;		On entry : 0/0
   482 ;;		On exit  : 0/0
   483 ;;		Unchanged: 0/0
   484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   485 ;;      Params:         2       0       0       0       0       0       0       0       0
   486 ;;      Locals:         0       0       0       0       0       0       0       0       0
   487 ;;      Temps:          0       0       0       0       0       0       0       0       0
   488 ;;      Totals:         2       0       0       0       0       0       0       0       0
   489 ;;Total ram usage:        2 bytes
   490 ;; Hardware stack levels used:    1
   491 ;; This function calls:
   492 ;;		Nothing
   493 ;; This function is called by:
   494 ;;		_main
   495 ;; This function uses a non-reentrant model
   496 ;;
   497                           
   498                           	psect	text1
   499  000F90                     __ptext1:
   500                           	opt stack 0
   501  000F90                     _uart_send_string:
   502                           	opt stack 30
   503                           
   504                           ;main.c: 83: while (*str) {
   505                           
   506                           ;incstack = 0
   507  000F90  D00C               	goto	l1307
   508                           
   509                           ;main.c: 84: while (!TXSTAbits.TRMT);
   510  000F92  D000               	goto	l68
   511  000F94                     l68:
   512  000F94  A2AC               	btfss	4012,1,c	;volatile
   513  000F96  D7FE               	goto	l68
   514                           
   515                           ;main.c: 85: TXREG = *str++;
   516  000F98  C001  FFD9         	movff	uart_send_string@str,fsr2l
   517  000F9C  C002  FFDA         	movff	uart_send_string@str+1,fsr2h
   518  000FA0  50DF               	movf	indf2,w,c
   519  000FA2  6EAD               	movwf	4013,c	;volatile
   520  000FA4  4A01               	infsnz	uart_send_string@str,f,c
   521  000FA6  2A02               	incf	uart_send_string@str+1,f,c
   522  000FA8  D000               	goto	l1307
   523  000FAA                     l1307:
   524  000FAA  C001  FFD9         	movff	uart_send_string@str,fsr2l
   525  000FAE  C002  FFDA         	movff	uart_send_string@str+1,fsr2h
   526  000FB2  50DF               	movf	indf2,w,c
   527  000FB4  A4D8               	btfss	status,2,c
   528  000FB6  D7EE               	goto	l68
   529  000FB8  0012               	return		;funcret
   530  000FBA                     __end_of_uart_send_string:
   531                           	opt stack 0
   532                           tblptru	equ	0xFF8
   533                           indf2	equ	0xFDF
   534                           fsr2h	equ	0xFDA
   535                           fsr2l	equ	0xFD9
   536                           status	equ	0xFD8
   537                           
   538 ;; *************** function _step_motor *****************
   539 ;; Defined at:
   540 ;;		line 13 in file "motor_led.c"
   541 ;; Parameters:    Size  Location     Type
   542 ;;  steps           2    0[COMRAM] int 
   543 ;; Auto vars:     Size  Location     Type
   544 ;;  i               2    5[COMRAM] int 
   545 ;;  direction       2    3[COMRAM] int 
   546 ;; Return value:  Size  Location     Type
   547 ;;		None               void
   548 ;; Registers used:
   549 ;;		wreg, status,2, status,0
   550 ;; Tracked objects:
   551 ;;		On entry : 0/0
   552 ;;		On exit  : 0/0
   553 ;;		Unchanged: 0/0
   554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   555 ;;      Params:         2       0       0       0       0       0       0       0       0
   556 ;;      Locals:         4       0       0       0       0       0       0       0       0
   557 ;;      Temps:          1       0       0       0       0       0       0       0       0
   558 ;;      Totals:         7       0       0       0       0       0       0       0       0
   559 ;;Total ram usage:        7 bytes
   560 ;; Hardware stack levels used:    1
   561 ;; This function calls:
   562 ;;		Nothing
   563 ;; This function is called by:
   564 ;;		_main
   565 ;; This function uses a non-reentrant model
   566 ;;
   567                           
   568                           	psect	text2
   569  00098A                     __ptext2:
   570                           	opt stack 0
   571  00098A                     _step_motor:
   572                           	opt stack 30
   573                           
   574                           ;motor_led.c: 14: int direction = (steps > 0) ? 1 : -1;
   575                           
   576                           ;incstack = 0
   577  00098A  BE02               	btfsc	step_motor@steps+1,7,c
   578  00098C  D005               	goto	l1153
   579  00098E  5002               	movf	step_motor@steps+1,w,c
   580  000990  E106               	bnz	l1155
   581  000992  0401               	decf	step_motor@steps,w,c
   582  000994  B0D8               	btfsc	status,0,c
   583  000996  D003               	goto	l1155
   584  000998                     l1153:
   585  000998  6804               	setf	step_motor@direction,c
   586  00099A  6805               	setf	step_motor@direction+1,c
   587  00099C  D005               	goto	l1157
   588  00099E                     l1155:
   589  00099E  0E00               	movlw	0
   590  0009A0  6E05               	movwf	step_motor@direction+1,c
   591  0009A2  0E01               	movlw	1
   592  0009A4  6E04               	movwf	step_motor@direction,c
   593  0009A6  D000               	goto	l1157
   594  0009A8                     l1157:
   595                           
   596                           ;motor_led.c: 15: if (steps < 0) {
   597  0009A8  AE02               	btfss	step_motor@steps+1,7,c
   598  0009AA  D005               	goto	l1161
   599                           
   600                           ;motor_led.c: 16: steps = -steps;
   601  0009AC  6C01               	negf	step_motor@steps,c
   602  0009AE  1E02               	comf	step_motor@steps+1,f,c
   603  0009B0  B0D8               	btfsc	status,0,c
   604  0009B2  2A02               	incf	step_motor@steps+1,f,c
   605  0009B4  D000               	goto	l1161
   606  0009B6                     l1161:
   607                           
   608                           ;motor_led.c: 17: }
   609                           ;motor_led.c: 19: for (int i = 0; i < steps; i++) {
   610  0009B6  0E00               	movlw	0
   611  0009B8  6E07               	movwf	step_motor@i+1,c
   612  0009BA  0E00               	movlw	0
   613  0009BC  6E06               	movwf	step_motor@i,c
   614  0009BE  D06A               	goto	l133
   615  0009C0                     l1163:
   616                           
   617                           ;motor_led.c: 20: if (direction > 0) {
   618  0009C0  BE05               	btfsc	step_motor@direction+1,7,c
   619  0009C2  D035               	goto	l135
   620  0009C4  5005               	movf	step_motor@direction+1,w,c
   621  0009C6  E103               	bnz	u500
   622  0009C8  0404               	decf	step_motor@direction,w,c
   623  0009CA  A0D8               	btfss	status,0,c
   624  0009CC  D030               	goto	l135
   625  0009CE                     u500:
   626                           
   627                           ;motor_led.c: 22: LATDbits.LATD0 = 1; LATDbits.LATD1 = 0; LATDbits.LATD2 = 0; LATDbits.L
      +                          ATD3 = 0; _delay((unsigned long)((10)*(8000000/4000.0)));
   628  0009CE  808C               	bsf	3980,0,c	;volatile
   629  0009D0  928C               	bcf	3980,1,c	;volatile
   630  0009D2  948C               	bcf	3980,2,c	;volatile
   631  0009D4  968C               	bcf	3980,3,c	;volatile
   632  0009D6  0E1A               	movlw	26
   633  0009D8  6E03               	movwf	??_step_motor& (0+255),c
   634  0009DA  0EF8               	movlw	248
   635  0009DC                     u687:
   636  0009DC  2EE8               	decfsz	wreg,f,c
   637  0009DE  D7FE               	goto	u687
   638  0009E0  2E03               	decfsz	??_step_motor& (0+255),f,c
   639  0009E2  D7FC               	goto	u687
   640  0009E4  D000               	nop2	
   641                           
   642                           ;motor_led.c: 23: LATDbits.LATD0 = 0; LATDbits.LATD1 = 1; LATDbits.LATD2 = 0; LATDbits.L
      +                          ATD3 = 0; _delay((unsigned long)((10)*(8000000/4000.0)));
   643  0009E6  908C               	bcf	3980,0,c	;volatile
   644  0009E8  828C               	bsf	3980,1,c	;volatile
   645  0009EA  948C               	bcf	3980,2,c	;volatile
   646  0009EC  968C               	bcf	3980,3,c	;volatile
   647  0009EE  0E1A               	movlw	26
   648  0009F0  6E03               	movwf	??_step_motor& (0+255),c
   649  0009F2  0EF8               	movlw	248
   650  0009F4                     u697:
   651  0009F4  2EE8               	decfsz	wreg,f,c
   652  0009F6  D7FE               	goto	u697
   653  0009F8  2E03               	decfsz	??_step_motor& (0+255),f,c
   654  0009FA  D7FC               	goto	u697
   655  0009FC  D000               	nop2	
   656                           
   657                           ;motor_led.c: 24: LATDbits.LATD0 = 0; LATDbits.LATD1 = 0; LATDbits.LATD2 = 1; LATDbits.L
      +                          ATD3 = 0; _delay((unsigned long)((10)*(8000000/4000.0)));
   658  0009FE  908C               	bcf	3980,0,c	;volatile
   659  000A00  928C               	bcf	3980,1,c	;volatile
   660  000A02  848C               	bsf	3980,2,c	;volatile
   661  000A04  968C               	bcf	3980,3,c	;volatile
   662  000A06  0E1A               	movlw	26
   663  000A08  6E03               	movwf	??_step_motor& (0+255),c
   664  000A0A  0EF8               	movlw	248
   665  000A0C                     u707:
   666  000A0C  2EE8               	decfsz	wreg,f,c
   667  000A0E  D7FE               	goto	u707
   668  000A10  2E03               	decfsz	??_step_motor& (0+255),f,c
   669  000A12  D7FC               	goto	u707
   670  000A14  D000               	nop2	
   671                           
   672                           ;motor_led.c: 25: LATDbits.LATD0 = 0; LATDbits.LATD1 = 0; LATDbits.LATD2 = 0; LATDbits.L
      +                          ATD3 = 1; _delay((unsigned long)((10)*(8000000/4000.0)));
   673  000A16  908C               	bcf	3980,0,c	;volatile
   674  000A18  928C               	bcf	3980,1,c	;volatile
   675  000A1A  948C               	bcf	3980,2,c	;volatile
   676  000A1C  868C               	bsf	3980,3,c	;volatile
   677  000A1E  0E1A               	movlw	26
   678  000A20  6E03               	movwf	??_step_motor& (0+255),c
   679  000A22  0EF8               	movlw	248
   680  000A24                     u717:
   681  000A24  2EE8               	decfsz	wreg,f,c
   682  000A26  D7FE               	goto	u717
   683  000A28  2E03               	decfsz	??_step_motor& (0+255),f,c
   684  000A2A  D7FC               	goto	u717
   685  000A2C  D02F               	goto	L1
   686  000A2E                     l135:
   687                           
   688                           ;motor_led.c: 28: LATDbits.LATD0 = 0; LATDbits.LATD1 = 0; LATDbits.LATD2 = 0; LATDbits.L
      +                          ATD3 = 1; _delay((unsigned long)((10)*(8000000/4000.0)));
   689  000A2E  908C               	bcf	3980,0,c	;volatile
   690  000A30  928C               	bcf	3980,1,c	;volatile
   691  000A32  948C               	bcf	3980,2,c	;volatile
   692  000A34  868C               	bsf	3980,3,c	;volatile
   693  000A36  0E1A               	movlw	26
   694  000A38  6E03               	movwf	??_step_motor& (0+255),c
   695  000A3A  0EF8               	movlw	248
   696  000A3C                     u727:
   697  000A3C  2EE8               	decfsz	wreg,f,c
   698  000A3E  D7FE               	goto	u727
   699  000A40  2E03               	decfsz	??_step_motor& (0+255),f,c
   700  000A42  D7FC               	goto	u727
   701  000A44  D000               	nop2	
   702                           
   703                           ;motor_led.c: 29: LATDbits.LATD0 = 0; LATDbits.LATD1 = 0; LATDbits.LATD2 = 1; LATDbits.L
      +                          ATD3 = 0; _delay((unsigned long)((10)*(8000000/4000.0)));
   704  000A46  908C               	bcf	3980,0,c	;volatile
   705  000A48  928C               	bcf	3980,1,c	;volatile
   706  000A4A  848C               	bsf	3980,2,c	;volatile
   707  000A4C  968C               	bcf	3980,3,c	;volatile
   708  000A4E  0E1A               	movlw	26
   709  000A50  6E03               	movwf	??_step_motor& (0+255),c
   710  000A52  0EF8               	movlw	248
   711  000A54                     u737:
   712  000A54  2EE8               	decfsz	wreg,f,c
   713  000A56  D7FE               	goto	u737
   714  000A58  2E03               	decfsz	??_step_motor& (0+255),f,c
   715  000A5A  D7FC               	goto	u737
   716  000A5C  D000               	nop2	
   717                           
   718                           ;motor_led.c: 30: LATDbits.LATD0 = 0; LATDbits.LATD1 = 1; LATDbits.LATD2 = 0; LATDbits.L
      +                          ATD3 = 0; _delay((unsigned long)((10)*(8000000/4000.0)));
   719  000A5E  908C               	bcf	3980,0,c	;volatile
   720  000A60  828C               	bsf	3980,1,c	;volatile
   721  000A62  948C               	bcf	3980,2,c	;volatile
   722  000A64  968C               	bcf	3980,3,c	;volatile
   723  000A66  0E1A               	movlw	26
   724  000A68  6E03               	movwf	??_step_motor& (0+255),c
   725  000A6A  0EF8               	movlw	248
   726  000A6C                     u747:
   727  000A6C  2EE8               	decfsz	wreg,f,c
   728  000A6E  D7FE               	goto	u747
   729  000A70  2E03               	decfsz	??_step_motor& (0+255),f,c
   730  000A72  D7FC               	goto	u747
   731  000A74  D000               	nop2	
   732                           
   733                           ;motor_led.c: 31: LATDbits.LATD0 = 1; LATDbits.LATD1 = 0; LATDbits.LATD2 = 0; LATDbits.L
      +                          ATD3 = 0; _delay((unsigned long)((10)*(8000000/4000.0)));
   734  000A76  808C               	bsf	3980,0,c	;volatile
   735  000A78  928C               	bcf	3980,1,c	;volatile
   736  000A7A  948C               	bcf	3980,2,c	;volatile
   737  000A7C  968C               	bcf	3980,3,c	;volatile
   738  000A7E  0E1A               	movlw	26
   739  000A80  6E03               	movwf	??_step_motor& (0+255),c
   740  000A82  0EF8               	movlw	248
   741  000A84                     u757:
   742  000A84  2EE8               	decfsz	wreg,f,c
   743  000A86  D7FE               	goto	u757
   744  000A88  2E03               	decfsz	??_step_motor& (0+255),f,c
   745  000A8A  D7FC               	goto	u757
   746  000A8C                     L1:
   747  000A8C  D000               	nop2	
   748  000A8E  D000               	goto	l1219
   749  000A90                     l1219:
   750  000A90  4A06               	infsnz	step_motor@i,f,c
   751  000A92  2A07               	incf	step_motor@i+1,f,c
   752  000A94                     l133:
   753  000A94  5001               	movf	step_motor@steps,w,c
   754  000A96  5C06               	subwf	step_motor@i,w,c
   755  000A98  5007               	movf	step_motor@i+1,w,c
   756  000A9A  0A80               	xorlw	128
   757  000A9C  6E03               	movwf	??_step_motor& (0+255),c
   758  000A9E  5002               	movf	step_motor@steps+1,w,c
   759  000AA0  0A80               	xorlw	128
   760  000AA2  5803               	subwfb	??_step_motor& (0+255),w,c
   761  000AA4  A0D8               	btfss	status,0,c
   762  000AA6  D78C               	goto	l1163
   763  000AA8  0012               	return		;funcret
   764  000AAA                     __end_of_step_motor:
   765                           	opt stack 0
   766                           tblptru	equ	0xFF8
   767                           wreg	equ	0xFE8
   768                           indf2	equ	0xFDF
   769                           fsr2h	equ	0xFDA
   770                           fsr2l	equ	0xFD9
   771                           status	equ	0xFD8
   772                           
   773 ;; *************** function _sprintf *****************
   774 ;; Defined at:
   775 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
   776 ;; Parameters:    Size  Location     Type
   777 ;;  sp              2   12[COMRAM] PTR unsigned char 
   778 ;;		 -> main@buffer(20), 
   779 ;;  f               2   14[COMRAM] PTR const unsigned char 
   780 ;;		 -> STR_2(12), 
   781 ;; Auto vars:     Size  Location     Type
   782 ;;  tmpval          4    0        struct .
   783 ;;  cp              3    0        PTR const unsigned char 
   784 ;;  val             2   23[COMRAM] unsigned int 
   785 ;;  ap              2   19[COMRAM] PTR void [1]
   786 ;;		 -> ?_sprintf(2), 
   787 ;;  len             2    0        unsigned int 
   788 ;;  c               1   25[COMRAM] char 
   789 ;;  prec            1   22[COMRAM] char 
   790 ;;  flag            1   21[COMRAM] unsigned char 
   791 ;; Return value:  Size  Location     Type
   792 ;;                  2   12[COMRAM] int 
   793 ;; Registers used:
   794 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   795 ;; Tracked objects:
   796 ;;		On entry : 0/0
   797 ;;		On exit  : 0/0
   798 ;;		Unchanged: 0/0
   799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   800 ;;      Params:         6       0       0       0       0       0       0       0       0
   801 ;;      Locals:         7       0       0       0       0       0       0       0       0
   802 ;;      Temps:          1       0       0       0       0       0       0       0       0
   803 ;;      Totals:        14       0       0       0       0       0       0       0       0
   804 ;;Total ram usage:       14 bytes
   805 ;; Hardware stack levels used:    1
   806 ;; Hardware stack levels required when called:    1
   807 ;; This function calls:
   808 ;;		___lwdiv
   809 ;;		___lwmod
   810 ;; This function is called by:
   811 ;;		_main
   812 ;; This function uses a non-reentrant model
   813 ;;
   814                           
   815                           	psect	text3
   816  000820                     __ptext3:
   817                           	opt stack 0
   818  000820                     _sprintf:
   819                           	opt stack 29
   820                           
   821                           ;doprnt.c: 494: va_list ap;
   822                           ;doprnt.c: 499: signed char c;
   823                           ;doprnt.c: 506: signed char prec;
   824                           ;doprnt.c: 508: unsigned char flag;
   825                           ;doprnt.c: 523: union {
   826                           ;doprnt.c: 524: unsigned long vd;
   827                           ;doprnt.c: 525: double integ;
   828                           ;doprnt.c: 526: } tmpval;
   829                           ;doprnt.c: 528: unsigned int val;
   830                           ;doprnt.c: 529: unsigned len;
   831                           ;doprnt.c: 530: const char * cp;
   832                           ;doprnt.c: 533: *ap = __va_start();
   833                           
   834                           ;incstack = 0
   835  000820  0E11               	movlw	low (?_sprintf+4)
   836  000822  6E14               	movwf	sprintf@ap,c
   837  000824  0E00               	movlw	high (?_sprintf+4)
   838  000826  6E15               	movwf	sprintf@ap+1,c
   839                           
   840                           ;doprnt.c: 536: while(c = *f++) {
   841  000828  D09A               	goto	l1295
   842  00082A                     l1243:
   843                           
   844                           ;doprnt.c: 538: if(c != '%')
   845  00082A  0E25               	movlw	37
   846  00082C  181A               	xorwf	sprintf@c,w,c
   847  00082E  B4D8               	btfsc	status,2,c
   848  000830  D009               	goto	l1249
   849                           
   850                           ;doprnt.c: 540: {
   851                           ;doprnt.c: 541: ((*sp++ = (c)));
   852  000832  C00D  FFD9         	movff	sprintf@sp,fsr2l
   853  000836  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
   854  00083A  C01A  FFDF         	movff	sprintf@c,indf2
   855  00083E  4A0D               	infsnz	sprintf@sp,f,c
   856  000840  2A0E               	incf	sprintf@sp+1,f,c
   857                           
   858                           ;doprnt.c: 542: continue;
   859  000842  D08D               	goto	l1295
   860  000844                     l1249:
   861                           
   862                           ;doprnt.c: 543: }
   863                           ;doprnt.c: 548: flag = 0;
   864  000844  0E00               	movlw	0
   865  000846  6E16               	movwf	sprintf@flag,c
   866                           
   867                           ;doprnt.c: 635: switch(c = *f++) {
   868  000848  D004               	goto	l1253
   869                           
   870                           ;doprnt.c: 638: goto alldone;
   871                           
   872                           ;doprnt.c: 637: case 0:
   873  00084A  D097               	goto	l1297
   874                           
   875                           ;doprnt.c: 698: case 'i':
   876                           ;doprnt.c: 699: break;
   877                           
   878                           ;doprnt.c: 697: case 'd':
   879  00084C  D015               	goto	l1255
   880                           
   881                           ;doprnt.c: 813: continue;
   882                           
   883                           ;doprnt.c: 802: default:
   884  00084E  D087               	goto	l1295
   885                           
   886                           ;doprnt.c: 822: }
   887  000850  D013               	goto	l1255
   888  000852                     l1253:
   889  000852  C00F  FFF6         	movff	sprintf@f,tblptrl
   890  000856  C010  FFF7         	movff	sprintf@f+1,tblptrh
   891  00085A  4A0F               	infsnz	sprintf@f,f,c
   892  00085C  2A10               	incf	sprintf@f+1,f,c
   893  00085E                     	if	0	;tblptru may be non-zero
   894  00085E                     	endif
   895  00085E                     	if	0	;tblptru may be non-zero
   896  00085E                     	endif
   897  00085E  0008               	tblrd		*
   898  000860  CFF5 F01A          	movff	tablat,sprintf@c
   899  000864  501A               	movf	sprintf@c,w,c
   900                           
   901                           ; Switch size 1, requested type "space"
   902                           ; Number of cases is 3, Range of values is 0 to 105
   903                           ; switch strategies available:
   904                           ; Name         Instructions Cycles
   905                           ; simple_byte           10     6 (average)
   906                           ;	Chosen strategy is simple_byte
   907  000866  0A00               	xorlw	0	; case 0
   908  000868  B4D8               	btfsc	status,2,c
   909  00086A  D087               	goto	l1297
   910  00086C  0A64               	xorlw	100	; case 100
   911  00086E  B4D8               	btfsc	status,2,c
   912  000870  D003               	goto	l1255
   913  000872  0A0D               	xorlw	13	; case 105
   914  000874  A4D8               	btfss	status,2,c
   915  000876  D073               	goto	l1295
   916  000878                     l1255:
   917                           
   918                           ;doprnt.c: 1253: {
   919                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
   920  000878  C014  FFD9         	movff	sprintf@ap,fsr2l
   921  00087C  C015  FFDA         	movff	sprintf@ap+1,fsr2h
   922  000880  CFDE F018          	movff	postinc2,sprintf@val
   923  000884  CFDD F019          	movff	postdec2,sprintf@val+1
   924  000888  0E02               	movlw	2
   925  00088A  2614               	addwf	sprintf@ap,f,c
   926  00088C  0E00               	movlw	0
   927  00088E  2215               	addwfc	sprintf@ap+1,f,c
   928                           
   929                           ;doprnt.c: 1261: if((int)val < 0) {
   930  000890  AE19               	btfss	sprintf@val+1,7,c
   931  000892  D007               	goto	l1265
   932                           
   933                           ;doprnt.c: 1262: flag |= 0x03;
   934  000894  0E03               	movlw	3
   935  000896  1216               	iorwf	sprintf@flag,f,c
   936                           
   937                           ;doprnt.c: 1263: val = -val;
   938  000898  6C18               	negf	sprintf@val,c
   939  00089A  1E19               	comf	sprintf@val+1,f,c
   940  00089C  B0D8               	btfsc	status,0,c
   941  00089E  2A19               	incf	sprintf@val+1,f,c
   942  0008A0  D000               	goto	l1265
   943  0008A2                     l1265:
   944                           
   945                           ;doprnt.c: 1264: }
   946                           ;doprnt.c: 1266: }
   947                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
   948  0008A2  0E01               	movlw	1
   949  0008A4  6E1A               	movwf	sprintf@c,c
   950  0008A6                     l1267:
   951  0008A6  0E05               	movlw	5
   952  0008A8  181A               	xorwf	sprintf@c,w,c
   953  0008AA  B4D8               	btfsc	status,2,c
   954  0008AC  D016               	goto	l1279
   955  0008AE  D001               	goto	l1271
   956  0008B0  D014               	goto	l1279
   957  0008B2                     l1271:
   958                           
   959                           ;doprnt.c: 1306: if(val < dpowers[c])
   960  0008B2  501A               	movf	sprintf@c,w,c
   961  0008B4  0D02               	mullw	2
   962  0008B6  0E01               	movlw	low _dpowers
   963  0008B8  24F3               	addwf	prodl,w,c
   964  0008BA  6EF6               	movwf	tblptrl,c
   965  0008BC  0E08               	movlw	high _dpowers
   966  0008BE  20F4               	addwfc	prodh,w,c
   967  0008C0  6EF7               	movwf	tblptrh,c
   968  0008C2                     	if	0	;There are less than 3 active tblptr bytes
   969  0008C2                     	endif
   970  0008C2  0009               	tblrd		*+
   971  0008C4  50F5               	movf	tablat,w,c
   972  0008C6  5C18               	subwf	sprintf@val,w,c
   973  0008C8  0009               	tblrd		*+
   974  0008CA  50F5               	movf	tablat,w,c
   975  0008CC  5819               	subwfb	sprintf@val+1,w,c
   976  0008CE  A0D8               	btfss	status,0,c
   977  0008D0  D004               	goto	l1279
   978  0008D2  D001               	goto	l1275
   979                           
   980                           ;doprnt.c: 1307: break;
   981  0008D4  D002               	goto	l1279
   982  0008D6                     l1275:
   983  0008D6  2A1A               	incf	sprintf@c,f,c
   984  0008D8  D7E6               	goto	l1267
   985  0008DA                     l1279:
   986                           
   987                           ;doprnt.c: 1422: {
   988                           ;doprnt.c: 1438: if(flag & 0x03)
   989  0008DA  C016  F013         	movff	sprintf@flag,??_sprintf
   990  0008DE  0E03               	movlw	3
   991  0008E0  1613               	andwf	??_sprintf,f,c
   992  0008E2  B4D8               	btfsc	status,2,c
   993  0008E4  D009               	goto	l1285
   994                           
   995                           ;doprnt.c: 1439: ((*sp++ = ('-')));
   996  0008E6  C00D  FFD9         	movff	sprintf@sp,fsr2l
   997  0008EA  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
   998  0008EE  0E2D               	movlw	45
   999  0008F0  6EDF               	movwf	indf2,c
  1000  0008F2  4A0D               	infsnz	sprintf@sp,f,c
  1001  0008F4  2A0E               	incf	sprintf@sp+1,f,c
  1002  0008F6  D000               	goto	l1285
  1003  0008F8                     l1285:
  1004                           
  1005                           ;doprnt.c: 1469: }
  1006                           ;doprnt.c: 1472: prec = c;
  1007  0008F8  C01A  F017         	movff	sprintf@c,sprintf@prec
  1008                           
  1009                           ;doprnt.c: 1474: while(prec--) {
  1010  0008FC  D02A               	goto	l1293
  1011  0008FE                     l1287:
  1012                           
  1013                           ;doprnt.c: 1478: {
  1014                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1015  0008FE  5017               	movf	sprintf@prec,w,c
  1016  000900  0D02               	mullw	2
  1017  000902  0E01               	movlw	low _dpowers
  1018  000904  24F3               	addwf	prodl,w,c
  1019  000906  6EF6               	movwf	tblptrl,c
  1020  000908  0E08               	movlw	high _dpowers
  1021  00090A  20F4               	addwfc	prodh,w,c
  1022  00090C  6EF7               	movwf	tblptrh,c
  1023  00090E                     	if	0	;There are less than 3 active tblptr bytes
  1024  00090E                     	endif
  1025  00090E  0009               	tblrd		*+
  1026  000910  CFF5 F003          	movff	tablat,___lwdiv@divisor
  1027  000914  000A               	tblrd		*-
  1028  000916  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  1029  00091A  C018  F001         	movff	sprintf@val,___lwdiv@dividend
  1030  00091E  C019  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  1031  000922  EC23  F007         	call	___lwdiv	;wreg free
  1032  000926  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  1033  00092A  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  1034  00092E  0E00               	movlw	0
  1035  000930  6E0B               	movwf	___lwmod@divisor+1,c
  1036  000932  0E0A               	movlw	10
  1037  000934  6E0A               	movwf	___lwmod@divisor,c
  1038  000936  EC51  F007         	call	___lwmod	;wreg free
  1039  00093A  5008               	movf	?___lwmod,w,c
  1040  00093C  0F30               	addlw	48
  1041  00093E  6E1A               	movwf	sprintf@c,c
  1042                           
  1043                           ;doprnt.c: 1523: }
  1044                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1045  000940  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1046  000944  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1047  000948  C01A  FFDF         	movff	sprintf@c,indf2
  1048  00094C  4A0D               	infsnz	sprintf@sp,f,c
  1049  00094E  2A0E               	incf	sprintf@sp+1,f,c
  1050  000950  D000               	goto	l1293
  1051  000952                     l1293:
  1052  000952  0617               	decf	sprintf@prec,f,c
  1053  000954  2817               	incf	sprintf@prec,w,c
  1054  000956  B4D8               	btfsc	status,2,c
  1055  000958  D002               	goto	l1295
  1056  00095A  D7D1               	goto	l1287
  1057  00095C  D000               	goto	l1295
  1058  00095E                     l1295:
  1059  00095E  C00F  FFF6         	movff	sprintf@f,tblptrl
  1060  000962  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1061  000966  4A0F               	infsnz	sprintf@f,f,c
  1062  000968  2A10               	incf	sprintf@f+1,f,c
  1063  00096A                     	if	0	;tblptru may be non-zero
  1064  00096A                     	endif
  1065  00096A                     	if	0	;tblptru may be non-zero
  1066  00096A                     	endif
  1067  00096A  0008               	tblrd		*
  1068  00096C  CFF5 F01A          	movff	tablat,sprintf@c
  1069  000970  501A               	movf	sprintf@c,w,c
  1070  000972  B4D8               	btfsc	status,2,c
  1071  000974  D002               	goto	l1297
  1072  000976  D759               	goto	l1243
  1073  000978  D000               	goto	l1297
  1074  00097A                     l1297:
  1075                           
  1076                           ;doprnt.c: 1538: *sp = 0;
  1077  00097A  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1078  00097E  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1079  000982  0E00               	movlw	0
  1080  000984  6EDF               	movwf	indf2,c
  1081  000986  D000               	goto	l169
  1082  000988                     l169:
  1083  000988  0012               	return		;funcret
  1084  00098A                     __end_of_sprintf:
  1085                           	opt stack 0
  1086                           tblptru	equ	0xFF8
  1087                           tblptrh	equ	0xFF7
  1088                           tblptrl	equ	0xFF6
  1089                           tablat	equ	0xFF5
  1090                           prodh	equ	0xFF4
  1091                           prodl	equ	0xFF3
  1092                           wreg	equ	0xFE8
  1093                           indf2	equ	0xFDF
  1094                           postinc2	equ	0xFDE
  1095                           postdec2	equ	0xFDD
  1096                           fsr2h	equ	0xFDA
  1097                           fsr2l	equ	0xFD9
  1098                           status	equ	0xFD8
  1099                           
  1100 ;; *************** function ___lwmod *****************
  1101 ;; Defined at:
  1102 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  1103 ;; Parameters:    Size  Location     Type
  1104 ;;  dividend        2    7[COMRAM] unsigned int 
  1105 ;;  divisor         2    9[COMRAM] unsigned int 
  1106 ;; Auto vars:     Size  Location     Type
  1107 ;;  counter         1   11[COMRAM] unsigned char 
  1108 ;; Return value:  Size  Location     Type
  1109 ;;                  2    7[COMRAM] unsigned int 
  1110 ;; Registers used:
  1111 ;;		wreg, status,2, status,0
  1112 ;; Tracked objects:
  1113 ;;		On entry : 0/0
  1114 ;;		On exit  : 0/0
  1115 ;;		Unchanged: 0/0
  1116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1117 ;;      Params:         4       0       0       0       0       0       0       0       0
  1118 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1119 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1120 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1121 ;;Total ram usage:        5 bytes
  1122 ;; Hardware stack levels used:    1
  1123 ;; This function calls:
  1124 ;;		Nothing
  1125 ;; This function is called by:
  1126 ;;		_sprintf
  1127 ;; This function uses a non-reentrant model
  1128 ;;
  1129                           
  1130                           	psect	text4
  1131  000EA2                     __ptext4:
  1132                           	opt stack 0
  1133  000EA2                     ___lwmod:
  1134                           	opt stack 29
  1135                           
  1136                           ;incstack = 0
  1137  000EA2  500A               	movf	___lwmod@divisor,w,c
  1138  000EA4  100B               	iorwf	___lwmod@divisor+1,w,c
  1139  000EA6  B4D8               	btfsc	status,2,c
  1140  000EA8  D01D               	goto	l700
  1141  000EAA  0E01               	movlw	1
  1142  000EAC  6E0C               	movwf	___lwmod@counter,c
  1143  000EAE  D005               	goto	l1139
  1144  000EB0                     l1137:
  1145  000EB0  90D8               	bcf	status,0,c
  1146  000EB2  360A               	rlcf	___lwmod@divisor,f,c
  1147  000EB4  360B               	rlcf	___lwmod@divisor+1,f,c
  1148  000EB6  2A0C               	incf	___lwmod@counter,f,c
  1149  000EB8  D000               	goto	l1139
  1150  000EBA                     l1139:
  1151  000EBA  BE0B               	btfsc	___lwmod@divisor+1,7,c
  1152  000EBC  D002               	goto	l1141
  1153  000EBE  D7F8               	goto	l1137
  1154  000EC0  D000               	goto	l1141
  1155  000EC2                     l1141:
  1156  000EC2  500A               	movf	___lwmod@divisor,w,c
  1157  000EC4  5C08               	subwf	___lwmod@dividend,w,c
  1158  000EC6  500B               	movf	___lwmod@divisor+1,w,c
  1159  000EC8  5809               	subwfb	___lwmod@dividend+1,w,c
  1160  000ECA  A0D8               	btfss	status,0,c
  1161  000ECC  D005               	goto	l1145
  1162  000ECE  500A               	movf	___lwmod@divisor,w,c
  1163  000ED0  5E08               	subwf	___lwmod@dividend,f,c
  1164  000ED2  500B               	movf	___lwmod@divisor+1,w,c
  1165  000ED4  5A09               	subwfb	___lwmod@dividend+1,f,c
  1166  000ED6  D000               	goto	l1145
  1167  000ED8                     l1145:
  1168  000ED8  90D8               	bcf	status,0,c
  1169  000EDA  320B               	rrcf	___lwmod@divisor+1,f,c
  1170  000EDC  320A               	rrcf	___lwmod@divisor,f,c
  1171  000EDE  2E0C               	decfsz	___lwmod@counter,f,c
  1172  000EE0  D7F0               	goto	l1141
  1173  000EE2  D000               	goto	l700
  1174  000EE4                     l700:
  1175  000EE4  C008  F008         	movff	___lwmod@dividend,?___lwmod
  1176  000EE8  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  1177  000EEC  0012               	return		;funcret
  1178  000EEE                     __end_of___lwmod:
  1179                           	opt stack 0
  1180                           tblptru	equ	0xFF8
  1181                           tblptrh	equ	0xFF7
  1182                           tblptrl	equ	0xFF6
  1183                           tablat	equ	0xFF5
  1184                           prodh	equ	0xFF4
  1185                           prodl	equ	0xFF3
  1186                           wreg	equ	0xFE8
  1187                           indf2	equ	0xFDF
  1188                           postinc2	equ	0xFDE
  1189                           postdec2	equ	0xFDD
  1190                           fsr2h	equ	0xFDA
  1191                           fsr2l	equ	0xFD9
  1192                           status	equ	0xFD8
  1193                           
  1194 ;; *************** function ___lwdiv *****************
  1195 ;; Defined at:
  1196 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  1197 ;; Parameters:    Size  Location     Type
  1198 ;;  dividend        2    0[COMRAM] unsigned int 
  1199 ;;  divisor         2    2[COMRAM] unsigned int 
  1200 ;; Auto vars:     Size  Location     Type
  1201 ;;  quotient        2    4[COMRAM] unsigned int 
  1202 ;;  counter         1    6[COMRAM] unsigned char 
  1203 ;; Return value:  Size  Location     Type
  1204 ;;                  2    0[COMRAM] unsigned int 
  1205 ;; Registers used:
  1206 ;;		wreg, status,2, status,0
  1207 ;; Tracked objects:
  1208 ;;		On entry : 0/0
  1209 ;;		On exit  : 0/0
  1210 ;;		Unchanged: 0/0
  1211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1212 ;;      Params:         4       0       0       0       0       0       0       0       0
  1213 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1214 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1215 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1216 ;;Total ram usage:        7 bytes
  1217 ;; Hardware stack levels used:    1
  1218 ;; This function calls:
  1219 ;;		Nothing
  1220 ;; This function is called by:
  1221 ;;		_sprintf
  1222 ;; This function uses a non-reentrant model
  1223 ;;
  1224                           
  1225                           	psect	text5
  1226  000E46                     __ptext5:
  1227                           	opt stack 0
  1228  000E46                     ___lwdiv:
  1229                           	opt stack 29
  1230                           
  1231                           ;incstack = 0
  1232  000E46  0E00               	movlw	0
  1233  000E48  6E06               	movwf	___lwdiv@quotient+1,c
  1234  000E4A  0E00               	movlw	0
  1235  000E4C  6E05               	movwf	___lwdiv@quotient,c
  1236  000E4E  5003               	movf	___lwdiv@divisor,w,c
  1237  000E50  1004               	iorwf	___lwdiv@divisor+1,w,c
  1238  000E52  B4D8               	btfsc	status,2,c
  1239  000E54  D021               	goto	l690
  1240  000E56  0E01               	movlw	1
  1241  000E58  6E07               	movwf	___lwdiv@counter,c
  1242  000E5A  D005               	goto	l1119
  1243  000E5C                     l1117:
  1244  000E5C  90D8               	bcf	status,0,c
  1245  000E5E  3603               	rlcf	___lwdiv@divisor,f,c
  1246  000E60  3604               	rlcf	___lwdiv@divisor+1,f,c
  1247  000E62  2A07               	incf	___lwdiv@counter,f,c
  1248  000E64  D000               	goto	l1119
  1249  000E66                     l1119:
  1250  000E66  BE04               	btfsc	___lwdiv@divisor+1,7,c
  1251  000E68  D002               	goto	l1121
  1252  000E6A  D7F8               	goto	l1117
  1253  000E6C  D000               	goto	l1121
  1254  000E6E                     l1121:
  1255  000E6E  90D8               	bcf	status,0,c
  1256  000E70  3605               	rlcf	___lwdiv@quotient,f,c
  1257  000E72  3606               	rlcf	___lwdiv@quotient+1,f,c
  1258  000E74  5003               	movf	___lwdiv@divisor,w,c
  1259  000E76  5C01               	subwf	___lwdiv@dividend,w,c
  1260  000E78  5004               	movf	___lwdiv@divisor+1,w,c
  1261  000E7A  5802               	subwfb	___lwdiv@dividend+1,w,c
  1262  000E7C  A0D8               	btfss	status,0,c
  1263  000E7E  D006               	goto	l1129
  1264  000E80  5003               	movf	___lwdiv@divisor,w,c
  1265  000E82  5E01               	subwf	___lwdiv@dividend,f,c
  1266  000E84  5004               	movf	___lwdiv@divisor+1,w,c
  1267  000E86  5A02               	subwfb	___lwdiv@dividend+1,f,c
  1268  000E88  8005               	bsf	___lwdiv@quotient,0,c
  1269  000E8A  D000               	goto	l1129
  1270  000E8C                     l1129:
  1271  000E8C  90D8               	bcf	status,0,c
  1272  000E8E  3204               	rrcf	___lwdiv@divisor+1,f,c
  1273  000E90  3203               	rrcf	___lwdiv@divisor,f,c
  1274  000E92  2E07               	decfsz	___lwdiv@counter,f,c
  1275  000E94  D7EC               	goto	l1121
  1276  000E96  D000               	goto	l690
  1277  000E98                     l690:
  1278  000E98  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  1279  000E9C  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1280  000EA0  0012               	return		;funcret
  1281  000EA2                     __end_of___lwdiv:
  1282                           	opt stack 0
  1283                           tblptru	equ	0xFF8
  1284                           tblptrh	equ	0xFF7
  1285                           tblptrl	equ	0xFF6
  1286                           tablat	equ	0xFF5
  1287                           prodh	equ	0xFF4
  1288                           prodl	equ	0xFF3
  1289                           wreg	equ	0xFE8
  1290                           indf2	equ	0xFDF
  1291                           postinc2	equ	0xFDE
  1292                           postdec2	equ	0xFDD
  1293                           fsr2h	equ	0xFDA
  1294                           fsr2l	equ	0xFD9
  1295                           status	equ	0xFD8
  1296                           
  1297 ;; *************** function _read_keypad *****************
  1298 ;; Defined at:
  1299 ;;		line 18 in file "main.c"
  1300 ;; Parameters:    Size  Location     Type
  1301 ;;		None
  1302 ;; Auto vars:     Size  Location     Type
  1303 ;;  col             2    3[COMRAM] int 
  1304 ;;  key             1    2[COMRAM] unsigned char 
  1305 ;; Return value:  Size  Location     Type
  1306 ;;                  1    wreg      unsigned char 
  1307 ;; Registers used:
  1308 ;;		wreg, status,2, status,0
  1309 ;; Tracked objects:
  1310 ;;		On entry : 0/0
  1311 ;;		On exit  : 0/0
  1312 ;;		Unchanged: 0/0
  1313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1314 ;;      Params:         0       0       0       0       0       0       0       0       0
  1315 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1316 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1317 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1318 ;;Total ram usage:        5 bytes
  1319 ;; Hardware stack levels used:    1
  1320 ;; This function calls:
  1321 ;;		Nothing
  1322 ;; This function is called by:
  1323 ;;		_main
  1324 ;; This function uses a non-reentrant model
  1325 ;;
  1326                           
  1327                           	psect	text6
  1328  000D9C                     __ptext6:
  1329                           	opt stack 0
  1330  000D9C                     _read_keypad:
  1331                           	opt stack 30
  1332                           
  1333                           ;main.c: 19: char key = '\0';
  1334                           
  1335                           ;incstack = 0
  1336  000D9C  0E00               	movlw	0
  1337  000D9E  6E03               	movwf	read_keypad@key,c
  1338                           
  1339                           ;main.c: 20: for (int col = 0; col < 4; col++) {
  1340  000DA0  0E00               	movlw	0
  1341  000DA2  6E05               	movwf	read_keypad@col+1,c
  1342  000DA4  0E00               	movlw	0
  1343  000DA6  6E04               	movwf	read_keypad@col,c
  1344  000DA8                     l841:
  1345  000DA8  BE05               	btfsc	read_keypad@col+1,7,c
  1346  000DAA  D008               	goto	l845
  1347  000DAC  5005               	movf	read_keypad@col+1,w,c
  1348  000DAE  E148               	bnz	l873
  1349  000DB0  0E04               	movlw	4
  1350  000DB2  5C04               	subwf	read_keypad@col,w,c
  1351  000DB4  B0D8               	btfsc	status,0,c
  1352  000DB6  D044               	goto	l873
  1353  000DB8  D001               	goto	l845
  1354  000DBA  D042               	goto	l873
  1355  000DBC                     l845:
  1356                           
  1357                           ;main.c: 21: TRISB = 0xF0 | (1 << col);
  1358  000DBC  C004  F001         	movff	read_keypad@col,??_read_keypad
  1359  000DC0  0E01               	movlw	1
  1360  000DC2  6E02               	movwf	(??_read_keypad+1)& (0+255),c
  1361  000DC4  2A01               	incf	??_read_keypad,f,c
  1362  000DC6  D002               	goto	u144
  1363  000DC8                     u145:
  1364  000DC8  90D8               	bcf	status,0,c
  1365  000DCA  3602               	rlcf	??_read_keypad+1,f,c
  1366  000DCC                     u144:
  1367  000DCC  2E01               	decfsz	??_read_keypad,f,c
  1368  000DCE  D7FC               	goto	u145
  1369  000DD0  5002               	movf	??_read_keypad+1,w,c
  1370  000DD2  09F0               	iorlw	240
  1371  000DD4  6E93               	movwf	3987,c	;volatile
  1372                           
  1373                           ;main.c: 22: LATB = ~(1 << col);
  1374  000DD6  C004  F001         	movff	read_keypad@col,??_read_keypad
  1375  000DDA  0E01               	movlw	1
  1376  000DDC  6E02               	movwf	(??_read_keypad+1)& (0+255),c
  1377  000DDE  2A01               	incf	??_read_keypad,f,c
  1378  000DE0  D002               	goto	u154
  1379  000DE2                     u155:
  1380  000DE2  90D8               	bcf	status,0,c
  1381  000DE4  3602               	rlcf	??_read_keypad+1,f,c
  1382  000DE6                     u154:
  1383  000DE6  2E01               	decfsz	??_read_keypad,f,c
  1384  000DE8  D7FC               	goto	u155
  1385  000DEA  5002               	movf	??_read_keypad+1,w,c
  1386  000DEC  0AFF               	xorlw	255
  1387  000DEE  6E8A               	movwf	3978,c	;volatile
  1388                           
  1389                           ;main.c: 24: _delay((unsigned long)((20)*(8000000/4000.0)));
  1390  000DF0  0E34               	movlw	52
  1391  000DF2  6E01               	movwf	??_read_keypad& (0+255),c
  1392  000DF4  0EF2               	movlw	242
  1393  000DF6                     u767:
  1394  000DF6  2EE8               	decfsz	wreg,f,c
  1395  000DF8  D7FE               	goto	u767
  1396  000DFA  2E01               	decfsz	??_read_keypad& (0+255),f,c
  1397  000DFC  D7FC               	goto	u767
  1398                           
  1399                           ;main.c: 26: if (PORTAbits.RA0 == 0) key = '1' + col - 0;
  1400  000DFE  B080               	btfsc	3968,0,c	;volatile
  1401  000E00  D004               	goto	l853
  1402  000E02  5004               	movf	read_keypad@col,w,c
  1403  000E04  0F31               	addlw	49
  1404  000E06  6E03               	movwf	read_keypad@key,c
  1405  000E08  D000               	goto	l853
  1406  000E0A                     l853:
  1407                           
  1408                           ;main.c: 27: if (PORTAbits.RA1 == 0) key = '4' + col - 1;
  1409  000E0A  B280               	btfsc	3968,1,c	;volatile
  1410  000E0C  D004               	goto	l857
  1411  000E0E  5004               	movf	read_keypad@col,w,c
  1412  000E10  0F33               	addlw	51
  1413  000E12  6E03               	movwf	read_keypad@key,c
  1414  000E14  D000               	goto	l857
  1415  000E16                     l857:
  1416                           
  1417                           ;main.c: 28: if (PORTAbits.RA2 == 0) key = '7' + col - 2;
  1418  000E16  B480               	btfsc	3968,2,c	;volatile
  1419  000E18  D004               	goto	l861
  1420  000E1A  5004               	movf	read_keypad@col,w,c
  1421  000E1C  0F35               	addlw	53
  1422  000E1E  6E03               	movwf	read_keypad@key,c
  1423  000E20  D000               	goto	l861
  1424  000E22                     l861:
  1425                           
  1426                           ;main.c: 29: if (PORTAbits.RA3 == 0) key = '*' + col - 3;
  1427  000E22  B680               	btfsc	3968,3,c	;volatile
  1428  000E24  D004               	goto	l865
  1429  000E26  5004               	movf	read_keypad@col,w,c
  1430  000E28  0F27               	addlw	39
  1431  000E2A  6E03               	movwf	read_keypad@key,c
  1432  000E2C  D000               	goto	l865
  1433  000E2E                     l865:
  1434                           
  1435                           ;main.c: 31: if (key != '\0') break;
  1436  000E2E  5003               	movf	read_keypad@key,w,c
  1437  000E30  A4D8               	btfss	status,2,c
  1438  000E32  D006               	goto	l873
  1439  000E34  D001               	goto	l869
  1440  000E36  D004               	goto	l873
  1441  000E38                     l869:
  1442  000E38  4A04               	infsnz	read_keypad@col,f,c
  1443  000E3A  2A05               	incf	read_keypad@col+1,f,c
  1444  000E3C  D7B5               	goto	l841
  1445  000E3E  D000               	goto	l873
  1446  000E40                     l873:
  1447                           
  1448                           ;main.c: 32: }
  1449                           ;main.c: 33: return key;
  1450  000E40  5003               	movf	read_keypad@key,w,c
  1451  000E42  D000               	goto	l52
  1452  000E44                     l52:
  1453  000E44  0012               	return		;funcret
  1454  000E46                     __end_of_read_keypad:
  1455                           	opt stack 0
  1456                           tblptru	equ	0xFF8
  1457                           tblptrh	equ	0xFF7
  1458                           tblptrl	equ	0xFF6
  1459                           tablat	equ	0xFF5
  1460                           prodh	equ	0xFF4
  1461                           prodl	equ	0xFF3
  1462                           wreg	equ	0xFE8
  1463                           indf2	equ	0xFDF
  1464                           postinc2	equ	0xFDE
  1465                           postdec2	equ	0xFDD
  1466                           fsr2h	equ	0xFDA
  1467                           fsr2l	equ	0xFD9
  1468                           status	equ	0xFD8
  1469                           
  1470 ;; *************** function _lcd_write_string *****************
  1471 ;; Defined at:
  1472 ;;		line 45 in file "lcd.c"
  1473 ;; Parameters:    Size  Location     Type
  1474 ;;  str             2    3[COMRAM] PTR const unsigned char 
  1475 ;;		 -> STR_1(8), 
  1476 ;; Auto vars:     Size  Location     Type
  1477 ;;		None
  1478 ;; Return value:  Size  Location     Type
  1479 ;;		None               void
  1480 ;; Registers used:
  1481 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1482 ;; Tracked objects:
  1483 ;;		On entry : 0/0
  1484 ;;		On exit  : 0/0
  1485 ;;		Unchanged: 0/0
  1486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1487 ;;      Params:         2       0       0       0       0       0       0       0       0
  1488 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1489 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1490 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1491 ;;Total ram usage:        2 bytes
  1492 ;; Hardware stack levels used:    1
  1493 ;; Hardware stack levels required when called:    2
  1494 ;; This function calls:
  1495 ;;		_lcd_data
  1496 ;; This function is called by:
  1497 ;;		_main
  1498 ;; This function uses a non-reentrant model
  1499 ;;
  1500                           
  1501                           	psect	text7
  1502  000F64                     __ptext7:
  1503                           	opt stack 0
  1504  000F64                     _lcd_write_string:
  1505                           	opt stack 28
  1506                           
  1507                           ;lcd.c: 46: while (*str) {
  1508                           
  1509                           ;incstack = 0
  1510  000F64  D00B               	goto	l1239
  1511  000F66                     l1235:
  1512                           
  1513                           ;lcd.c: 47: lcd_data(*str++);
  1514  000F66  C004  FFF6         	movff	lcd_write_string@str,tblptrl
  1515  000F6A  C005  FFF7         	movff	lcd_write_string@str+1,tblptrh
  1516  000F6E                     	if	0	;tblptru may be non-zero
  1517  000F6E                     	endif
  1518  000F6E                     	if	0	;tblptru may be non-zero
  1519  000F6E                     	endif
  1520  000F6E  0008               	tblrd		*
  1521  000F70  50F5               	movf	tablat,w,c
  1522  000F72  ECD6  F005         	call	_lcd_data
  1523  000F76  4A04               	infsnz	lcd_write_string@str,f,c
  1524  000F78  2A05               	incf	lcd_write_string@str+1,f,c
  1525  000F7A  D000               	goto	l1239
  1526  000F7C                     l1239:
  1527  000F7C  C004  FFF6         	movff	lcd_write_string@str,tblptrl
  1528  000F80  C005  FFF7         	movff	lcd_write_string@str+1,tblptrh
  1529  000F84                     	if	0	;tblptru may be non-zero
  1530  000F84                     	endif
  1531  000F84                     	if	0	;tblptru may be non-zero
  1532  000F84                     	endif
  1533  000F84  0008               	tblrd		*
  1534  000F86  50F5               	movf	tablat,w,c
  1535  000F88  0900               	iorlw	0
  1536  000F8A  A4D8               	btfss	status,2,c
  1537  000F8C  D7EC               	goto	l1235
  1538  000F8E  0012               	return		;funcret
  1539  000F90                     __end_of_lcd_write_string:
  1540                           	opt stack 0
  1541                           tblptru	equ	0xFF8
  1542                           tblptrh	equ	0xFF7
  1543                           tblptrl	equ	0xFF6
  1544                           tablat	equ	0xFF5
  1545                           prodh	equ	0xFF4
  1546                           prodl	equ	0xFF3
  1547                           wreg	equ	0xFE8
  1548                           indf2	equ	0xFDF
  1549                           postinc2	equ	0xFDE
  1550                           postdec2	equ	0xFDD
  1551                           fsr2h	equ	0xFDA
  1552                           fsr2l	equ	0xFD9
  1553                           status	equ	0xFD8
  1554                           
  1555 ;; *************** function _lcd_write_char *****************
  1556 ;; Defined at:
  1557 ;;		line 51 in file "lcd.c"
  1558 ;; Parameters:    Size  Location     Type
  1559 ;;  c               1    wreg     unsigned char 
  1560 ;; Auto vars:     Size  Location     Type
  1561 ;;  c               1    3[COMRAM] unsigned char 
  1562 ;; Return value:  Size  Location     Type
  1563 ;;		None               void
  1564 ;; Registers used:
  1565 ;;		wreg, status,2, status,0, cstack
  1566 ;; Tracked objects:
  1567 ;;		On entry : 0/0
  1568 ;;		On exit  : 0/0
  1569 ;;		Unchanged: 0/0
  1570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1571 ;;      Params:         0       0       0       0       0       0       0       0       0
  1572 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1573 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1574 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1575 ;;Total ram usage:        1 bytes
  1576 ;; Hardware stack levels used:    1
  1577 ;; Hardware stack levels required when called:    2
  1578 ;; This function calls:
  1579 ;;		_lcd_data
  1580 ;; This function is called by:
  1581 ;;		_main
  1582 ;; This function uses a non-reentrant model
  1583 ;;
  1584                           
  1585                           	psect	text8
  1586  001010                     __ptext8:
  1587                           	opt stack 0
  1588  001010                     _lcd_write_char:
  1589                           	opt stack 28
  1590                           
  1591                           ;incstack = 0
  1592                           ;lcd_write_char@c stored from wreg
  1593  001010  6E04               	movwf	lcd_write_char@c,c
  1594                           
  1595                           ;lcd.c: 52: lcd_data(c);
  1596  001012  5004               	movf	lcd_write_char@c,w,c
  1597  001014  ECD6  F005         	call	_lcd_data
  1598  001018  0012               	return		;funcret
  1599  00101A                     __end_of_lcd_write_char:
  1600                           	opt stack 0
  1601                           tblptru	equ	0xFF8
  1602                           tblptrh	equ	0xFF7
  1603                           tblptrl	equ	0xFF6
  1604                           tablat	equ	0xFF5
  1605                           prodh	equ	0xFF4
  1606                           prodl	equ	0xFF3
  1607                           wreg	equ	0xFE8
  1608                           indf2	equ	0xFDF
  1609                           postinc2	equ	0xFDE
  1610                           postdec2	equ	0xFDD
  1611                           fsr2h	equ	0xFDA
  1612                           fsr2l	equ	0xFD9
  1613                           status	equ	0xFD8
  1614                           
  1615 ;; *************** function _lcd_data *****************
  1616 ;; Defined at:
  1617 ;;		line 69 in file "lcd.c"
  1618 ;; Parameters:    Size  Location     Type
  1619 ;;  data            1    wreg     unsigned char 
  1620 ;; Auto vars:     Size  Location     Type
  1621 ;;  data            1    2[COMRAM] unsigned char 
  1622 ;; Return value:  Size  Location     Type
  1623 ;;		None               void
  1624 ;; Registers used:
  1625 ;;		wreg, status,2, status,0, cstack
  1626 ;; Tracked objects:
  1627 ;;		On entry : 0/0
  1628 ;;		On exit  : 0/0
  1629 ;;		Unchanged: 0/0
  1630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1631 ;;      Params:         0       0       0       0       0       0       0       0       0
  1632 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1633 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1634 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1635 ;;Total ram usage:        3 bytes
  1636 ;; Hardware stack levels used:    1
  1637 ;; Hardware stack levels required when called:    1
  1638 ;; This function calls:
  1639 ;;		_lcd_strobe
  1640 ;; This function is called by:
  1641 ;;		_lcd_write_string
  1642 ;;		_lcd_write_char
  1643 ;; This function uses a non-reentrant model
  1644 ;;
  1645                           
  1646                           	psect	text9
  1647  000BAC                     __ptext9:
  1648                           	opt stack 0
  1649  000BAC                     _lcd_data:
  1650                           	opt stack 28
  1651                           
  1652                           ;incstack = 0
  1653                           ;lcd_data@data stored from wreg
  1654  000BAC  6E03               	movwf	lcd_data@data,c
  1655                           
  1656                           ;lcd.c: 70: PORTCbits.RC0 = 1;
  1657  000BAE  8082               	bsf	3970,0,c	;volatile
  1658                           
  1659                           ;lcd.c: 71: PORTCbits.RC2 = (data >> 4) & 1;
  1660  000BB0  C003  F001         	movff	lcd_data@data,??_lcd_data
  1661  000BB4  3A01               	swapf	??_lcd_data,f,c
  1662  000BB6  0E0F               	movlw	15
  1663  000BB8  1601               	andwf	??_lcd_data,f,c
  1664  000BBA  0E01               	movlw	1
  1665  000BBC  1601               	andwf	??_lcd_data,f,c
  1666  000BBE  4601               	rlncf	??_lcd_data,f,c
  1667  000BC0  4601               	rlncf	??_lcd_data,f,c
  1668  000BC2  5082               	movf	3970,w,c	;volatile
  1669  000BC4  1801               	xorwf	??_lcd_data,w,c
  1670  000BC6  0BFB               	andlw	-5
  1671  000BC8  1801               	xorwf	??_lcd_data,w,c
  1672  000BCA  6E82               	movwf	3970,c	;volatile
  1673                           
  1674                           ;lcd.c: 72: PORTCbits.RC3 = (data >> 5) & 1;
  1675  000BCC  C003  F001         	movff	lcd_data@data,??_lcd_data
  1676  000BD0  0E05               	movlw	5
  1677  000BD2  6E02               	movwf	(??_lcd_data+1)& (0+255),c
  1678  000BD4                     u45:
  1679  000BD4  90D8               	bcf	status,0,c
  1680  000BD6  3201               	rrcf	??_lcd_data,f,c
  1681  000BD8  2E02               	decfsz	(??_lcd_data+1)& (0+255),f,c
  1682  000BDA  D7FC               	goto	u45
  1683  000BDC  0E01               	movlw	1
  1684  000BDE  1601               	andwf	??_lcd_data,f,c
  1685  000BE0  4601               	rlncf	??_lcd_data,f,c
  1686  000BE2  4601               	rlncf	??_lcd_data,f,c
  1687  000BE4  4601               	rlncf	??_lcd_data,f,c
  1688  000BE6  5082               	movf	3970,w,c	;volatile
  1689  000BE8  1801               	xorwf	??_lcd_data,w,c
  1690  000BEA  0BF7               	andlw	-9
  1691  000BEC  1801               	xorwf	??_lcd_data,w,c
  1692  000BEE  6E82               	movwf	3970,c	;volatile
  1693                           
  1694                           ;lcd.c: 73: PORTCbits.RC4 = (data >> 6) & 1;
  1695  000BF0  C003  F001         	movff	lcd_data@data,??_lcd_data
  1696  000BF4  0E06               	movlw	6
  1697  000BF6  6E02               	movwf	(??_lcd_data+1)& (0+255),c
  1698  000BF8                     u55:
  1699  000BF8  90D8               	bcf	status,0,c
  1700  000BFA  3201               	rrcf	??_lcd_data,f,c
  1701  000BFC  2E02               	decfsz	(??_lcd_data+1)& (0+255),f,c
  1702  000BFE  D7FC               	goto	u55
  1703  000C00  0E01               	movlw	1
  1704  000C02  1601               	andwf	??_lcd_data,f,c
  1705  000C04  3A01               	swapf	??_lcd_data,f,c
  1706  000C06  5082               	movf	3970,w,c	;volatile
  1707  000C08  1801               	xorwf	??_lcd_data,w,c
  1708  000C0A  0BEF               	andlw	-17
  1709  000C0C  1801               	xorwf	??_lcd_data,w,c
  1710  000C0E  6E82               	movwf	3970,c	;volatile
  1711                           
  1712                           ;lcd.c: 74: PORTCbits.RC5 = (data >> 7) & 1;
  1713  000C10  6A01               	clrf	??_lcd_data& (0+255),c
  1714  000C12  AE03               	btfss	lcd_data@data,7,c
  1715  000C14  D001               	bra	u65
  1716  000C16  2A01               	incf	??_lcd_data& (0+255),f,c
  1717  000C18                     u65:
  1718  000C18  0E01               	movlw	1
  1719  000C1A  1601               	andwf	??_lcd_data,f,c
  1720  000C1C  3A01               	swapf	??_lcd_data,f,c
  1721  000C1E  4601               	rlncf	??_lcd_data,f,c
  1722  000C20  5082               	movf	3970,w,c	;volatile
  1723  000C22  1801               	xorwf	??_lcd_data,w,c
  1724  000C24  0BDF               	andlw	-33
  1725  000C26  1801               	xorwf	??_lcd_data,w,c
  1726  000C28  6E82               	movwf	3970,c	;volatile
  1727                           
  1728                           ;lcd.c: 75: lcd_strobe();
  1729  000C2A  EC0D  F008         	call	_lcd_strobe	;wreg free
  1730                           
  1731                           ;lcd.c: 76: PORTCbits.RC2 = data & 1;
  1732  000C2E  C003  F001         	movff	lcd_data@data,??_lcd_data
  1733  000C32  0E01               	movlw	1
  1734  000C34  1601               	andwf	??_lcd_data,f,c
  1735  000C36  4601               	rlncf	??_lcd_data,f,c
  1736  000C38  4601               	rlncf	??_lcd_data,f,c
  1737  000C3A  5082               	movf	3970,w,c	;volatile
  1738  000C3C  1801               	xorwf	??_lcd_data,w,c
  1739  000C3E  0BFB               	andlw	-5
  1740  000C40  1801               	xorwf	??_lcd_data,w,c
  1741  000C42  6E82               	movwf	3970,c	;volatile
  1742                           
  1743                           ;lcd.c: 77: PORTCbits.RC3 = (data >> 1) & 1;
  1744  000C44  C003  F001         	movff	lcd_data@data,??_lcd_data
  1745  000C48  90D8               	bcf	status,0,c
  1746  000C4A  3201               	rrcf	??_lcd_data,f,c
  1747  000C4C  0E01               	movlw	1
  1748  000C4E  1601               	andwf	??_lcd_data,f,c
  1749  000C50  4601               	rlncf	??_lcd_data,f,c
  1750  000C52  4601               	rlncf	??_lcd_data,f,c
  1751  000C54  4601               	rlncf	??_lcd_data,f,c
  1752  000C56  5082               	movf	3970,w,c	;volatile
  1753  000C58  1801               	xorwf	??_lcd_data,w,c
  1754  000C5A  0BF7               	andlw	-9
  1755  000C5C  1801               	xorwf	??_lcd_data,w,c
  1756  000C5E  6E82               	movwf	3970,c	;volatile
  1757                           
  1758                           ;lcd.c: 78: PORTCbits.RC4 = (data >> 2) & 1;
  1759  000C60  C003  F001         	movff	lcd_data@data,??_lcd_data
  1760  000C64  90D8               	bcf	status,0,c
  1761  000C66  3201               	rrcf	??_lcd_data,f,c
  1762  000C68  90D8               	bcf	status,0,c
  1763  000C6A  3201               	rrcf	??_lcd_data,f,c
  1764  000C6C  0E01               	movlw	1
  1765  000C6E  1601               	andwf	??_lcd_data,f,c
  1766  000C70  3A01               	swapf	??_lcd_data,f,c
  1767  000C72  5082               	movf	3970,w,c	;volatile
  1768  000C74  1801               	xorwf	??_lcd_data,w,c
  1769  000C76  0BEF               	andlw	-17
  1770  000C78  1801               	xorwf	??_lcd_data,w,c
  1771  000C7A  6E82               	movwf	3970,c	;volatile
  1772                           
  1773                           ;lcd.c: 79: PORTCbits.RC5 = (data >> 3) & 1;
  1774  000C7C  C003  F001         	movff	lcd_data@data,??_lcd_data
  1775  000C80  90D8               	bcf	status,0,c
  1776  000C82  3201               	rrcf	??_lcd_data,f,c
  1777  000C84  90D8               	bcf	status,0,c
  1778  000C86  3201               	rrcf	??_lcd_data,f,c
  1779  000C88  90D8               	bcf	status,0,c
  1780  000C8A  3201               	rrcf	??_lcd_data,f,c
  1781  000C8C  0E01               	movlw	1
  1782  000C8E  1601               	andwf	??_lcd_data,f,c
  1783  000C90  3A01               	swapf	??_lcd_data,f,c
  1784  000C92  4601               	rlncf	??_lcd_data,f,c
  1785  000C94  5082               	movf	3970,w,c	;volatile
  1786  000C96  1801               	xorwf	??_lcd_data,w,c
  1787  000C98  0BDF               	andlw	-33
  1788  000C9A  1801               	xorwf	??_lcd_data,w,c
  1789  000C9C  6E82               	movwf	3970,c	;volatile
  1790                           
  1791                           ;lcd.c: 80: lcd_strobe();
  1792  000C9E  EC0D  F008         	call	_lcd_strobe	;wreg free
  1793  000CA2  0012               	return		;funcret
  1794  000CA4                     __end_of_lcd_data:
  1795                           	opt stack 0
  1796                           tblptru	equ	0xFF8
  1797                           tblptrh	equ	0xFF7
  1798                           tblptrl	equ	0xFF6
  1799                           tablat	equ	0xFF5
  1800                           prodh	equ	0xFF4
  1801                           prodl	equ	0xFF3
  1802                           wreg	equ	0xFE8
  1803                           indf2	equ	0xFDF
  1804                           postinc2	equ	0xFDE
  1805                           postdec2	equ	0xFDD
  1806                           fsr2h	equ	0xFDA
  1807                           fsr2l	equ	0xFD9
  1808                           status	equ	0xFD8
  1809                           
  1810 ;; *************** function _lcd_set_cursor *****************
  1811 ;; Defined at:
  1812 ;;		line 35 in file "lcd.c"
  1813 ;; Parameters:    Size  Location     Type
  1814 ;;  row             2    3[COMRAM] int 
  1815 ;;  col             2    5[COMRAM] int 
  1816 ;; Auto vars:     Size  Location     Type
  1817 ;;  address         2    7[COMRAM] int 
  1818 ;; Return value:  Size  Location     Type
  1819 ;;		None               void
  1820 ;; Registers used:
  1821 ;;		wreg, status,2, status,0, cstack
  1822 ;; Tracked objects:
  1823 ;;		On entry : 0/0
  1824 ;;		On exit  : 0/0
  1825 ;;		Unchanged: 0/0
  1826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1827 ;;      Params:         4       0       0       0       0       0       0       0       0
  1828 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1829 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1830 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1831 ;;Total ram usage:        6 bytes
  1832 ;; Hardware stack levels used:    1
  1833 ;; Hardware stack levels required when called:    2
  1834 ;; This function calls:
  1835 ;;		_lcd_command
  1836 ;; This function is called by:
  1837 ;;		_main
  1838 ;; This function uses a non-reentrant model
  1839 ;;
  1840                           
  1841                           	psect	text10
  1842  000F30                     __ptext10:
  1843                           	opt stack 0
  1844  000F30                     _lcd_set_cursor:
  1845                           	opt stack 28
  1846                           
  1847                           ;lcd.c: 36: int address = 0;
  1848                           
  1849                           ;incstack = 0
  1850  000F30  0E00               	movlw	0
  1851  000F32  6E09               	movwf	lcd_set_cursor@address+1,c
  1852  000F34  0E00               	movlw	0
  1853  000F36  6E08               	movwf	lcd_set_cursor@address,c
  1854                           
  1855                           ;lcd.c: 37: if (row == 1) {
  1856  000F38  0404               	decf	lcd_set_cursor@row,w,c
  1857  000F3A  1005               	iorwf	lcd_set_cursor@row+1,w,c
  1858  000F3C  A4D8               	btfss	status,2,c
  1859  000F3E  D002               	goto	l1227
  1860                           
  1861                           ;lcd.c: 38: address = 0x80 + col - 1;
  1862  000F40  0E7F               	movlw	127
  1863  000F42  D006               	goto	L2
  1864  000F44                     l1227:
  1865  000F44  0E02               	movlw	2
  1866  000F46  1804               	xorwf	lcd_set_cursor@row,w,c
  1867  000F48  1005               	iorwf	lcd_set_cursor@row+1,w,c
  1868  000F4A  A4D8               	btfss	status,2,c
  1869  000F4C  D007               	goto	l1231
  1870                           
  1871                           ;lcd.c: 40: address = 0xC0 + col - 1;
  1872  000F4E  0EBF               	movlw	191
  1873  000F50                     L2:
  1874  000F50  2406               	addwf	lcd_set_cursor@col,w,c
  1875  000F52  6E08               	movwf	lcd_set_cursor@address,c
  1876  000F54  0E00               	movlw	0
  1877  000F56  2007               	addwfc	lcd_set_cursor@col+1,w,c
  1878  000F58  6E09               	movwf	lcd_set_cursor@address+1,c
  1879  000F5A  D000               	goto	l1231
  1880  000F5C                     l1231:
  1881                           
  1882                           ;lcd.c: 41: }
  1883                           ;lcd.c: 42: lcd_command(address);
  1884  000F5C  5008               	movf	lcd_set_cursor@address,w,c
  1885  000F5E  EC52  F006         	call	_lcd_command
  1886  000F62  0012               	return		;funcret
  1887  000F64                     __end_of_lcd_set_cursor:
  1888                           	opt stack 0
  1889                           tblptru	equ	0xFF8
  1890                           tblptrh	equ	0xFF7
  1891                           tblptrl	equ	0xFF6
  1892                           tablat	equ	0xFF5
  1893                           prodh	equ	0xFF4
  1894                           prodl	equ	0xFF3
  1895                           wreg	equ	0xFE8
  1896                           indf2	equ	0xFDF
  1897                           postinc2	equ	0xFDE
  1898                           postdec2	equ	0xFDD
  1899                           fsr2h	equ	0xFDA
  1900                           fsr2l	equ	0xFD9
  1901                           status	equ	0xFD8
  1902                           
  1903 ;; *************** function _lcd_init *****************
  1904 ;; Defined at:
  1905 ;;		line 18 in file "lcd.c"
  1906 ;; Parameters:    Size  Location     Type
  1907 ;;		None
  1908 ;; Auto vars:     Size  Location     Type
  1909 ;;		None
  1910 ;; Return value:  Size  Location     Type
  1911 ;;		None               void
  1912 ;; Registers used:
  1913 ;;		wreg, status,2, status,0, cstack
  1914 ;; Tracked objects:
  1915 ;;		On entry : 0/0
  1916 ;;		On exit  : 0/0
  1917 ;;		Unchanged: 0/0
  1918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1919 ;;      Params:         0       0       0       0       0       0       0       0       0
  1920 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1921 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1922 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1923 ;;Total ram usage:        1 bytes
  1924 ;; Hardware stack levels used:    1
  1925 ;; Hardware stack levels required when called:    2
  1926 ;; This function calls:
  1927 ;;		_lcd_command
  1928 ;; This function is called by:
  1929 ;;		_main
  1930 ;; This function uses a non-reentrant model
  1931 ;;
  1932                           
  1933                           	psect	text11
  1934  000EEE                     __ptext11:
  1935                           	opt stack 0
  1936  000EEE                     _lcd_init:
  1937                           	opt stack 28
  1938                           
  1939                           ;lcd.c: 19: TRISC = 0x00;
  1940                           
  1941                           ;incstack = 0
  1942  000EEE  0E00               	movlw	0
  1943  000EF0  6E94               	movwf	3988,c	;volatile
  1944                           
  1945                           ;lcd.c: 20: _delay((unsigned long)((20)*(8000000/4000.0)));
  1946  000EF2  0E34               	movlw	52
  1947  000EF4  6E04               	movwf	??_lcd_init& (0+255),c
  1948  000EF6  0EF2               	movlw	242
  1949  000EF8                     u777:
  1950  000EF8  2EE8               	decfsz	wreg,f,c
  1951  000EFA  D7FE               	goto	u777
  1952  000EFC  2E04               	decfsz	??_lcd_init& (0+255),f,c
  1953  000EFE  D7FC               	goto	u777
  1954                           
  1955                           ;lcd.c: 22: lcd_command(0x02);
  1956  000F00  0E02               	movlw	2
  1957  000F02  EC52  F006         	call	_lcd_command
  1958                           
  1959                           ;lcd.c: 23: lcd_command(0x28);
  1960  000F06  0E28               	movlw	40
  1961  000F08  EC52  F006         	call	_lcd_command
  1962                           
  1963                           ;lcd.c: 24: lcd_command(0x0C);
  1964  000F0C  0E0C               	movlw	12
  1965  000F0E  EC52  F006         	call	_lcd_command
  1966                           
  1967                           ;lcd.c: 25: lcd_command(0x06);
  1968  000F12  0E06               	movlw	6
  1969  000F14  EC52  F006         	call	_lcd_command
  1970                           
  1971                           ;lcd.c: 26: lcd_command(0x01);
  1972  000F18  0E01               	movlw	1
  1973  000F1A  EC52  F006         	call	_lcd_command
  1974                           
  1975                           ;lcd.c: 27: _delay((unsigned long)((2)*(8000000/4000.0)));
  1976  000F1E  0E06               	movlw	6
  1977  000F20  6E04               	movwf	??_lcd_init& (0+255),c
  1978  000F22  0E30               	movlw	48
  1979  000F24                     u787:
  1980  000F24  2EE8               	decfsz	wreg,f,c
  1981  000F26  D7FE               	goto	u787
  1982  000F28  2E04               	decfsz	??_lcd_init& (0+255),f,c
  1983  000F2A  D7FC               	goto	u787
  1984  000F2C  D000               	nop2	
  1985  000F2E  0012               	return		;funcret
  1986  000F30                     __end_of_lcd_init:
  1987                           	opt stack 0
  1988                           tblptru	equ	0xFF8
  1989                           tblptrh	equ	0xFF7
  1990                           tblptrl	equ	0xFF6
  1991                           tablat	equ	0xFF5
  1992                           prodh	equ	0xFF4
  1993                           prodl	equ	0xFF3
  1994                           wreg	equ	0xFE8
  1995                           indf2	equ	0xFDF
  1996                           postinc2	equ	0xFDE
  1997                           postdec2	equ	0xFDD
  1998                           fsr2h	equ	0xFDA
  1999                           fsr2l	equ	0xFD9
  2000                           status	equ	0xFD8
  2001                           
  2002 ;; *************** function _lcd_clear *****************
  2003 ;; Defined at:
  2004 ;;		line 30 in file "lcd.c"
  2005 ;; Parameters:    Size  Location     Type
  2006 ;;		None
  2007 ;; Auto vars:     Size  Location     Type
  2008 ;;		None
  2009 ;; Return value:  Size  Location     Type
  2010 ;;		None               void
  2011 ;; Registers used:
  2012 ;;		wreg, status,2, status,0, cstack
  2013 ;; Tracked objects:
  2014 ;;		On entry : 0/0
  2015 ;;		On exit  : 0/0
  2016 ;;		Unchanged: 0/0
  2017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2018 ;;      Params:         0       0       0       0       0       0       0       0       0
  2019 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2020 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2021 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2022 ;;Total ram usage:        1 bytes
  2023 ;; Hardware stack levels used:    1
  2024 ;; Hardware stack levels required when called:    2
  2025 ;; This function calls:
  2026 ;;		_lcd_command
  2027 ;; This function is called by:
  2028 ;;		_main
  2029 ;; This function uses a non-reentrant model
  2030 ;;
  2031                           
  2032                           	psect	text12
  2033  000FE2                     __ptext12:
  2034                           	opt stack 0
  2035  000FE2                     _lcd_clear:
  2036                           	opt stack 28
  2037                           
  2038                           ;lcd.c: 31: lcd_command(0x01);
  2039                           
  2040                           ;incstack = 0
  2041  000FE2  0E01               	movlw	1
  2042  000FE4  EC52  F006         	call	_lcd_command
  2043                           
  2044                           ;lcd.c: 32: _delay((unsigned long)((2)*(8000000/4000.0)));
  2045  000FE8  0E06               	movlw	6
  2046  000FEA  6E04               	movwf	??_lcd_clear& (0+255),c
  2047  000FEC  0E30               	movlw	48
  2048  000FEE                     u797:
  2049  000FEE  2EE8               	decfsz	wreg,f,c
  2050  000FF0  D7FE               	goto	u797
  2051  000FF2  2E04               	decfsz	??_lcd_clear& (0+255),f,c
  2052  000FF4  D7FC               	goto	u797
  2053  000FF6  D000               	nop2	
  2054  000FF8  0012               	return		;funcret
  2055  000FFA                     __end_of_lcd_clear:
  2056                           	opt stack 0
  2057                           tblptru	equ	0xFF8
  2058                           tblptrh	equ	0xFF7
  2059                           tblptrl	equ	0xFF6
  2060                           tablat	equ	0xFF5
  2061                           prodh	equ	0xFF4
  2062                           prodl	equ	0xFF3
  2063                           wreg	equ	0xFE8
  2064                           indf2	equ	0xFDF
  2065                           postinc2	equ	0xFDE
  2066                           postdec2	equ	0xFDD
  2067                           fsr2h	equ	0xFDA
  2068                           fsr2l	equ	0xFD9
  2069                           status	equ	0xFD8
  2070                           
  2071 ;; *************** function _lcd_command *****************
  2072 ;; Defined at:
  2073 ;;		line 55 in file "lcd.c"
  2074 ;; Parameters:    Size  Location     Type
  2075 ;;  cmd             1    wreg     unsigned char 
  2076 ;; Auto vars:     Size  Location     Type
  2077 ;;  cmd             1    2[COMRAM] unsigned char 
  2078 ;; Return value:  Size  Location     Type
  2079 ;;		None               void
  2080 ;; Registers used:
  2081 ;;		wreg, status,2, status,0, cstack
  2082 ;; Tracked objects:
  2083 ;;		On entry : 0/0
  2084 ;;		On exit  : 0/0
  2085 ;;		Unchanged: 0/0
  2086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2087 ;;      Params:         0       0       0       0       0       0       0       0       0
  2088 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2089 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2090 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2091 ;;Total ram usage:        3 bytes
  2092 ;; Hardware stack levels used:    1
  2093 ;; Hardware stack levels required when called:    1
  2094 ;; This function calls:
  2095 ;;		_lcd_strobe
  2096 ;; This function is called by:
  2097 ;;		_lcd_init
  2098 ;;		_lcd_clear
  2099 ;;		_lcd_set_cursor
  2100 ;; This function uses a non-reentrant model
  2101 ;;
  2102                           
  2103                           	psect	text13
  2104  000CA4                     __ptext13:
  2105                           	opt stack 0
  2106  000CA4                     _lcd_command:
  2107                           	opt stack 28
  2108                           
  2109                           ;incstack = 0
  2110                           ;lcd_command@cmd stored from wreg
  2111  000CA4  6E03               	movwf	lcd_command@cmd,c
  2112                           
  2113                           ;lcd.c: 56: PORTCbits.RC0 = 0;
  2114  000CA6  9082               	bcf	3970,0,c	;volatile
  2115                           
  2116                           ;lcd.c: 57: PORTCbits.RC2 = (cmd >> 4) & 1;
  2117  000CA8  C003  F001         	movff	lcd_command@cmd,??_lcd_command
  2118  000CAC  3A01               	swapf	??_lcd_command,f,c
  2119  000CAE  0E0F               	movlw	15
  2120  000CB0  1601               	andwf	??_lcd_command,f,c
  2121  000CB2  0E01               	movlw	1
  2122  000CB4  1601               	andwf	??_lcd_command,f,c
  2123  000CB6  4601               	rlncf	??_lcd_command,f,c
  2124  000CB8  4601               	rlncf	??_lcd_command,f,c
  2125  000CBA  5082               	movf	3970,w,c	;volatile
  2126  000CBC  1801               	xorwf	??_lcd_command,w,c
  2127  000CBE  0BFB               	andlw	-5
  2128  000CC0  1801               	xorwf	??_lcd_command,w,c
  2129  000CC2  6E82               	movwf	3970,c	;volatile
  2130                           
  2131                           ;lcd.c: 58: PORTCbits.RC3 = (cmd >> 5) & 1;
  2132  000CC4  C003  F001         	movff	lcd_command@cmd,??_lcd_command
  2133  000CC8  0E05               	movlw	5
  2134  000CCA  6E02               	movwf	(??_lcd_command+1)& (0+255),c
  2135  000CCC                     u15:
  2136  000CCC  90D8               	bcf	status,0,c
  2137  000CCE  3201               	rrcf	??_lcd_command,f,c
  2138  000CD0  2E02               	decfsz	(??_lcd_command+1)& (0+255),f,c
  2139  000CD2  D7FC               	goto	u15
  2140  000CD4  0E01               	movlw	1
  2141  000CD6  1601               	andwf	??_lcd_command,f,c
  2142  000CD8  4601               	rlncf	??_lcd_command,f,c
  2143  000CDA  4601               	rlncf	??_lcd_command,f,c
  2144  000CDC  4601               	rlncf	??_lcd_command,f,c
  2145  000CDE  5082               	movf	3970,w,c	;volatile
  2146  000CE0  1801               	xorwf	??_lcd_command,w,c
  2147  000CE2  0BF7               	andlw	-9
  2148  000CE4  1801               	xorwf	??_lcd_command,w,c
  2149  000CE6  6E82               	movwf	3970,c	;volatile
  2150                           
  2151                           ;lcd.c: 59: PORTCbits.RC4 = (cmd >> 6) & 1;
  2152  000CE8  C003  F001         	movff	lcd_command@cmd,??_lcd_command
  2153  000CEC  0E06               	movlw	6
  2154  000CEE  6E02               	movwf	(??_lcd_command+1)& (0+255),c
  2155  000CF0                     u25:
  2156  000CF0  90D8               	bcf	status,0,c
  2157  000CF2  3201               	rrcf	??_lcd_command,f,c
  2158  000CF4  2E02               	decfsz	(??_lcd_command+1)& (0+255),f,c
  2159  000CF6  D7FC               	goto	u25
  2160  000CF8  0E01               	movlw	1
  2161  000CFA  1601               	andwf	??_lcd_command,f,c
  2162  000CFC  3A01               	swapf	??_lcd_command,f,c
  2163  000CFE  5082               	movf	3970,w,c	;volatile
  2164  000D00  1801               	xorwf	??_lcd_command,w,c
  2165  000D02  0BEF               	andlw	-17
  2166  000D04  1801               	xorwf	??_lcd_command,w,c
  2167  000D06  6E82               	movwf	3970,c	;volatile
  2168                           
  2169                           ;lcd.c: 60: PORTCbits.RC5 = (cmd >> 7) & 1;
  2170  000D08  6A01               	clrf	??_lcd_command& (0+255),c
  2171  000D0A  AE03               	btfss	lcd_command@cmd,7,c
  2172  000D0C  D001               	bra	u35
  2173  000D0E  2A01               	incf	??_lcd_command& (0+255),f,c
  2174  000D10                     u35:
  2175  000D10  0E01               	movlw	1
  2176  000D12  1601               	andwf	??_lcd_command,f,c
  2177  000D14  3A01               	swapf	??_lcd_command,f,c
  2178  000D16  4601               	rlncf	??_lcd_command,f,c
  2179  000D18  5082               	movf	3970,w,c	;volatile
  2180  000D1A  1801               	xorwf	??_lcd_command,w,c
  2181  000D1C  0BDF               	andlw	-33
  2182  000D1E  1801               	xorwf	??_lcd_command,w,c
  2183  000D20  6E82               	movwf	3970,c	;volatile
  2184                           
  2185                           ;lcd.c: 61: lcd_strobe();
  2186  000D22  EC0D  F008         	call	_lcd_strobe	;wreg free
  2187                           
  2188                           ;lcd.c: 62: PORTCbits.RC2 = cmd & 1;
  2189  000D26  C003  F001         	movff	lcd_command@cmd,??_lcd_command
  2190  000D2A  0E01               	movlw	1
  2191  000D2C  1601               	andwf	??_lcd_command,f,c
  2192  000D2E  4601               	rlncf	??_lcd_command,f,c
  2193  000D30  4601               	rlncf	??_lcd_command,f,c
  2194  000D32  5082               	movf	3970,w,c	;volatile
  2195  000D34  1801               	xorwf	??_lcd_command,w,c
  2196  000D36  0BFB               	andlw	-5
  2197  000D38  1801               	xorwf	??_lcd_command,w,c
  2198  000D3A  6E82               	movwf	3970,c	;volatile
  2199                           
  2200                           ;lcd.c: 63: PORTCbits.RC3 = (cmd >> 1) & 1;
  2201  000D3C  C003  F001         	movff	lcd_command@cmd,??_lcd_command
  2202  000D40  90D8               	bcf	status,0,c
  2203  000D42  3201               	rrcf	??_lcd_command,f,c
  2204  000D44  0E01               	movlw	1
  2205  000D46  1601               	andwf	??_lcd_command,f,c
  2206  000D48  4601               	rlncf	??_lcd_command,f,c
  2207  000D4A  4601               	rlncf	??_lcd_command,f,c
  2208  000D4C  4601               	rlncf	??_lcd_command,f,c
  2209  000D4E  5082               	movf	3970,w,c	;volatile
  2210  000D50  1801               	xorwf	??_lcd_command,w,c
  2211  000D52  0BF7               	andlw	-9
  2212  000D54  1801               	xorwf	??_lcd_command,w,c
  2213  000D56  6E82               	movwf	3970,c	;volatile
  2214                           
  2215                           ;lcd.c: 64: PORTCbits.RC4 = (cmd >> 2) & 1;
  2216  000D58  C003  F001         	movff	lcd_command@cmd,??_lcd_command
  2217  000D5C  90D8               	bcf	status,0,c
  2218  000D5E  3201               	rrcf	??_lcd_command,f,c
  2219  000D60  90D8               	bcf	status,0,c
  2220  000D62  3201               	rrcf	??_lcd_command,f,c
  2221  000D64  0E01               	movlw	1
  2222  000D66  1601               	andwf	??_lcd_command,f,c
  2223  000D68  3A01               	swapf	??_lcd_command,f,c
  2224  000D6A  5082               	movf	3970,w,c	;volatile
  2225  000D6C  1801               	xorwf	??_lcd_command,w,c
  2226  000D6E  0BEF               	andlw	-17
  2227  000D70  1801               	xorwf	??_lcd_command,w,c
  2228  000D72  6E82               	movwf	3970,c	;volatile
  2229                           
  2230                           ;lcd.c: 65: PORTCbits.RC5 = (cmd >> 3) & 1;
  2231  000D74  C003  F001         	movff	lcd_command@cmd,??_lcd_command
  2232  000D78  90D8               	bcf	status,0,c
  2233  000D7A  3201               	rrcf	??_lcd_command,f,c
  2234  000D7C  90D8               	bcf	status,0,c
  2235  000D7E  3201               	rrcf	??_lcd_command,f,c
  2236  000D80  90D8               	bcf	status,0,c
  2237  000D82  3201               	rrcf	??_lcd_command,f,c
  2238  000D84  0E01               	movlw	1
  2239  000D86  1601               	andwf	??_lcd_command,f,c
  2240  000D88  3A01               	swapf	??_lcd_command,f,c
  2241  000D8A  4601               	rlncf	??_lcd_command,f,c
  2242  000D8C  5082               	movf	3970,w,c	;volatile
  2243  000D8E  1801               	xorwf	??_lcd_command,w,c
  2244  000D90  0BDF               	andlw	-33
  2245  000D92  1801               	xorwf	??_lcd_command,w,c
  2246  000D94  6E82               	movwf	3970,c	;volatile
  2247                           
  2248                           ;lcd.c: 66: lcd_strobe();
  2249  000D96  EC0D  F008         	call	_lcd_strobe	;wreg free
  2250  000D9A  0012               	return		;funcret
  2251  000D9C                     __end_of_lcd_command:
  2252                           	opt stack 0
  2253                           tblptru	equ	0xFF8
  2254                           tblptrh	equ	0xFF7
  2255                           tblptrl	equ	0xFF6
  2256                           tablat	equ	0xFF5
  2257                           prodh	equ	0xFF4
  2258                           prodl	equ	0xFF3
  2259                           wreg	equ	0xFE8
  2260                           indf2	equ	0xFDF
  2261                           postinc2	equ	0xFDE
  2262                           postdec2	equ	0xFDD
  2263                           fsr2h	equ	0xFDA
  2264                           fsr2l	equ	0xFD9
  2265                           status	equ	0xFD8
  2266                           
  2267 ;; *************** function _lcd_strobe *****************
  2268 ;; Defined at:
  2269 ;;		line 83 in file "lcd.c"
  2270 ;; Parameters:    Size  Location     Type
  2271 ;;		None
  2272 ;; Auto vars:     Size  Location     Type
  2273 ;;		None
  2274 ;; Return value:  Size  Location     Type
  2275 ;;		None               void
  2276 ;; Registers used:
  2277 ;;		None
  2278 ;; Tracked objects:
  2279 ;;		On entry : 0/0
  2280 ;;		On exit  : 0/0
  2281 ;;		Unchanged: 0/0
  2282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2283 ;;      Params:         0       0       0       0       0       0       0       0       0
  2284 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2285 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2286 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2287 ;;Total ram usage:        0 bytes
  2288 ;; Hardware stack levels used:    1
  2289 ;; This function calls:
  2290 ;;		Nothing
  2291 ;; This function is called by:
  2292 ;;		_lcd_command
  2293 ;;		_lcd_data
  2294 ;; This function uses a non-reentrant model
  2295 ;;
  2296                           
  2297                           	psect	text14
  2298  00101A                     __ptext14:
  2299                           	opt stack 0
  2300  00101A                     _lcd_strobe:
  2301                           	opt stack 28
  2302                           
  2303                           ;lcd.c: 84: PORTCbits.RC1 = 1;
  2304                           
  2305                           ;incstack = 0
  2306  00101A  8282               	bsf	3970,1,c	;volatile
  2307                           
  2308                           ;lcd.c: 85: _delay((unsigned long)((1)*(8000000/4000000.0)));
  2309  00101C  D000               	nop2		;2 cycle nop
  2310                           
  2311                           ;lcd.c: 86: PORTCbits.RC1 = 0;
  2312  00101E  9282               	bcf	3970,1,c	;volatile
  2313                           
  2314                           ;lcd.c: 87: _delay((unsigned long)((1)*(8000000/4000000.0)));
  2315  001020  D000               	nop2		;2 cycle nop
  2316  001022  0012               	return		;funcret
  2317  001024                     __end_of_lcd_strobe:
  2318                           	opt stack 0
  2319                           tblptru	equ	0xFF8
  2320                           tblptrh	equ	0xFF7
  2321                           tblptrl	equ	0xFF6
  2322                           tablat	equ	0xFF5
  2323                           prodh	equ	0xFF4
  2324                           prodl	equ	0xFF3
  2325                           wreg	equ	0xFE8
  2326                           indf2	equ	0xFDF
  2327                           postinc2	equ	0xFDE
  2328                           postdec2	equ	0xFDD
  2329                           fsr2h	equ	0xFDA
  2330                           fsr2l	equ	0xFD9
  2331                           status	equ	0xFD8
  2332                           
  2333 ;; *************** function _init_uart *****************
  2334 ;; Defined at:
  2335 ;;		line 75 in file "main.c"
  2336 ;; Parameters:    Size  Location     Type
  2337 ;;		None
  2338 ;; Auto vars:     Size  Location     Type
  2339 ;;		None
  2340 ;; Return value:  Size  Location     Type
  2341 ;;		None               void
  2342 ;; Registers used:
  2343 ;;		wreg, status,2
  2344 ;; Tracked objects:
  2345 ;;		On entry : 0/0
  2346 ;;		On exit  : 0/0
  2347 ;;		Unchanged: 0/0
  2348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2349 ;;      Params:         0       0       0       0       0       0       0       0       0
  2350 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2351 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2352 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2353 ;;Total ram usage:        0 bytes
  2354 ;; Hardware stack levels used:    1
  2355 ;; This function calls:
  2356 ;;		Nothing
  2357 ;; This function is called by:
  2358 ;;		_main
  2359 ;; This function uses a non-reentrant model
  2360 ;;
  2361                           
  2362                           	psect	text15
  2363  000FFA                     __ptext15:
  2364                           	opt stack 0
  2365  000FFA                     _init_uart:
  2366                           	opt stack 30
  2367                           
  2368                           ;main.c: 76: SPBRG = ((unsigned int)(8000000/(16UL * 9600) - 1));
  2369                           
  2370                           ;incstack = 0
  2371  000FFA  0E33               	movlw	51
  2372  000FFC  6EAF               	movwf	4015,c	;volatile
  2373                           
  2374                           ;main.c: 77: TXSTAbits.BRGH = 1;
  2375  000FFE  84AC               	bsf	4012,2,c	;volatile
  2376                           
  2377                           ;main.c: 78: RCSTAbits.SPEN = 1;
  2378  001000  8EAB               	bsf	4011,7,c	;volatile
  2379                           
  2380                           ;main.c: 79: TXSTAbits.TXEN = 1;
  2381  001002  8AAC               	bsf	4012,5,c	;volatile
  2382  001004  0012               	return		;funcret
  2383  001006                     __end_of_init_uart:
  2384                           	opt stack 0
  2385                           tblptru	equ	0xFF8
  2386                           tblptrh	equ	0xFF7
  2387                           tblptrl	equ	0xFF6
  2388                           tablat	equ	0xFF5
  2389                           prodh	equ	0xFF4
  2390                           prodl	equ	0xFF3
  2391                           wreg	equ	0xFE8
  2392                           indf2	equ	0xFDF
  2393                           postinc2	equ	0xFDE
  2394                           postdec2	equ	0xFDD
  2395                           fsr2h	equ	0xFDA
  2396                           fsr2l	equ	0xFD9
  2397                           status	equ	0xFD8
  2398                           
  2399 ;; *************** function _init_leds_and_motor *****************
  2400 ;; Defined at:
  2401 ;;		line 6 in file "motor_led.c"
  2402 ;; Parameters:    Size  Location     Type
  2403 ;;		None
  2404 ;; Auto vars:     Size  Location     Type
  2405 ;;		None
  2406 ;; Return value:  Size  Location     Type
  2407 ;;		None               void
  2408 ;; Registers used:
  2409 ;;		wreg, status,2
  2410 ;; Tracked objects:
  2411 ;;		On entry : 0/0
  2412 ;;		On exit  : 0/0
  2413 ;;		Unchanged: 0/0
  2414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2415 ;;      Params:         0       0       0       0       0       0       0       0       0
  2416 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2417 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2418 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2419 ;;Total ram usage:        0 bytes
  2420 ;; Hardware stack levels used:    1
  2421 ;; This function calls:
  2422 ;;		Nothing
  2423 ;; This function is called by:
  2424 ;;		_main
  2425 ;; This function uses a non-reentrant model
  2426 ;;
  2427                           
  2428                           	psect	text16
  2429  001024                     __ptext16:
  2430                           	opt stack 0
  2431  001024                     _init_leds_and_motor:
  2432                           	opt stack 30
  2433                           
  2434                           ;motor_led.c: 7: TRISD = 0x00;
  2435                           
  2436                           ;incstack = 0
  2437  001024  0E00               	movlw	0
  2438  001026  6E95               	movwf	3989,c	;volatile
  2439                           
  2440                           ;motor_led.c: 9: LATD = 0x00;
  2441  001028  0E00               	movlw	0
  2442  00102A  6E8C               	movwf	3980,c	;volatile
  2443  00102C  0012               	return		;funcret
  2444  00102E                     __end_of_init_leds_and_motor:
  2445                           	opt stack 0
  2446                           tblptru	equ	0xFF8
  2447                           tblptrh	equ	0xFF7
  2448                           tblptrl	equ	0xFF6
  2449                           tablat	equ	0xFF5
  2450                           prodh	equ	0xFF4
  2451                           prodl	equ	0xFF3
  2452                           wreg	equ	0xFE8
  2453                           indf2	equ	0xFDF
  2454                           postinc2	equ	0xFDE
  2455                           postdec2	equ	0xFDD
  2456                           fsr2h	equ	0xFDA
  2457                           fsr2l	equ	0xFD9
  2458                           status	equ	0xFD8
  2459                           
  2460 ;; *************** function _display_level *****************
  2461 ;; Defined at:
  2462 ;;		line 37 in file "motor_led.c"
  2463 ;; Parameters:    Size  Location     Type
  2464 ;;  level           2    0[COMRAM] int 
  2465 ;; Auto vars:     Size  Location     Type
  2466 ;;		None
  2467 ;; Return value:  Size  Location     Type
  2468 ;;		None               void
  2469 ;; Registers used:
  2470 ;;		wreg, status,2, status,0
  2471 ;; Tracked objects:
  2472 ;;		On entry : 0/0
  2473 ;;		On exit  : 0/0
  2474 ;;		Unchanged: 0/0
  2475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2476 ;;      Params:         2       0       0       0       0       0       0       0       0
  2477 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2478 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2479 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2480 ;;Total ram usage:        2 bytes
  2481 ;; Hardware stack levels used:    1
  2482 ;; This function calls:
  2483 ;;		Nothing
  2484 ;; This function is called by:
  2485 ;;		_main
  2486 ;; This function uses a non-reentrant model
  2487 ;;
  2488                           
  2489                           	psect	text17
  2490  00102E                     __ptext17:
  2491                           	opt stack 0
  2492  00102E                     _display_level:
  2493                           	opt stack 30
  2494                           
  2495                           ;motor_led.c: 39: LATD = (level & 0x0F);
  2496                           
  2497                           ;incstack = 0
  2498  00102E  5001               	movf	display_level@level,w,c
  2499  001030  0B0F               	andlw	15
  2500  001032  6E8C               	movwf	3980,c	;volatile
  2501  001034  0012               	return		;funcret
  2502  001036                     __end_of_display_level:
  2503                           	opt stack 0
  2504                           tblptru	equ	0xFF8
  2505                           tblptrh	equ	0xFF7
  2506                           tblptrl	equ	0xFF6
  2507                           tablat	equ	0xFF5
  2508                           prodh	equ	0xFF4
  2509                           prodl	equ	0xFF3
  2510                           wreg	equ	0xFE8
  2511                           indf2	equ	0xFDF
  2512                           postinc2	equ	0xFDE
  2513                           postdec2	equ	0xFDD
  2514                           fsr2h	equ	0xFDA
  2515                           fsr2l	equ	0xFD9
  2516                           status	equ	0xFD8
  2517                           
  2518 ;; *************** function ___wmul *****************
  2519 ;; Defined at:
  2520 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  2521 ;; Parameters:    Size  Location     Type
  2522 ;;  multiplier      2    0[COMRAM] unsigned int 
  2523 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2524 ;; Auto vars:     Size  Location     Type
  2525 ;;  product         2    4[COMRAM] unsigned int 
  2526 ;; Return value:  Size  Location     Type
  2527 ;;                  2    0[COMRAM] unsigned int 
  2528 ;; Registers used:
  2529 ;;		wreg, status,2, status,0, prodl, prodh
  2530 ;; Tracked objects:
  2531 ;;		On entry : 0/0
  2532 ;;		On exit  : 0/0
  2533 ;;		Unchanged: 0/0
  2534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2535 ;;      Params:         4       0       0       0       0       0       0       0       0
  2536 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2537 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2538 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2539 ;;Total ram usage:        6 bytes
  2540 ;; Hardware stack levels used:    1
  2541 ;; This function calls:
  2542 ;;		Nothing
  2543 ;; This function is called by:
  2544 ;;		_main
  2545 ;; This function uses a non-reentrant model
  2546 ;;
  2547                           
  2548                           	psect	text18
  2549  000FBA                     __ptext18:
  2550                           	opt stack 0
  2551  000FBA                     ___wmul:
  2552                           	opt stack 30
  2553                           
  2554                           ;incstack = 0
  2555  000FBA  5001               	movf	___wmul@multiplier,w,c
  2556  000FBC  0203               	mulwf	___wmul@multiplicand,c
  2557  000FBE  CFF3 F005          	movff	prodl,___wmul@product
  2558  000FC2  CFF4 F006          	movff	prodh,___wmul@product+1
  2559  000FC6  5001               	movf	___wmul@multiplier,w,c
  2560  000FC8  0204               	mulwf	___wmul@multiplicand+1,c
  2561  000FCA  50F3               	movf	prodl,w,c
  2562  000FCC  2606               	addwf	___wmul@product+1,f,c
  2563  000FCE  5002               	movf	___wmul@multiplier+1,w,c
  2564  000FD0  0203               	mulwf	___wmul@multiplicand,c
  2565  000FD2  50F3               	movf	prodl,w,c
  2566  000FD4  2606               	addwf	___wmul@product+1,f,c
  2567  000FD6  C005  F001         	movff	___wmul@product,?___wmul
  2568  000FDA  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2569  000FDE  D000               	goto	l172
  2570  000FE0                     l172:
  2571  000FE0  0012               	return		;funcret
  2572  000FE2                     __end_of___wmul:
  2573                           	opt stack 0
  2574                           tblptru	equ	0xFF8
  2575                           tblptrh	equ	0xFF7
  2576                           tblptrl	equ	0xFF6
  2577                           tablat	equ	0xFF5
  2578                           prodh	equ	0xFF4
  2579                           prodl	equ	0xFF3
  2580                           wreg	equ	0xFE8
  2581                           indf2	equ	0xFDF
  2582                           postinc2	equ	0xFDE
  2583                           postdec2	equ	0xFDD
  2584                           fsr2h	equ	0xFDA
  2585                           fsr2l	equ	0xFD9
  2586                           status	equ	0xFD8
  2587                           tblptru	equ	0xFF8
  2588                           tblptrh	equ	0xFF7
  2589                           tblptrl	equ	0xFF6
  2590                           tablat	equ	0xFF5
  2591                           prodh	equ	0xFF4
  2592                           prodl	equ	0xFF3
  2593                           wreg	equ	0xFE8
  2594                           indf2	equ	0xFDF
  2595                           postinc2	equ	0xFDE
  2596                           postdec2	equ	0xFDD
  2597                           fsr2h	equ	0xFDA
  2598                           fsr2l	equ	0xFD9
  2599                           status	equ	0xFD8
  2600                           
  2601                           	psect	rparam
  2602  0000                     tblptru	equ	0xFF8
  2603                           tblptrh	equ	0xFF7
  2604                           tblptrl	equ	0xFF6
  2605                           tablat	equ	0xFF5
  2606                           prodh	equ	0xFF4
  2607                           prodl	equ	0xFF3
  2608                           wreg	equ	0xFE8
  2609                           indf2	equ	0xFDF
  2610                           postinc2	equ	0xFDE
  2611                           postdec2	equ	0xFDD
  2612                           fsr2h	equ	0xFDA
  2613                           fsr2l	equ	0xFD9
  2614                           status	equ	0xFD8


Data Sizes:
    Strings     20
    Constant    10
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     55      55
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_2(CODE[12]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> main@buffer(COMRAM[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    lcd_write_string@str	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_1(CODE[8]), 

    uart_send_string@str	PTR const unsigned char  size(2) Largest target is 20
		 -> main@buffer(COMRAM[20]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _lcd_write_string->_lcd_data
    _lcd_write_char->_lcd_data
    _lcd_set_cursor->_lcd_command
    _lcd_init->_lcd_command
    _lcd_clear->_lcd_command

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                29    29      0    3367
                                             26 COMRAM    29    29      0
                             ___wmul
                      _display_level
                _init_leds_and_motor
                          _init_uart
                          _lcd_clear
                           _lcd_init
                     _lcd_set_cursor
                     _lcd_write_char
                   _lcd_write_string
                        _read_keypad
                            _sprintf
                         _step_motor
                   _uart_send_string
 ---------------------------------------------------------------------------------
 (1) _uart_send_string                                     2     0      2     109
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _step_motor                                           7     5      2     201
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             23    17      6    1182
                                             12 COMRAM    14     8      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _read_keypad                                          5     5      0     150
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (1) _lcd_write_string                                     2     0      2     229
                                              3 COMRAM     2     0      2
                           _lcd_data
 ---------------------------------------------------------------------------------
 (1) _lcd_write_char                                       1     1      0     135
                                              3 COMRAM     1     1      0
                           _lcd_data
 ---------------------------------------------------------------------------------
 (2) _lcd_data                                             3     3      0     120
                                              0 COMRAM     3     3      0
                         _lcd_strobe
 ---------------------------------------------------------------------------------
 (1) _lcd_set_cursor                                       6     2      4     361
                                              3 COMRAM     6     2      4
                        _lcd_command
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0     120
                                              3 COMRAM     1     1      0
                        _lcd_command
 ---------------------------------------------------------------------------------
 (1) _lcd_clear                                            1     1      0     120
                                              3 COMRAM     1     1      0
                        _lcd_command
 ---------------------------------------------------------------------------------
 (2) _lcd_command                                          3     3      0     120
                                              0 COMRAM     3     3      0
                         _lcd_strobe
 ---------------------------------------------------------------------------------
 (3) _lcd_strobe                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_uart                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_leds_and_motor                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _display_level                                        2     0      2     150
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     287
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___wmul
   _display_level
   _init_leds_and_motor
   _init_uart
   _lcd_clear
     _lcd_command
       _lcd_strobe
   _lcd_init
     _lcd_command
       _lcd_strobe
   _lcd_set_cursor
     _lcd_command
       _lcd_strobe
   _lcd_write_char
     _lcd_data
       _lcd_strobe
   _lcd_write_string
     _lcd_data
       _lcd_strobe
   _read_keypad
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
   _step_motor
   _uart_send_string

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     37      37       1       57.9%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Mon Jun 10 22:56:23 2024

                lcd_data@data 0003      __end_of_uart_send_string 0FBA                            l52 0E44  
                          l55 0AD6                            l68 0F94                            u15 0CCC  
                          u25 0CF0                            u35 0D10                            u45 0BD4  
                          u55 0BF8                            u65 0C18           ___wmul@multiplicand 0003  
                         l133 0A94                           l135 0A2E                           l172 0FE0  
                         l169 0988                           l700 0EE4                           l841 0DA8  
                         l690 0E98                           l861 0E22                           l853 0E0A  
                         l845 0DBC                           l865 0E2E                           l857 0E16  
                         l873 0E40                           l869 0E38                           u144 0DCC  
                         u145 0DC8                           u154 0DE6                           u155 0DE2  
                         u500 09CE                           u707 0A0C                           u717 0A24  
                         u727 0A3C                           u737 0A54                           u747 0A6C  
                         u757 0A84                           u767 0DF6                           u687 09DC  
                         u777 0EF8                           u697 09F4                           u787 0F24  
                         u797 0FEE                           wreg 000FE8               ?_lcd_set_cursor 0004  
                        l1121 0E6E                          l1117 0E5C                          l1141 0EC2  
                        l1231 0F5C                          l1119 0E66                          l1129 0E8C  
                        l1145 0ED8                          l1137 0EB0                          l1161 09B6  
                        l1153 0998                          l1227 0F44                          l1235 0F66  
                        l1139 0EBA                          l1243 082A                          l1219 0A90  
                        l1163 09C0                          l1155 099E                          l1307 0FAA  
                        l1331 0B02                          l1253 0852                          l1157 09A8  
                        l1239 0F7C                          l1271 08B2                          l1255 0878  
                        l1265 08A2                          l1249 0844                          l1275 08D6  
                        l1267 08A6                          l1293 0952                          l1285 08F8  
                        l1287 08FE                          l1279 08DA                          l1295 095E  
                        l1297 097A                          STR_1 0817                          STR_2 080B  
           main@current_level 0036                          _LATB 000F8A                          _LATD 000F8C  
              ?_display_level 0001               lcd_write_char@c 0004        __end_of_lcd_write_char 101A  
                        _main 0AAA                          fsr2h 000FDA                          indf2 000FDF  
                        fsr2l 000FD9                          prodh 000FF4                          prodl 000FF3  
                        start 0000                  ___param_bank 000010                         ?_main 0001  
             __end_of___lwdiv 0EA2               __end_of___lwmod 0EEE                         _SPBRG 000FAF  
                       _TRISA 000F92                         _TRISB 000F93                         _TRISC 000F94  
                       _TRISD 000F95                         _TXREG 000FAD                  ?_read_keypad 0001  
             __end_of_dpowers 080B                         tablat 000FF5               ?_lcd_write_char 0001  
                       status 000FD8               __end_of_sprintf 098A               __initialization 1006  
                __end_of_main 0BAC                        ??_main 001B                 __activetblptr 000002  
              lcd_command@cmd 0003               ??_display_level 0003              __end_of_lcd_data 0CA4  
            __end_of_lcd_init 0F30          __size_of_lcd_command 00F8                        ___wmul 0FBA  
                   ??___lwdiv 0005                     ??___lwmod 000C      __end_of_lcd_write_string 0F90  
                __mediumconst 0000                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8                     ??_sprintf 0013                    __accesstop 0060  
     __end_of__initialization 1006  __size_of_init_leds_and_motor 000A                 ___rparam_used 000001  
              __pcstackCOMRAM 0001             ?_uart_send_string 0001            ??_uart_send_string 0003  
            ??_lcd_set_cursor 0008            __size_of_lcd_clear 0018          __size_of_read_keypad 00AA  
          __size_of_init_uart 000C                       ?___wmul 0001              ??_lcd_write_char 0004  
                   ?_lcd_data 0001                    _lcd_strobe 101A                     ?_lcd_init 0001  
                     __Hparam 0000                       __Lparam 0000             __end_of_lcd_clear 0FFA  
             __size_of___wmul 0028                       ___lwdiv 0E46                       ___lwmod 0EA2  
                __psmallconst 0800                       __pcinit 1006                       __ramtop 0800  
                     __ptext0 0AAA                       __ptext1 0F90                       __ptext2 098A  
                     __ptext3 0820                       __ptext4 0EA2                       __ptext5 0E46  
                     __ptext6 0D9C                       __ptext7 0F64                       __ptext8 1010  
                     __ptext9 0BAC                       _dpowers 0801             __end_of_init_uart 1006  
                  ??_lcd_data 0001                       _sprintf 0820                       main@key 0033  
                  ??_lcd_init 0004          end_of_initialization 1006                 __Lmediumconst 0000  
                   _RCSTAbits 000FAB                       postdec2 000FDD                       postinc2 000FDE  
                   _PORTAbits 000F80                     _PORTCbits 000F82             ?_lcd_write_string 0004  
         _init_leds_and_motor 1024            ??_lcd_write_string 0006            display_level@level 0001  
                 ?_lcd_strobe 0001         __end_of_display_level 1036                    _step_motor 098A  
        ?_init_leds_and_motor 0001                    main@buffer 001D                     _TXSTAbits 000FAC  
               ??_lcd_command 0001           step_motor@direction 0004                __end_of___wmul 0FE2  
         start_initialization 1006     __size_of_uart_send_string 002A         ??_init_leds_and_motor 0001  
       lcd_set_cursor@address 0008                      ??___wmul 0005           __end_of_lcd_command 0D9C  
         __size_of_lcd_strobe 000A                   step_motor@i 0006                 ??_read_keypad 0001  
                 ?_step_motor 0001             __size_of_lcd_data 00F8             __size_of_lcd_init 0042  
                 sprintf@flag 0016                   sprintf@prec 0017              ___lwdiv@dividend 0001  
                    ?___lwdiv 0001                      ?___lwmod 0008                     _lcd_clear 0FE2  
                 __smallconst 0800           uart_send_string@str 0001              ___lwdiv@quotient 0005  
                    ?_sprintf 000D                     _init_uart 0FFA              main@target_level 0034  
     __size_of_lcd_set_cursor 0034           __end_of_read_keypad 0E46                ___wmul@product 0005  
                    _LATDbits 000F8C                   _lcd_command 0CA4                    ?_lcd_clear 0001  
         __size_of_step_motor 0120             ___wmul@multiplier 0001                     main@steps 0031  
                ??_lcd_strobe 0001                    ?_init_uart 0001              _uart_send_string 0F90  
   __size_of_lcd_write_string 002C       __size_of_lcd_write_char 000A                      __Hrparam 0000  
                    __Lrparam 0000              __size_of___lwdiv 005C            __end_of_lcd_strobe 1024  
            __size_of___lwmod 004C                    sprintf@val 0018               ___lwdiv@divisor 0003  
             ___lwdiv@counter 0007                   _read_keypad 0D9C                      __ptext10 0F30  
                    __ptext11 0EEE                      __ptext12 0FE2                      __ptext13 0CA4  
                    __ptext14 101A                      __ptext15 0FFA                      __ptext16 1024  
                    __ptext17 102E                      __ptext18 0FBA                      _lcd_data 0BAC  
                    _lcd_init 0EEE              __size_of_sprintf 016A                 __size_of_main 0102  
                 ??_lcd_clear 0004        __size_of_display_level 0008   __end_of_init_leds_and_motor 102E  
                 ??_init_uart 0001                  ??_step_motor 0003                _lcd_set_cursor 0F30  
           lcd_set_cursor@col 0006               step_motor@steps 0001                     sprintf@ap 0014  
                   sprintf@sp 000D             lcd_set_cursor@row 0004              ___lwmod@dividend 0008  
              read_keypad@col 0004                read_keypad@key 0003            __end_of_step_motor 0AAA  
                    sprintf@c 001A                      sprintf@f 000F               ___lwmod@divisor 000A  
             ___lwmod@counter 000C        __end_of_lcd_set_cursor 0F64              _lcd_write_string 0F64  
               _display_level 102E                _lcd_write_char 1010                  ?_lcd_command 0001  
         lcd_write_string@str 0004  
